diagram {
	title = "function spell"

	io user {
		title = "User"
	}

	database iconv_table {
		title = "ICONV table"
	}

boundary spell {
	title = "spell(word)"

	function call_spell {
		title = "Begin spell()"
	}

	function substring_substitute {
		title = `Substring
		         substitute`
	}

	function trim_trailing_periods {
		title = `Trim trailing
		         periods`
	}

	function count_trailing_periods {
		title = `Count trailing
		         periods`
	}

	function trim_leading_space {
		title = `Trim leading
		         space`
	}

	function classify_capitalization {
		title = `Classify
		         capitalization`
	}

	database abbreviation {
		title = `Is
		         abbreviation`
	}

	function camel_case {
        title = `camel
                 Case`
	}

	function pascal_case {
        title = `Pascal
                 Case`
	}

	function lower_case {
        title = `lower
                 case`
	}

	function title_case {
        title = `Title
                 case`
	}

	function upper_case {
        title = `UPPER
                 CASE`
	}

	function checkword_abc {
        title = "checkword(abc)"
	}

	function checkword_abc_dot {
        title = "checkword(abc.)"
	}

	database info {
        title = "Info"
	}
}
	user -> call_spell {
        	operation = "call spell"
        	data = "word"
	}

	call_spell -> substring_substitute {
		operation = "substitute"
        	data = "word"
	}

	iconv_table -> substring_substitute {
		operation = "substitute"
		data = "(from, to) substitutions"
	}

	substring_substitute -> trim_trailing_periods {
		operation = "trim"
		data = "word"
	}

	substring_substitute -> count_trailing_periods {
		operation = "trim"
		data = "word"
	}

	count_trailing_periods -> abbreviation {
		operation = "store"
		data = "true if count &gt; 0"
	}

	trim_trailing_periods -> trim_leading_space {
		operation = "trim"
		data = "word"
	}

	trim_leading_space -> classify_capitalization {
		operation = "classify"
		data = "word"
	}

	classify_capitalization -> camel_case {
        operation = "case camelCase"
        data = "word"
	}

	classify_capitalization -> pascal_case {
        operation = "case PascalCase"
        data = "word"
	}

	classify_capitalization -> lower_case {
        operation = "case lowercase"
        data = "word"
	}

	classify_capitalization -> upper_case {
        operation = "case UPPERCASE"
        data = "word"
	}

	classify_capitalization -> title_case {
        operation = "case Title case"
        data = "word"
	}

	camel_case -> lower_case {
        operation = ""
        data = "word"
	}

	pascal_case -> info {
        operation = "set bit"
        data = "SPELL_ORIGCAP"
	}

	pascal_case -> lower_case {
	    operation = ""
        data = "word"
	}

	lower_case -> checkword_abc {
	    operation = "check 1"
        data = "word"
	}

	lower_case -> checkword_abc_dot {
	    operation = `IF(check 1 failed
	                    AND IS abbrev): check 2`
        data = "word with dot"
	}
}
