diagram {
	title = "function spell(word)"

	io user {
		title = "User"
	}

	database iconv_table {
		title = "ICONV table"
	}

boundary prepare {
	title = "prepare"

	function call_spell {
		title = "Begin spell()"
	}

	function substring_substitute {
		title = `Substring
		         substitute`
	}

	function trim_trailing_periods {
		title = `Trim trailing
		         periods`
	}

	function count_trailing_periods {
		title = `Count trailing
		         periods`
	}

	function trim_leading_space {
		title = `Trim leading
		         space`
	}

	function classify_casing {
		title = `Classify
		         casing`
	}

	database abbreviation {
		title = `Is
		         abbreviation`
	}
}
boundary checkword1 {
	title = `No case converson:
	         lowercase, camelCase, PascalCase`
	function camel_case {
		title = `camel
		         Case`
	}

	database info1 {
	        title = "Info1"
	}

	function pascal_case {
		title = `Pascal
		         Case`
	}

	function lower_case {
		title = `lower
		         case`
	}

	function check_abc {
        	title = "check abc"
	}

	function check_abc_dot {
        	title = "check abc."
	}

	function end_check1 {
		title = "end checks"
	}
}



boundary checkword2 {
	title = "UPPERCASE"
	function upper_case {
		title = `UPPER
		         CASE`
	}

	database info2 {
		title = "Info2"
	}

	function check_ABC {
		title = "check ABC"
	}

	function check_ABC_dot {
		title = "check ABC."
	}

	function check_abc_ap_Xyz {
		title = "check abc'Xyz"
	}

	function check_Abc_ap_Xyz {
		title = "check Abc'Xyz"
	}
}

boundary upper_case_spellsharps {
	title = "UPPERCASE spellsharps"
	function spellsharps_abc {
		title = `spellsharps
		         abcssabcss`
	}

	function spellsharps_Abc {
		title = `spellsharps
		         Abcssabcss`
	}
	function spellsharps_abc_dot {
		title = `spellsharps
		         Abcssabcss.`
	}
	function spellsharps_Abc_dot {
		title = `spellsharps
		         Abcssabcss.`
	}
}
boundary upper_case_initcap {
	title = "UPPERCASE initcap"
	function make_initcap {
		title = `Initcap lang
		         sensitive
		         (dotted i)`
	}

	function check_Abc_ALLCAP {
		title = "check Abc"
	}

	function check_abc_ALLCAP {
		title = "check abc"
	}

	function check_abc_dot_ALLCAP {
		title = "check abc."
	}

	function check_Abc_dot_ALLCAP {
		title = "check Abc."
	}

	function keepcase1 {
		title = `If KEEPCASE
		         reject`
	}
}
	function end_check2 {
		title = "end checks"
	}

boundary checkword3 {
	title = "Initcap"
	function title_case {
		title = `Title
		         case`
	}
	database info3 {
		title = "info 3"
	}
	function check_Abc {
		title = `check Abc
		         with
		         SPELL_INITCAP`
	}
	function check_Abc_dot {
		title = `check Abc.
		         with
		         SPELL_INITCAP`
	}
	function check_abc_Initcap {
		title = "check abc"
	}
	function check_abc_dot_Initcap {
		title = "check abc."
	}
	function keepcase2 {
		title = `If KEEPCASE 2
		         reject`
	}
	function end_check3 {
		title = "end checks"
	}
}

	function end_check_final {
		title = "end checks"
	}

	user -> call_spell {
        	operation = "call spell"
        	data = "word"
	}

	call_spell -> substring_substitute {
		operation = "substitute"
        	data = "word"
	}

	iconv_table -> substring_substitute {
		operation = "substitute"
		data = "(from, to) substitutions"
	}

	substring_substitute -> trim_trailing_periods {
		operation = "trim"
		data = "word"
	}

	substring_substitute -> count_trailing_periods {
		operation = "trim"
		data = "word"
	}

	count_trailing_periods -> abbreviation {
		operation = "store"
		data = "true if count &gt; 0"
	}

	trim_trailing_periods -> trim_leading_space {
		operation = "trim"
		data = "word"
	}

	trim_leading_space -> classify_casing {
		operation = "classify"
		data = "word"
	}

	classify_casing -> camel_case {
		operation = "case camelCase"
		data = "word"
	}

	classify_casing -> pascal_case {
		operation = "case PascalCase"
		data = "word"
	}

	classify_casing -> lower_case {
		operation = "case lowercase"
		data = "word"
	}

	classify_casing -> upper_case {
		operation = "case UPPERCASE"
		data = "word"
	}

	classify_casing -> title_case {
		operation = "case Title case"
		data = "word"
	}

	camel_case -> pascal_case {
		operation = ""
		data = "word"
	}

	pascal_case -> info1 {
		operation = "set bit"
		data = "SPELL_ORIGCAP"
	}

	pascal_case -> lower_case {
		operation = ""
		data = "word"
	}

	lower_case -> check_abc {
		operation = "check 1"
		data = "word"
	}

	check_abc -> end_check1 {
		operation = "break on success"
		data = "word/flag entry"
	}

	lower_case -> check_abc_dot {
		operation = `IF(check 1 failed
		                AND IS abbrev): check 2`
        	data = "word."
	}

	check_abc_dot -> end_check1 {
		operation = "break on success"
		data = "word/flag entry"
	}

	upper_case -> info2 {
		operation = "set"
		data = "SPELL_ORIGCAP"
	}

	upper_case -> check_ABC {
		operation = `IF check 2 failed:
		             check 3`
		data = "WORD"
	}

	check_ABC -> end_check2 {
		operation = "break on success"
		data = "word/flag entry"
	}

	upper_case -> check_ABC_dot {
		operation = `IF check 3 failed:
		             check 4`
		data = "WORD."
	}

	check_ABC_dot -> end_check2 {
		operation = "break on success"
		data = "word/flag entry"
	}

	upper_case -> check_abc_ap_Xyz {
		operation = `IF check 4 failed
		             AND word has ':
		             check 5`
		data = "word'Word"
	}

	check_abc_ap_Xyz -> end_check2 {
		operation = "break on success"
		data = "word/flag entry"
	}

	upper_case -> check_Abc_ap_Xyz {
		operation = `IF check 5 failed
		             AND word has ':
		             check 6`
		data = "Word'Word"
	}

	check_Abc_ap_Xyz -> end_check2 {
		operation = "break"
		data = "word/flag"
	}

	upper_case -> spellsharps_abc {
		operation = `IF check 6 failed
		             AND word has SS
		             AND CHECKSHARPS:
		             spellsharps 1`
		data = "wordssw"

	}
	spellsharps_abc -> end_check2 {
		operation = "break"
		data = "word/flag"
	}


	upper_case -> spellsharps_Abc {
		operation = `IF sharps 1 failed
		             AND word has SS
		             AND CHECKSHARPS:
		             spellsharps 2`
		data = "Wordssw"

	}
	spellsharps_Abc -> end_check2 {
		operation = "break"
		data = "word/flag"
	}


	upper_case -> spellsharps_abc_dot {
		operation = `IF sharps 2 failed
		             AND word has SS
		             AND CHECKSHARPS:
		             spellsharps 3`
		data = "wordssw."

	}
	spellsharps_abc_dot -> end_check2 {
		operation = "break"
		data = "word/flag"
	}


	upper_case -> spellsharps_Abc_dot {
		operation = `IF sharps 3 failed
		             AND word has SS
		             AND CHECKSHARPS:
		             spellsharps 4`
		data = "Wordssw."
	}
	spellsharps_Abc_dot -> end_check2 {
		operation = "break"
		data = "word/flag"
	}


	upper_case -> make_initcap {
		operation = `initcap`
		data = "word"
	}

	make_initcap -> check_Abc_ALLCAP {
		operation = `IF sharp 4 failed:
		             check 7`
		data = "Word"
	}

	check_Abc_ALLCAP -> end_check2 {
		operation = `IF (FORBIDDENWORD flag present):
		             break, skip next checks`
		data = "null"
	}
	check_Abc_ALLCAP -> end_check2 {
		operation = "break"
		data = "word/flag"
	}

	make_initcap -> check_abc_ALLCAP {
		operation = `IF check 7 failed:
		             check 8`
		data = "word"
	}

	make_initcap -> check_abc_dot_ALLCAP {
		operation = `IF check 8 failed:
		             check 9`
		data = "word."
	}

	make_initcap -> check_Abc_dot_ALLCAP {
		operation = `IF check 9 failed:
		             check 10`
		data = "Word."
	}

	check_Abc_ALLCAP -> keepcase1 {
		operation = `is KEEPCASE
		             present`
		data = "word/flags"
	}
	check_abc_ALLCAP -> keepcase1 {
		operation = `is KEEPCASE
		             present`
		data = "word/flags"
	}
	check_abc_dot_ALLCAP -> keepcase1 {
		operation = `is KEEPCASE
		             present`
		data = "word/flags"
	}
	check_Abc_dot_ALLCAP -> keepcase1 {
		operation = `is KEEPCASE
		             present`
		data = "word/flags"
	}

	keepcase1 -> end_check2 {
		operation = `IF KEEPCASE present:`
		data = "null"
	}

	keepcase1 -> end_check2 {
		operation = `IF KEEPCASE NOT present:`
		data = "null"
	}
	title_case -> info3 {
		operation = "set"
		data = "SPELL_ORIGCAP"
	}

	title_case -> check_Abc {
		operation = "check 10"
		data = "Word"
	}
	check_Abc -> end_check3 {
		operation = `IF (FORBIDDENWORD flag present):
		             break, skip next checks`
		data = "null"
	}
	check_Abc -> end_check3 {
		operation = "break"
		data = "word/flag"
	}

	title_case -> check_Abc_dot {
		operation = `IF check 10 failed:
		             check 11`
		data = "Word."
	}
	check_Abc_dot -> end_check3 {
		operation = "break"
		data = "word/flag"
	}

	title_case -> check_abc_Initcap {
		operation = `IF check 11 failed:
		             check 12`
		data = "word"
	}
	title_case -> check_abc_dot_Initcap {
		operation = `IF check 12 failed:
		             check 13`
		data = "word."
	}
	check_abc_Initcap -> keepcase2 {
		operation = `is KEEPCASE
		             present`
		data = "word/flags"
	}
	check_abc_dot_Initcap -> keepcase2 {
		operation = `is KEEPCASE
		             present`
		data = "word/flags"
	}
	keepcase2 -> end_check3 {
		operation = `IF KEEPCASE present
		             AND CHECKSHARPS
		             AND word has not &szlig;
		             OR
		             IF KEEPCASE present
		             AND not set CHECKSHARPS:`
		data = "null"
	}

	keepcase2 -> end_check3 {
		operation = `IF KEEPCASE present
		             AND CHECKSHARPS
		             AND word has &szlig;
		             OR
		             IF KEEPCASE NOT present:`
		data = "word/flag"
	}
}
