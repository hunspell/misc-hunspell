<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="3060px" preserveAspectRatio="none" style="width:4716px;height:3060px;" version="1.1" viewBox="0 0 4716 3060" width="4716px" zoomAndPan="magnify"><defs><linearGradient id="go672sgmnlw0u0" x1="0%" x2="100%" y1="50%" y2="50%"><stop offset="0%" stop-color="#FFFFFF"/><stop offset="100%" stop-color="#FFFFFF"/></linearGradient><filter height="300%" id="fo672sgmnlw0u" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><rect fill="url(#go672sgmnlw0u0)" height="3060" style="stroke: none; stroke-width: 1.0;" width="4716" x="0" y="0"/><text fill="#000000" font-family="Roboto Condensed" font-size="18" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="59" x="2330.5" y="16.6992">Nuspell</text><!--cluster nuspell--><polygon fill="url(#go672sgmnlw0u0)" filter="url(#fo672sgmnlw0u)" points="14,37.0938,67,37.0938,74,59.5,4460,59.5,4460,3048.0938,14,3048.0938,14,37.0938" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="14" x2="74" y1="59.5" y2="59.5"/><text fill="#000000" font-family="Roboto Condensed" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="47" x="18" y="52.082">nuspell</text><!--cluster nuspell::String_Set--><polygon fill="url(#go672sgmnlw0u0)" filter="url(#fo672sgmnlw0u)" points="4468,391.5938,4599,391.5938,4606,414,4694,414,4694,487.5938,4468,487.5938,4468,391.5938" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="4468" x2="4606" y1="414" y2="414"/><text fill="#000000" font-family="Roboto Condensed" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="125" x="4472" y="406.582">nuspell::String_Set</text><!--class nuspell.Aff_Data--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="769.875" id="nuspell.Aff_Data" style="stroke: #000000; stroke-width: 1.5;" width="384" x="1164" y="64.0938"/><ellipse cx="1330.75" cy="80.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1333.7188,85.7344 Q1333.1406,86.0313 1332.5,86.1719 Q1331.8594,86.3281 1331.1563,86.3281 Q1328.6563,86.3281 1327.3281,84.6875 Q1326.0156,83.0313 1326.0156,79.9063 Q1326.0156,76.7813 1327.3281,75.125 Q1328.6563,73.4688 1331.1563,73.4688 Q1331.8594,73.4688 1332.5,73.625 Q1333.1563,73.7813 1333.7188,74.0781 L1333.7188,76.7969 Q1333.0938,76.2188 1332.5,75.9531 Q1331.9063,75.6719 1331.2813,75.6719 Q1329.9375,75.6719 1329.25,76.75 Q1328.5625,77.8125 1328.5625,79.9063 Q1328.5625,82 1329.25,83.0781 Q1329.9375,84.1406 1331.2813,84.1406 Q1331.9063,84.1406 1332.5,83.875 Q1333.0938,83.5938 1333.7188,83.0156 L1333.7188,85.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="42" x="1351.25" y="84.1953">Aff_Data</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1165" x2="1547" y1="96.0938" y2="96.0938"/><ellipse cx="1175" cy="108.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="1184" y="110.2988">structures : Aff_Structures&lt;char&gt;</text><ellipse cx="1175" cy="120.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="1184" y="123.1895">wide_structures : Aff_Structures&lt;wchar_t&gt;</text><ellipse cx="1175" cy="133.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="1184" y="136.0801">compound_rules : Compound_Rule_Table</text><ellipse cx="1175" cy="146.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="1184" y="148.9707">compound_syllable_num : Flag_Set</text><ellipse cx="1175" cy="159.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="1184" y="161.8613">flag_type : Flag_Type</text><ellipse cx="1175" cy="172.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="1184" y="174.752">words : Word_List</text><ellipse cx="1175" cy="185.3828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="1184" y="187.6426">checksharps : bool</text><ellipse cx="1175" cy="198.2734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="1184" y="200.5332">complex_prefixes : bool</text><ellipse cx="1175" cy="211.1641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="1184" y="213.4238">compound_check_case : bool</text><ellipse cx="1175" cy="224.0547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="1184" y="226.3145">compound_check_duplicate : bool</text><ellipse cx="1175" cy="236.9453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="1184" y="239.2051">compound_check_rep : bool</text><ellipse cx="1175" cy="249.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1184" y="252.0957">compound_check_triple : bool</text><ellipse cx="1175" cy="262.7266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="1184" y="264.9863">compound_more_suffixes : bool</text><ellipse cx="1175" cy="275.6172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="1184" y="277.877">compound_simplified_triple : bool</text><ellipse cx="1175" cy="288.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1184" y="290.7676">forbid_warn : bool</text><ellipse cx="1175" cy="301.3984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="1184" y="303.6582">fullstrip : bool</text><ellipse cx="1175" cy="314.2891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="1184" y="316.5488">no_split_suggestions : bool</text><ellipse cx="1175" cy="327.1797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="1184" y="329.4395">only_max_diff : bool</text><ellipse cx="1175" cy="340.0703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="1184" y="342.3301">suggest_with_dots : bool</text><ellipse cx="1175" cy="352.9609" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="1184" y="355.2207">circumfix_flag : char16_t</text><ellipse cx="1175" cy="365.8516" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="1184" y="368.1113">compound_begin_flag : char16_t</text><ellipse cx="1175" cy="378.7422" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="1184" y="381.002">compound_flag : char16_t</text><ellipse cx="1175" cy="391.6328" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="1184" y="393.8926">compound_forbid_flag : char16_t</text><ellipse cx="1175" cy="404.5234" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="1184" y="406.7832">compound_force_uppercase : char16_t</text><ellipse cx="1175" cy="417.4141" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1184" y="419.6738">compound_last_flag : char16_t</text><ellipse cx="1175" cy="430.3047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="1184" y="432.5645">compound_middle_flag : char16_t</text><ellipse cx="1175" cy="443.1953" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="1184" y="445.4551">compound_onlyin_flag : char16_t</text><ellipse cx="1175" cy="456.0859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="1184" y="458.3457">compound_permit_flag : char16_t</text><ellipse cx="1175" cy="468.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="1184" y="471.2363">compound_root_flag : char16_t</text><ellipse cx="1175" cy="481.8672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1184" y="484.127">forbiddenword_flag : char16_t</text><ellipse cx="1175" cy="494.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="1184" y="497.0176">keepcase_flag : char16_t</text><ellipse cx="1175" cy="507.6484" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="1184" y="509.9082">need_affix_flag : char16_t</text><ellipse cx="1175" cy="520.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="1184" y="522.7988">nosuggest_flag : char16_t</text><ellipse cx="1175" cy="533.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1184" y="535.6895">substandard_flag : char16_t</text><ellipse cx="1175" cy="546.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="1184" y="548.5801">warn_flag : char16_t</text><ellipse cx="1175" cy="559.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1184" y="561.4707">internal_locale : std::locale</text><ellipse cx="1175" cy="572.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="1184" y="574.3613">compound_syllable_vowels : string</text><ellipse cx="1175" cy="584.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1184" y="587.252">wordchars : string</text><ellipse cx="1175" cy="597.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="1184" y="600.1426">compound_max_word_count : unsigned short</text><ellipse cx="1175" cy="610.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1184" y="613.0332">compound_min_length : unsigned short</text><ellipse cx="1175" cy="623.6641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="1184" y="625.9238">compound_syllable_max : unsigned short</text><ellipse cx="1175" cy="636.5547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="1184" y="638.8145">max_compound_suggestions : unsigned short</text><ellipse cx="1175" cy="649.4453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1184" y="651.7051">max_diff_factor : unsigned short</text><ellipse cx="1175" cy="662.3359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1184" y="664.5957">max_ngram_suggestions : unsigned short</text><ellipse cx="1175" cy="675.2266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="1184" y="677.4863">istream : using</text><ellipse cx="1175" cy="688.1172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1184" y="690.377">pair : using</text><ellipse cx="1175" cy="701.0078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="1184" y="703.2676">string : using</text><ellipse cx="1175" cy="713.8984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="1184" y="716.1582">u16string : using</text><ellipse cx="1175" cy="726.7891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1184" y="729.0488">vector : using</text><ellipse cx="1175" cy="739.6797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="1184" y="741.9395">flag_aliases : vector&lt;Flag_Set&gt;</text><ellipse cx="1175" cy="752.5703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="1184" y="754.8301">phonetic_replacements : vector&lt;pair&lt;string, string&gt; &gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1165" x2="1547" y1="761.5156" y2="761.5156"/><ellipse cx="1175" cy="773.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="1184" y="775.7207">get_structures() : auto {query}</text><ellipse cx="1175" cy="786.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1184" y="788.6113">parse_aff(istream&amp; in) : auto</text><ellipse cx="1175" cy="799.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="1184" y="801.502">parse_aff_dic(std::istream&amp; aff, std::istream&amp; dic) : auto</text><ellipse cx="1175" cy="812.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="1184" y="814.3926">parse_dic(istream&amp; in) : auto</text><ellipse cx="1175" cy="825.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="1184" y="827.2832">set_encoding_and_language(const string&amp; enc, const string&amp; lang) : auto</text><!--class nuspell.Aff_Structures--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="189.7969" id="nuspell.Aff_Structures" style="stroke: #000000; stroke-width: 1.5;" width="330" x="487" y="1164.5938"/><ellipse cx="554.75" cy="1180.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M557.7188,1186.2344 Q557.1406,1186.5313 556.5,1186.6719 Q555.8594,1186.8281 555.1563,1186.8281 Q552.6563,1186.8281 551.3281,1185.1875 Q550.0156,1183.5313 550.0156,1180.4063 Q550.0156,1177.2813 551.3281,1175.625 Q552.6563,1173.9688 555.1563,1173.9688 Q555.8594,1173.9688 556.5,1174.125 Q557.1563,1174.2813 557.7188,1174.5781 L557.7188,1177.2969 Q557.0938,1176.7188 556.5,1176.4531 Q555.9063,1176.1719 555.2813,1176.1719 Q553.9375,1176.1719 553.25,1177.25 Q552.5625,1178.3125 552.5625,1180.4063 Q552.5625,1182.5 553.25,1183.5781 Q553.9375,1184.6406 555.2813,1184.6406 Q555.9063,1184.6406 556.5,1184.375 Q557.0938,1184.0938 557.7188,1183.5156 L557.7188,1186.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="73" x="575.25" y="1184.6953">Aff_Structures</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="709" y="1161.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="710" y="1173.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="488" x2="816" y1="1196.5938" y2="1196.5938"/><ellipse cx="498" cy="1208.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="507" y="1210.7988">break_table : Break_Table&lt;CharT&gt;</text><ellipse cx="498" cy="1221.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="507" y="1223.6895">prefixes : Prefix_Table&lt;CharT&gt;</text><ellipse cx="498" cy="1234.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="507" y="1236.5801">replacements : Replacement_Table&lt;CharT&gt;</text><ellipse cx="498" cy="1247.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="507" y="1249.4707">input_substr_replacer : Substr_Replacer&lt;CharT&gt;</text><ellipse cx="498" cy="1260.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="507" y="1262.3613">output_substr_replacer : Substr_Replacer&lt;CharT&gt;</text><ellipse cx="498" cy="1272.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="507" y="1275.252">suffixes : Suffix_Table&lt;CharT&gt;</text><ellipse cx="498" cy="1285.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="507" y="1288.1426">ignored_chars : std::basic_string&lt;CharT&gt;</text><ellipse cx="498" cy="1298.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="507" y="1301.0332">keyboard_closeness : std::basic_string&lt;CharT&gt;</text><ellipse cx="498" cy="1311.6641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="507" y="1313.9238">try_chars : std::basic_string&lt;CharT&gt;</text><ellipse cx="498" cy="1324.5547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="507" y="1326.8145">compound_patterns : std::vector&lt;Compound_Pattern&lt;CharT&gt; &gt;</text><ellipse cx="498" cy="1337.4453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="507" y="1339.7051">similarities : std::vector&lt;Similarity_Group&lt;CharT&gt; &gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="488" x2="816" y1="1346.3906" y2="1346.3906"/><!--class nuspell.Affix--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="164.0156" id="nuspell.Affix" style="stroke: #000000; stroke-width: 1.5;" width="209" x="2420.5" y="367.0938"/><ellipse cx="2509.25" cy="383.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2512.2188,388.7344 Q2511.6406,389.0313 2511,389.1719 Q2510.3594,389.3281 2509.6563,389.3281 Q2507.1563,389.3281 2505.8281,387.6875 Q2504.5156,386.0313 2504.5156,382.9063 Q2504.5156,379.7813 2505.8281,378.125 Q2507.1563,376.4688 2509.6563,376.4688 Q2510.3594,376.4688 2511,376.625 Q2511.6563,376.7813 2512.2188,377.0781 L2512.2188,379.7969 Q2511.5938,379.2188 2511,378.9531 Q2510.4063,378.6719 2509.7813,378.6719 Q2508.4375,378.6719 2507.75,379.75 Q2507.0625,380.8125 2507.0625,382.9063 Q2507.0625,385 2507.75,386.0781 Q2508.4375,387.1406 2509.7813,387.1406 Q2510.4063,387.1406 2511,386.875 Q2511.5938,386.5938 2512.2188,386.0156 L2512.2188,388.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="23" x="2529.75" y="387.1953">Affix</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2421.5" x2="2628.5" y1="399.0938" y2="399.0938"/><ellipse cx="2431.5" cy="411.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2440.5" y="413.2988">new_flags : Flag_Set</text><ellipse cx="2431.5" cy="423.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2440.5" y="426.1895">cross_product : bool</text><ellipse cx="2431.5" cy="436.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2440.5" y="439.0801">flag : char16_t</text><ellipse cx="2431.5" cy="449.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="2440.5" y="451.9707">appending : string</text><ellipse cx="2431.5" cy="462.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="2440.5" y="464.8613">condition : string</text><ellipse cx="2431.5" cy="475.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="2440.5" y="477.752">stripping : string</text><ellipse cx="2431.5" cy="488.3828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="2440.5" y="490.6426">string : using</text><ellipse cx="2431.5" cy="501.2734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2440.5" y="503.5332">vector : using</text><ellipse cx="2431.5" cy="514.1641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="2440.5" y="516.4238">morphological_fields : vector&lt;string&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2421.5" x2="2628.5" y1="523.1094" y2="523.1094"/><!--class nuspell.Affix_Table--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="138.2344" id="nuspell.Affix_Table" style="stroke: #000000; stroke-width: 1.5;" width="324" x="2665" y="380.0938"/><ellipse cx="2706.55" cy="396.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2709.5188,401.7344 Q2708.9406,402.0313 2708.3,402.1719 Q2707.6594,402.3281 2706.9563,402.3281 Q2704.4563,402.3281 2703.1281,400.6875 Q2701.8156,399.0313 2701.8156,395.9063 Q2701.8156,392.7813 2703.1281,391.125 Q2704.4563,389.4688 2706.9563,389.4688 Q2707.6594,389.4688 2708.3,389.625 Q2708.9563,389.7813 2709.5188,390.0781 L2709.5188,392.7969 Q2708.8938,392.2188 2708.3,391.9531 Q2707.7063,391.6719 2707.0813,391.6719 Q2705.7375,391.6719 2705.05,392.75 Q2704.3625,393.8125 2704.3625,395.9063 Q2704.3625,398 2705.05,399.0781 Q2705.7375,400.1406 2707.0813,400.1406 Q2707.7063,400.1406 2708.3,399.875 Q2708.8938,399.5938 2709.5188,399.0156 L2709.5188,401.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="2726.45" y="400.1953">Affix_Table</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="172" x="2820" y="377.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="170" x="2821" y="389.2266">template &lt;class CharT, class AffixT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2666" x2="2988" y1="412.0938" y2="412.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2673" y="421.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2685" y="426.2988">all_cont_flags : Flag_Set</text><ellipse cx="2676" cy="436.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="2685" y="439.1895">base : using</text><ellipse cx="2676" cy="449.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2685" y="452.0801">iterator : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2666" x2="2988" y1="458.7656" y2="458.7656"/><ellipse cx="2676" cy="470.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2685" y="472.9707">emplace(Args&amp;&amp; a) : auto</text><ellipse cx="2676" cy="483.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="2685" y="485.8613">equal_range(my_string_view&lt;CharT&gt; appending) : auto {query}</text><ellipse cx="2676" cy="496.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="2685" y="498.752">has_continuation_flag(char16_t flag) : auto {query}</text><ellipse cx="2676" cy="509.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="2685" y="511.6426">has_continuation_flags() : auto {query}</text><!--class nuspell.Affixing_Result--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="125.3438" id="nuspell.Affixing_Result" style="stroke: #000000; stroke-width: 1.5;" width="401" x="3024.5" y="386.5938"/><ellipse cx="3119.75" cy="402.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3122.7188,408.2344 Q3122.1406,408.5313 3121.5,408.6719 Q3120.8594,408.8281 3120.1563,408.8281 Q3117.6563,408.8281 3116.3281,407.1875 Q3115.0156,405.5313 3115.0156,402.4063 Q3115.0156,399.2813 3116.3281,397.625 Q3117.6563,395.9688 3120.1563,395.9688 Q3120.8594,395.9688 3121.5,396.125 Q3122.1563,396.2813 3122.7188,396.5781 L3122.7188,399.2969 Q3122.0938,398.7188 3121.5,398.4531 Q3120.9063,398.1719 3120.2813,398.1719 Q3118.9375,398.1719 3118.25,399.25 Q3117.5625,400.3125 3117.5625,402.4063 Q3117.5625,404.5 3118.25,405.5781 Q3118.9375,406.6406 3120.2813,406.6406 Q3120.9063,406.6406 3121.5,406.375 Q3122.0938,406.0938 3122.7188,405.5156 L3122.7188,408.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="3140.25" y="406.6953">Affixing_Result</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="124" x="3304.5" y="383.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="122" x="3305.5" y="395.7266">template &lt;class... Affixes&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3025.5" x2="3424.5" y1="418.5938" y2="418.5938"/><ellipse cx="3035.5" cy="430.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="3044.5" y="432.7988">base_type : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3025.5" x2="3424.5" y1="439.4844" y2="439.4844"/><ellipse cx="3035.5" cy="451.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="3044.5" y="453.6895">Affixing_Result()</text><ellipse cx="3035.5" cy="464.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="375" x="3044.5" y="466.5801">Affixing_Result(Word_List::const_reference word_entry, const Affixes&amp; affixes)</text><ellipse cx="3035.5" cy="477.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="3044.5" y="479.4707">const_pointer() {query}</text><ellipse cx="3035.5" cy="490.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="3044.5" y="492.3613">operator-&gt;() : auto {query}</text><ellipse cx="3035.5" cy="502.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="3044.5" y="505.252">operator*() : auto&amp; {query}</text><!--class nuspell.Basic_Dictionary--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="202.6875" id="nuspell.Basic_Dictionary" style="stroke: #000000; stroke-width: 1.5;" width="577" x="1387.5" y="2129.5938"/><ellipse cx="1629.25" cy="2145.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1632.2188,2151.2344 Q1631.6406,2151.5313 1631,2151.6719 Q1630.3594,2151.8281 1629.6563,2151.8281 Q1627.1563,2151.8281 1625.8281,2150.1875 Q1624.5156,2148.5313 1624.5156,2145.4063 Q1624.5156,2142.2813 1625.8281,2140.625 Q1627.1563,2138.9688 1629.6563,2138.9688 Q1630.3594,2138.9688 1631,2139.125 Q1631.6563,2139.2813 1632.2188,2139.5781 L1632.2188,2142.2969 Q1631.5938,2141.7188 1631,2141.4531 Q1630.4063,2141.1719 1629.7813,2141.1719 Q1628.4375,2141.1719 1627.75,2142.25 Q1627.0625,2143.3125 1627.0625,2145.4063 Q1627.0625,2147.5 1627.75,2148.5781 Q1628.4375,2149.6406 1629.7813,2149.6406 Q1630.4063,2149.6406 1631,2149.375 Q1631.5938,2149.0938 1632.2188,2148.5156 L1632.2188,2151.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="1649.75" y="2149.6953">Basic_Dictionary</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1388.5" x2="1963.5" y1="2161.5938" y2="2161.5938"/><polygon fill="none" points="1398.5,2168.5391,1402.5,2172.5391,1398.5,2176.5391,1394.5,2172.5391" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="1407.5" y="2175.7988">enc_details : Encoding_Details</text><polygon fill="none" points="1398.5,2181.4297,1402.5,2185.4297,1398.5,2189.4297,1394.5,2185.4297" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="1407.5" y="2188.6895">List_Strings_Back_Inserter : friend struct</text><polygon fill="none" points="1398.5,2194.3203,1402.5,2198.3203,1398.5,2202.3203,1394.5,2198.3203" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="1407.5" y="2201.5801">external_locale : std::locale</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1388.5" x2="1963.5" y1="2208.2656" y2="2208.2656"/><ellipse cx="1398.5" cy="2220.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1407.5" y="2222.4707">Basic_Dictionary()</text><polygon fill="#FFFF44" points="1398.5,2228.1016,1402.5,2232.1016,1398.5,2236.1016,1394.5,2232.1016" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="1407.5" y="2235.3613">Basic_Dictionary(std::istream&amp; aff, std::istream&amp; dic)</text><polygon fill="#FFFF44" points="1398.5,2240.9922,1402.5,2244.9922,1398.5,2248.9922,1394.5,2244.9922" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="551" x="1407.5" y="2248.252">external_to_internal_encoding(const std::string&amp; in, std::wstring&amp; wide_out, std::string&amp; narrow_out) : auto {query}</text><ellipse cx="1398.5" cy="2258.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="1407.5" y="2261.1426">imbue(const std::locale&amp; loc) : auto</text><polygon fill="#FFFF44" points="1398.5,2266.7734,1402.5,2270.7734,1398.5,2274.7734,1394.5,2270.7734" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="434" x="1407.5" y="2274.0332">internal_to_external_encoding(std::string&amp; in_out, std::wstring&amp; wide_in_out) : auto {query}</text><ellipse cx="1398.5" cy="2284.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="292" x="1407.5" y="2286.9238">load_from_aff_dic(std::istream&amp; aff, std::istream&amp; dic) : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1407.5" x2="1699.5" y1="2288.9238" y2="2288.9238"/><ellipse cx="1398.5" cy="2297.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="1407.5" y="2299.8145">load_from_aff_dic(const string&amp; file_path_without_extension) : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1407.5" x2="1730.5" y1="2301.8145" y2="2301.8145"/><ellipse cx="1398.5" cy="2310.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="1407.5" y="2312.7051">spell(const std::string&amp; word) : auto {query}</text><ellipse cx="1398.5" cy="2323.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="1407.5" y="2325.5957">suggest(const std::string&amp; word, List_Strings&lt;char&gt;&amp; out) : auto {query}</text><!--class nuspell.Break_Table--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="267.1406" id="nuspell.Break_Table" style="stroke: #000000; stroke-width: 1.5;" width="220" x="22" y="2097.5938"/><ellipse cx="41.05" cy="2113.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M44.0188,2119.2344 Q43.4406,2119.5313 42.8,2119.6719 Q42.1594,2119.8281 41.4563,2119.8281 Q38.9563,2119.8281 37.6281,2118.1875 Q36.3156,2116.5313 36.3156,2113.4063 Q36.3156,2110.2813 37.6281,2108.625 Q38.9563,2106.9688 41.4563,2106.9688 Q42.1594,2106.9688 42.8,2107.125 Q43.4563,2107.2813 44.0188,2107.5781 L44.0188,2110.2969 Q43.3938,2109.7188 42.8,2109.4531 Q42.2063,2109.1719 41.5813,2109.1719 Q40.2375,2109.1719 39.55,2110.25 Q38.8625,2111.3125 38.8625,2113.4063 Q38.8625,2115.5 39.55,2116.5781 Q40.2375,2117.6406 41.5813,2117.6406 Q42.2063,2117.6406 42.8,2117.375 Q43.3938,2117.0938 44.0188,2116.5156 L44.0188,2119.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="55.95" y="2117.6953">Break_Table</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="134" y="2094.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="135" y="2106.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="23" x2="241" y1="2129.5938" y2="2129.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2138.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="42" y="2143.7988">table : Table_Str</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2151.4297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="42" y="2156.6895">end_word_breaks_last_idx : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2164.3203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="42" y="2169.5801">start_word_breaks_last_idx : size_t</text><ellipse cx="33" cy="2180.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="42" y="2182.4707">StrT : using</text><ellipse cx="33" cy="2193.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="42" y="2195.3613">Table_Str : using</text><ellipse cx="33" cy="2205.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="42" y="2208.252">const_iterator : using</text><ellipse cx="33" cy="2218.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="42" y="2221.1426">iterator : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="23" x2="241" y1="2227.8281" y2="2227.8281"/><ellipse cx="33" cy="2239.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="42" y="2242.0332">Break_Table()</text><ellipse cx="33" cy="2252.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="42" y="2254.9238">Break_Table(const Table_Str&amp; v)</text><ellipse cx="33" cy="2265.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="42" y="2267.8145">Break_Table(Table_Str&amp;&amp; v)</text><ellipse cx="33" cy="2278.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="42" y="2280.7051">end_word_breaks() : auto {query}</text><ellipse cx="33" cy="2291.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="42" y="2293.5957">middle_word_breaks() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2301.2266"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="42" y="2306.4863">order_entries() : auto</text><ellipse cx="33" cy="2317.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="42" y="2319.377">start_word_breaks() : auto {query}</text><ellipse cx="33" cy="2330.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="42" y="2332.2676">operator=(const Table_Str&amp; v) : auto&amp;</text><ellipse cx="33" cy="2342.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="42" y="2345.1582">operator=(Table_Str&amp;&amp; v) : auto&amp;</text><ellipse cx="33" cy="2355.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="42" y="2358.0488">operator=(const Range&amp; range) : auto&amp;</text><!--class nuspell.Casing--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="48" id="nuspell.Casing" style="stroke: #000000; stroke-width: 1.5;" width="67" x="3460.5" y="425.0938"/><ellipse cx="3475.5" cy="441.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3478.4688,446.7344 Q3477.8906,447.0313 3477.25,447.1719 Q3476.6094,447.3281 3475.9063,447.3281 Q3473.4063,447.3281 3472.0781,445.6875 Q3470.7656,444.0313 3470.7656,440.9063 Q3470.7656,437.7813 3472.0781,436.125 Q3473.4063,434.4688 3475.9063,434.4688 Q3476.6094,434.4688 3477.25,434.625 Q3477.9063,434.7813 3478.4688,435.0781 L3478.4688,437.7969 Q3477.8438,437.2188 3477.25,436.9531 Q3476.6563,436.6719 3476.0313,436.6719 Q3474.6875,436.6719 3474,437.75 Q3473.3125,438.8125 3473.3125,440.9063 Q3473.3125,443 3474,444.0781 Q3474.6875,445.1406 3476.0313,445.1406 Q3476.6563,445.1406 3477.25,444.875 Q3477.8438,444.5938 3478.4688,444.0156 L3478.4688,446.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="35" x="3489.5" y="445.1953">Casing</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3461.5" x2="3526.5" y1="457.0938" y2="457.0938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="3461.5" x2="3526.5" y1="465.0938" y2="465.0938"/><!--class nuspell.Compound_Check_Pattern--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="125.3438" id="nuspell.Compound_Check_Pattern" style="stroke: #000000; stroke-width: 1.5;" width="167" x="3562.5" y="386.5938"/><ellipse cx="3577.5" cy="402.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3580.4688,408.2344 Q3579.8906,408.5313 3579.25,408.6719 Q3578.6094,408.8281 3577.9063,408.8281 Q3575.4063,408.8281 3574.0781,407.1875 Q3572.7656,405.5313 3572.7656,402.4063 Q3572.7656,399.2813 3574.0781,397.625 Q3575.4063,395.9688 3577.9063,395.9688 Q3578.6094,395.9688 3579.25,396.125 Q3579.9063,396.2813 3580.4688,396.5781 L3580.4688,399.2969 Q3579.8438,398.7188 3579.25,398.4531 Q3578.6563,398.1719 3578.0313,398.1719 Q3576.6875,398.1719 3576,399.25 Q3575.3125,400.3125 3575.3125,402.4063 Q3575.3125,404.5 3576,405.5781 Q3576.6875,406.6406 3578.0313,406.6406 Q3578.6563,406.6406 3579.25,406.375 Q3579.8438,406.0938 3580.4688,405.5156 L3580.4688,408.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="135" x="3591.5" y="406.6953">Compound_Check_Pattern</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3563.5" x2="3728.5" y1="418.5938" y2="418.5938"/><ellipse cx="3573.5" cy="430.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="3582.5" y="432.7988">first_word_flag : char16_t</text><ellipse cx="3573.5" cy="443.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="3582.5" y="445.6895">second_word_flag : char16_t</text><ellipse cx="3573.5" cy="456.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3582.5" y="458.5801">first_word_end : string</text><ellipse cx="3573.5" cy="469.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="3582.5" y="471.4707">replacement : string</text><ellipse cx="3573.5" cy="482.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="3582.5" y="484.3613">second_word_begin : string</text><ellipse cx="3573.5" cy="494.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="3582.5" y="497.252">string : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3563.5" x2="3728.5" y1="503.9375" y2="503.9375"/><!--class nuspell.Compound_Pattern--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="125.3438" id="nuspell.Compound_Pattern" style="stroke: #000000; stroke-width: 1.5;" width="262" x="277" y="2168.5938"/><ellipse cx="301" cy="2184.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M303.9688,2190.2344 Q303.3906,2190.5313 302.75,2190.6719 Q302.1094,2190.8281 301.4063,2190.8281 Q298.9063,2190.8281 297.5781,2189.1875 Q296.2656,2187.5313 296.2656,2184.4063 Q296.2656,2181.2813 297.5781,2179.625 Q298.9063,2177.9688 301.4063,2177.9688 Q302.1094,2177.9688 302.75,2178.125 Q303.4063,2178.2813 303.9688,2178.5781 L303.9688,2181.2969 Q303.3438,2180.7188 302.75,2180.4531 Q302.1563,2180.1719 301.5313,2180.1719 Q300.1875,2180.1719 299.5,2181.25 Q298.8125,2182.3125 298.8125,2184.4063 Q298.8125,2186.5 299.5,2187.5781 Q300.1875,2188.6406 301.5313,2188.6406 Q302.1563,2188.6406 302.75,2188.375 Q303.3438,2188.0938 303.9688,2187.5156 L303.9688,2190.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="97" x="317" y="2188.6953">Compound_Pattern</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="431" y="2165.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="432" y="2177.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="278" x2="538" y1="2200.5938" y2="2200.5938"/><ellipse cx="288" cy="2212.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="297" y="2214.7988">replacement : StrT</text><ellipse cx="288" cy="2225.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="297" y="2227.6895">begin_end_chars : String_Pair&lt;CharT&gt;</text><ellipse cx="288" cy="2238.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="297" y="2240.5801">match_first_only_unaffixed_or_zero_affixed : bool</text><ellipse cx="288" cy="2251.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="297" y="2253.4707">first_word_flag : char16_t</text><ellipse cx="288" cy="2264.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="297" y="2266.3613">second_word_flag : char16_t</text><ellipse cx="288" cy="2276.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="297" y="2279.252">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="278" x2="538" y1="2285.9375" y2="2285.9375"/><!--class nuspell.Compound_Rule_Table--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="189.7969" id="nuspell.Compound_Rule_Table" style="stroke: #000000; stroke-width: 1.5;" width="369" x="852.5" y="1164.5938"/><ellipse cx="972.75" cy="1180.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M975.7188,1186.2344 Q975.1406,1186.5313 974.5,1186.6719 Q973.8594,1186.8281 973.1563,1186.8281 Q970.6563,1186.8281 969.3281,1185.1875 Q968.0156,1183.5313 968.0156,1180.4063 Q968.0156,1177.2813 969.3281,1175.625 Q970.6563,1173.9688 973.1563,1173.9688 Q973.8594,1173.9688 974.5,1174.125 Q975.1563,1174.2813 975.7188,1174.5781 L975.7188,1177.2969 Q975.0938,1176.7188 974.5,1176.4531 Q973.9063,1176.1719 973.2813,1176.1719 Q971.9375,1176.1719 971.25,1177.25 Q970.5625,1178.3125 970.5625,1180.4063 Q970.5625,1182.5 971.25,1183.5781 Q971.9375,1184.6406 973.2813,1184.6406 Q973.9063,1184.6406 974.5,1184.375 Q975.0938,1184.0938 975.7188,1183.5156 L975.7188,1186.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="120" x="993.25" y="1184.6953">Compound_Rule_Table</text><line style="stroke: #000000; stroke-width: 1.5;" x1="853.5" x2="1220.5" y1="1196.5938" y2="1196.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="860.5" y="1205.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="872.5" y="1210.7988">all_flags : Flag_Set</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="860.5" y="1218.4297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="872.5" y="1223.6895">rules : std::vector&lt;std::u16string&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="853.5" x2="1220.5" y1="1230.375" y2="1230.375"/><ellipse cx="863.5" cy="1242.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="872.5" y="1244.5801">Compound_Rule_Table()</text><ellipse cx="863.5" cy="1255.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="872.5" y="1257.4707">Compound_Rule_Table(const std::vector&lt;std::u16string&gt;&amp; tbl)</text><ellipse cx="863.5" cy="1268.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="872.5" y="1270.3613">Compound_Rule_Table(std::vector&lt;std::u16string&gt;&amp;&amp; tbl)</text><ellipse cx="863.5" cy="1280.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="872.5" y="1283.252">empty() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="860.5" y="1290.8828"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="872.5" y="1296.1426">fill_all_flags() : auto</text><ellipse cx="863.5" cy="1306.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="872.5" y="1309.0332">has_any_of_flags(const Flag_Set&amp; f) : auto {query}</text><ellipse cx="863.5" cy="1319.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="872.5" y="1321.9238">match_any_rule(const std::vector&lt;const Flag_Set*&gt; data) : auto {query}</text><ellipse cx="863.5" cy="1332.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="872.5" y="1334.8145">operator=(const std::vector&lt;std::u16string&gt;&amp; tbl) : auto</text><ellipse cx="863.5" cy="1345.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="872.5" y="1347.7051">operator=(std::vector&lt;std::u16string&gt;&amp;&amp; tbl) : auto</text><!--class nuspell.Compounding_Result--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="86.6719" id="nuspell.Compounding_Result" style="stroke: #000000; stroke-width: 1.5;" width="156" x="2447" y="1216.0938"/><ellipse cx="2468.75" cy="1232.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2471.7188,1237.7344 Q2471.1406,1238.0313 2470.5,1238.1719 Q2469.8594,1238.3281 2469.1563,1238.3281 Q2466.6563,1238.3281 2465.3281,1236.6875 Q2464.0156,1235.0313 2464.0156,1231.9063 Q2464.0156,1228.7813 2465.3281,1227.125 Q2466.6563,1225.4688 2469.1563,1225.4688 Q2469.8594,1225.4688 2470.5,1225.625 Q2471.1563,1225.7813 2471.7188,1226.0781 L2471.7188,1228.7969 Q2471.0938,1228.2188 2470.5,1227.9531 Q2469.9063,1227.6719 2469.2813,1227.6719 Q2467.9375,1227.6719 2467.25,1228.75 Q2466.5625,1229.8125 2466.5625,1231.9063 Q2466.5625,1234 2467.25,1235.0781 Q2467.9375,1236.1406 2469.2813,1236.1406 Q2469.9063,1236.1406 2470.5,1235.875 Q2471.0938,1235.5938 2471.7188,1235.0156 L2471.7188,1237.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="109" x="2484.25" y="1236.1953">Compounding_Result</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2448" x2="2602" y1="1248.0938" y2="1248.0938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="2448" x2="2602" y1="1256.0938" y2="1256.0938"/><ellipse cx="2458" cy="1268.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="2467" y="1270.2988">const_pointer() {query}</text><ellipse cx="2458" cy="1280.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="2467" y="1283.1895">operator-&gt;() : auto {query}</text><ellipse cx="2458" cy="1293.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="2467" y="1296.0801">operator*() : auto&amp; {query}</text><!--class nuspell.Condition--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="215.5781" id="nuspell.Condition" style="stroke: #000000; stroke-width: 1.5;" width="305" x="2638.5" y="1151.5938"/><ellipse cx="2705.75" cy="1167.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2708.7188,1173.2344 Q2708.1406,1173.5313 2707.5,1173.6719 Q2706.8594,1173.8281 2706.1563,1173.8281 Q2703.6563,1173.8281 2702.3281,1172.1875 Q2701.0156,1170.5313 2701.0156,1167.4063 Q2701.0156,1164.2813 2702.3281,1162.625 Q2703.6563,1160.9688 2706.1563,1160.9688 Q2706.8594,1160.9688 2707.5,1161.125 Q2708.1563,1161.2813 2708.7188,1161.5781 L2708.7188,1164.2969 Q2708.0938,1163.7188 2707.5,1163.4531 Q2706.9063,1163.1719 2706.2813,1163.1719 Q2704.9375,1163.1719 2704.25,1164.25 Q2703.5625,1165.3125 2703.5625,1167.4063 Q2703.5625,1169.5 2704.25,1170.5781 Q2704.9375,1171.6406 2706.2813,1171.6406 Q2706.9063,1171.6406 2707.5,1171.375 Q2708.0938,1171.0938 2708.7188,1170.5156 L2708.7188,1173.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="49" x="2726.25" y="1171.6953">Condition</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="2835.5" y="1148.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="2836.5" y="1160.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2639.5" x2="2942.5" y1="1183.5938" y2="1183.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2646.5" y="1192.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53" x="2658.5" y="1197.7988">cond : StrT</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2646.5" y="1205.4297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2658.5" y="1210.6895">length : size_t</text><ellipse cx="2649.5" cy="1221.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="2658.5" y="1223.5801">StrT : using</text><ellipse cx="2649.5" cy="1234.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="2658.5" y="1236.4707">tuple : using</text><ellipse cx="2649.5" cy="1247.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2658.5" y="1249.3613">vector : using</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2646.5" y="1256.9922"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="2658.5" y="1262.252">spans : vector&lt;tuple&lt;size_t, size_t, Span_Type&gt; &gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2639.5" x2="2942.5" y1="1268.9375" y2="1268.9375"/><ellipse cx="2649.5" cy="1280.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="2658.5" y="1283.1426">Condition()</text><ellipse cx="2649.5" cy="1293.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="2658.5" y="1296.0332">Condition(const StrT&amp; condition)</text><ellipse cx="2649.5" cy="1306.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2658.5" y="1308.9238">Condition(StrT&amp;&amp; condition)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2646.5" y="1316.5547"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2658.5" y="1321.8145">construct() : auto</text><ellipse cx="2649.5" cy="1332.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="2658.5" y="1334.7051">match(const StrT&amp; s, size_t pos, size_t len) : auto {query}</text><ellipse cx="2649.5" cy="1345.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="2658.5" y="1347.5957">match_prefix(const StrT&amp; s) : auto {query}</text><ellipse cx="2649.5" cy="1358.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="2658.5" y="1360.4863">match_suffix(const StrT&amp; s) : auto {query}</text><!--class nuspell.Dict_Base--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="731.2031" id="nuspell.Dict_Base" style="stroke: #000000; stroke-width: 1.5;" width="838" x="1257" y="894.0938"/><ellipse cx="1646.25" cy="910.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1649.2188,915.7344 Q1648.6406,916.0313 1648,916.1719 Q1647.3594,916.3281 1646.6563,916.3281 Q1644.1563,916.3281 1642.8281,914.6875 Q1641.5156,913.0313 1641.5156,909.9063 Q1641.5156,906.7813 1642.8281,905.125 Q1644.1563,903.4688 1646.6563,903.4688 Q1647.3594,903.4688 1648,903.625 Q1648.6563,903.7813 1649.2188,904.0781 L1649.2188,906.7969 Q1648.5938,906.2188 1648,905.9531 Q1647.4063,905.6719 1646.7813,905.6719 Q1645.4375,905.6719 1644.75,906.75 Q1644.0625,907.8125 1644.0625,909.9063 Q1644.0625,912 1644.75,913.0781 Q1645.4375,914.1406 1646.7813,914.1406 Q1647.4063,914.1406 1648,913.875 Q1648.5938,913.5938 1649.2188,913.0156 L1649.2188,915.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="51" x="1666.75" y="914.1953">Dict_Base</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1258" x2="2094" y1="926.0938" y2="926.0938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1258" x2="2094" y1="934.0938" y2="934.0938"/><ellipse cx="1268" cy="946.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1277" y="948.2988">Dict_Base()</text><ellipse cx="1268" cy="958.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="1277" y="961.1895">add_sug_if_correct(std::basic_string&lt;CharT&gt;&amp; word, OutIter&amp; out) : auto {query}</text><ellipse cx="1268" cy="971.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="1277" y="974.0801">affix_NOT_valid(const Prefix&lt;CharT&gt;&amp; a) : auto {query}</text><ellipse cx="1268" cy="984.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="1277" y="986.9707">affix_NOT_valid(const Suffix&lt;CharT&gt;&amp; a) : auto {query}</text><ellipse cx="1268" cy="997.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="1277" y="999.8613">bad_char_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1268" cy="1010.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="1277" y="1012.752">check_compound(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1268" cy="1023.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="631" x="1277" y="1025.6426">check_compound(std::basic_string&lt;CharT&gt;&amp; word, size_t start_pos, size_t num_part, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1268" cy="1036.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="711" x="1277" y="1038.5332">check_compound_classic(std::basic_string&lt;CharT&gt;&amp; word, size_t start_pos, size_t i, size_t num_part, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1268" cy="1049.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="803" x="1277" y="1051.4238">check_compound_with_pattern_replacements(std::basic_string&lt;CharT&gt;&amp; word, size_t start_pos, size_t i, size_t num_part, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1268" cy="1062.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="812" x="1277" y="1064.3145">check_compound_with_rules(std::basic_string&lt;CharT&gt;&amp; word, std::vector&lt;const Flag_Set*&gt;&amp; words_data, size_t start_pos, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1268" cy="1074.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="1277" y="1077.2051">check_word(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1087.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="1277" y="1090.0957">check_word_in_compound(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1100.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="378" x="1277" y="1102.9863">extra_char_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1268" cy="1113.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="399" x="1277" y="1115.877">forgotten_char_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1268" cy="1126.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="1277" y="1128.7676">is_circumfix(const AffixT&amp; a) : auto {query}</text><ellipse cx="1268" cy="1139.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="1277" y="1141.6582">is_valid_inside_compound(const Flag_Set&amp; flags) : auto {query}</text><ellipse cx="1268" cy="1152.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="373" x="1277" y="1154.5488">keyboard_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1268" cy="1165.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="1277" y="1167.4395">map_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out, size_t i) : auto {query}</text><ellipse cx="1268" cy="1178.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="1277" y="1180.3301">outer_affix_NOT_valid(const AffixT&amp; a) : auto {query}</text><ellipse cx="1268" cy="1190.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="344" x="1277" y="1193.2207">rep_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1268" cy="1203.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="329" x="1277" y="1206.1113">spell_break(std::basic_string&lt;CharT&gt;&amp; s, size_t depth) : auto {query}</text><ellipse cx="1268" cy="1216.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="1277" y="1219.002">spell_casing(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1229.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="1277" y="1231.8926">spell_casing_title(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1242.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="1277" y="1244.7832">spell_casing_upper(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1255.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="1277" y="1257.6738">spell_priv(const std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1268.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="1277" y="1270.5645">spell_priv(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1281.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="1277" y="1283.4551">spell_sharps(std::basic_string&lt;CharT&gt;&amp; base, size_t n_pos, size_t n, size_t rep) : auto {query}</text><ellipse cx="1268" cy="1294.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="570" x="1277" y="1296.3457">strip_2_pfx_sfx_3(const Prefix&lt;CharT&gt;&amp; pe1, const Prefix&lt;CharT&gt;&amp; pe2, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1268" cy="1306.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="1277" y="1309.2363">strip_2_prefixes_then_suffix(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1268" cy="1319.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="568" x="1277" y="1322.127">strip_2_sfx_pfx_3(const Suffix&lt;CharT&gt;&amp; se1, const Suffix&lt;CharT&gt;&amp; se2, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1268" cy="1332.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="1277" y="1335.0176">strip_2_suffixes_then_prefix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1345.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="553" x="1277" y="1347.9082">strip_p_s_p_3(const Prefix&lt;CharT&gt;&amp; pe1, const Suffix&lt;CharT&gt;&amp; se1, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1268" cy="1358.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="551" x="1277" y="1360.7988">strip_pfx_2_sfx_3(const Prefix&lt;CharT&gt;&amp; pe1, const Suffix&lt;CharT&gt;&amp; se1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1371.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="435" x="1277" y="1373.6895">strip_pfx_then_pfx_2(const Prefix&lt;CharT&gt;&amp; pe1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1384.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="429" x="1277" y="1386.5801">strip_pfx_then_sfx_2(const Prefix&lt;CharT&gt;&amp; pe, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1397.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="1277" y="1399.4707">strip_pfx_then_sfx_comm_2(const Prefix&lt;CharT&gt;&amp; pe, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1268" cy="1410.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="1277" y="1412.3613">strip_prefix_only(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1422.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="1277" y="1425.252">strip_prefix_suffix_prefix(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1268" cy="1435.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="1277" y="1438.1426">strip_prefix_then_2_suffixes(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1448.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="1277" y="1451.0332">strip_prefix_then_prefix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1461.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="1277" y="1463.9238">strip_prefix_then_suffix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1474.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="403" x="1277" y="1476.8145">strip_prefix_then_suffix_commutative(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1268" cy="1487.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="553" x="1277" y="1489.7051">strip_s_p_s_3(const Suffix&lt;CharT&gt;&amp; se1, const Prefix&lt;CharT&gt;&amp; pe1, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1268" cy="1500.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="551" x="1277" y="1502.5957">strip_sfx_2_pfx_3(const Suffix&lt;CharT&gt;&amp; se1, const Prefix&lt;CharT&gt;&amp; pe1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1513.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="428" x="1277" y="1515.4863">strip_sfx_then_pfx_2(const Suffix&lt;CharT&gt;&amp; se, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1526.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="434" x="1277" y="1528.377">strip_sfx_then_sfx_2(const Suffix&lt;CharT&gt;&amp; se1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1539.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="1277" y="1541.2676">strip_suffix_only(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1551.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="1277" y="1554.1582">strip_suffix_prefix_suffix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1564.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="1277" y="1567.0488">strip_suffix_then_2_prefixes(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1577.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="1277" y="1579.9395">strip_suffix_then_prefix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1590.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="1277" y="1592.8301">strip_suffix_then_suffix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1268" cy="1603.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="346" x="1277" y="1605.7207">suggest_priv(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1268" cy="1616.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="376" x="1277" y="1618.6113">try_rep_suggestion(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><!--class nuspell.Encoding--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="241.3594" id="nuspell.Encoding" style="stroke: #000000; stroke-width: 1.5;" width="216" x="2979" y="1139.0938"/><ellipse cx="3058.25" cy="1155.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3061.2188,1160.7344 Q3060.6406,1161.0313 3060,1161.1719 Q3059.3594,1161.3281 3058.6563,1161.3281 Q3056.1563,1161.3281 3054.8281,1159.6875 Q3053.5156,1158.0313 3053.5156,1154.9063 Q3053.5156,1151.7813 3054.8281,1150.125 Q3056.1563,1148.4688 3058.6563,1148.4688 Q3059.3594,1148.4688 3060,1148.625 Q3060.6563,1148.7813 3061.2188,1149.0781 L3061.2188,1151.7969 Q3060.5938,1151.2188 3060,1150.9531 Q3059.4063,1150.6719 3058.7813,1150.6719 Q3057.4375,1150.6719 3056.75,1151.75 Q3056.0625,1152.8125 3056.0625,1154.9063 Q3056.0625,1157 3056.75,1158.0781 Q3057.4375,1159.1406 3058.7813,1159.1406 Q3059.4063,1159.1406 3060,1158.875 Q3060.5938,1158.5938 3061.2188,1158.0156 L3061.2188,1160.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="49" x="3078.75" y="1159.1953">Encoding</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2980" x2="3194" y1="1171.0938" y2="1171.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2987" y="1180.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="2999" y="1185.2988">name : std::string</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2980" x2="3194" y1="1191.9844" y2="1191.9844"/><ellipse cx="2990" cy="1203.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="54" x="2999" y="1206.1895">Encoding()</text><ellipse cx="2990" cy="1216.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2999" y="1219.0801">Encoding(const std::string&amp; e)</text><ellipse cx="2990" cy="1229.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2999" y="1231.9707">Encoding(std::string&amp;&amp; e)</text><ellipse cx="2990" cy="1242.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="2999" y="1244.8613">Encoding(const char* e)</text><ellipse cx="2990" cy="1255.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="2999" y="1257.752">operatorEnc_Type() {query}</text><ellipse cx="2990" cy="1268.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="2999" y="1270.6426">string&amp;() {query}</text><ellipse cx="2990" cy="1281.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2999" y="1283.5332">empty() : auto {query}</text><ellipse cx="2990" cy="1294.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2999" y="1296.4238">is_utf8() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2987" y="1304.0547"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="2999" y="1309.3145">normalize_name() : auto</text><ellipse cx="2990" cy="1319.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="2999" y="1322.2051">value_or_default() : auto</text><ellipse cx="2990" cy="1332.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="2999" y="1335.0957">operator=(const std::string&amp; e) : auto&amp;</text><ellipse cx="2990" cy="1345.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="2999" y="1347.9863">operator=(std::string&amp;&amp; e) : auto&amp;</text><ellipse cx="2990" cy="1358.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="2999" y="1360.877">operator=(const char* e) : auto&amp;</text><ellipse cx="2990" cy="1371.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="2999" y="1373.7676">value() : auto&amp; {query}</text><!--class nuspell.Encoding_Details--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="48" id="nuspell.Encoding_Details" style="stroke: #000000; stroke-width: 1.5;" width="121" x="1615.5" y="2914.5938"/><ellipse cx="1630.5" cy="2930.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1633.4688,2936.2344 Q1632.8906,2936.5313 1632.25,2936.6719 Q1631.6094,2936.8281 1630.9063,2936.8281 Q1628.4063,2936.8281 1627.0781,2935.1875 Q1625.7656,2933.5313 1625.7656,2930.4063 Q1625.7656,2927.2813 1627.0781,2925.625 Q1628.4063,2923.9688 1630.9063,2923.9688 Q1631.6094,2923.9688 1632.25,2924.125 Q1632.9063,2924.2813 1633.4688,2924.5781 L1633.4688,2927.2969 Q1632.8438,2926.7188 1632.25,2926.4531 Q1631.6563,2926.1719 1631.0313,2926.1719 Q1629.6875,2926.1719 1629,2927.25 Q1628.3125,2928.3125 1628.3125,2930.4063 Q1628.3125,2932.5 1629,2933.5781 Q1629.6875,2934.6406 1631.0313,2934.6406 Q1631.6563,2934.6406 1632.25,2934.375 Q1632.8438,2934.0938 1633.4688,2933.5156 L1633.4688,2936.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="89" x="1644.5" y="2934.6953">Encoding_Details</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1616.5" x2="1735.5" y1="2946.5938" y2="2946.5938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1616.5" x2="1735.5" y1="2954.5938" y2="2954.5938"/><!--class nuspell.Finder--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="267.1406" id="nuspell.Finder" style="stroke: #000000; stroke-width: 1.5;" width="277" x="3230.5" y="1126.0938"/><ellipse cx="3348.25" cy="1142.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3351.2188,1147.7344 Q3350.6406,1148.0313 3350,1148.1719 Q3349.3594,1148.3281 3348.6563,1148.3281 Q3346.1563,1148.3281 3344.8281,1146.6875 Q3343.5156,1145.0313 3343.5156,1141.9063 Q3343.5156,1138.7813 3344.8281,1137.125 Q3346.1563,1135.4688 3348.6563,1135.4688 Q3349.3594,1135.4688 3350,1135.625 Q3350.6563,1135.7813 3351.2188,1136.0781 L3351.2188,1138.7969 Q3350.5938,1138.2188 3350,1137.9531 Q3349.4063,1137.6719 3348.7813,1137.6719 Q3347.4375,1137.6719 3346.75,1138.75 Q3346.0625,1139.8125 3346.0625,1141.9063 Q3346.0625,1144 3346.75,1145.0781 Q3347.4375,1146.1406 3348.7813,1146.1406 Q3349.4063,1146.1406 3350,1145.875 Q3350.5938,1145.5938 3351.2188,1145.0156 L3351.2188,1147.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="33" x="3368.75" y="1146.1953">Finder</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3231.5" x2="3506.5" y1="1158.0938" y2="1158.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3238.5" y="1167.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="3250.5" y="1172.2988">dictionaries : Dict_List</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3238.5" y="1179.9297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3250.5" y="1185.1895">paths : std::vector&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3238.5" y="1192.8203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3250.5" y="1198.0801">Dict_List : using</text><ellipse cx="3241.5" cy="1208.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3250.5" y="1210.9707">const_iterator : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3231.5" x2="3506.5" y1="1217.6563" y2="1217.6563"/><ellipse cx="3241.5" cy="1229.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="3250.5" y="1231.8613">add_apacheopenoffice_paths() : auto</text><ellipse cx="3241.5" cy="1242.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="3250.5" y="1244.752">add_default_paths() : auto</text><ellipse cx="3241.5" cy="1255.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="3250.5" y="1257.6426">add_libreoffice_paths() : auto</text><ellipse cx="3241.5" cy="1268.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="3250.5" y="1270.5332">add_mozilla_paths() : auto</text><ellipse cx="3241.5" cy="1281.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="3250.5" y="1283.4238">begin() : auto {query}</text><ellipse cx="3241.5" cy="1294.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="3250.5" y="1296.3145">end() : auto {query}</text><ellipse cx="3241.5" cy="1306.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="3250.5" y="1309.2051">equal_range(const std::string&amp; dict) : auto {query}</text><ellipse cx="3241.5" cy="1319.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="3250.5" y="1322.0957">find(const std::string&amp; dict) : auto {query}</text><ellipse cx="3241.5" cy="1332.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="3250.5" y="1334.9863">get_dictionary(const std::string&amp; dict) : auto {query}</text><ellipse cx="3241.5" cy="1345.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="3250.5" y="1347.877">search_dictionaries() : auto</text><ellipse cx="3241.5" cy="1358.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="196" x="3250.5" y="1360.7676">search_dictionaries_in_all_paths() : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="3250.5" x2="3446.5" y1="1362.7676" y2="1362.7676"/><ellipse cx="3241.5" cy="1371.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="3250.5" y="1373.6582">get_all_dictionaries() : auto&amp; {query}</text><ellipse cx="3241.5" cy="1384.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="3250.5" y="1386.5488">get_all_paths() : auto&amp; {query}</text><!--class nuspell.Hash_Multiset--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="370.2656" id="nuspell.Hash_Multiset" style="stroke: #000000; stroke-width: 1.5;" width="737" x="3542.5" y="1074.5938"/><ellipse cx="3557.5" cy="1090.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3560.4688,1096.2344 Q3559.8906,1096.5313 3559.25,1096.6719 Q3558.6094,1096.8281 3557.9063,1096.8281 Q3555.4063,1096.8281 3554.0781,1095.1875 Q3552.7656,1093.5313 3552.7656,1090.4063 Q3552.7656,1087.2813 3554.0781,1085.625 Q3555.4063,1083.9688 3557.9063,1083.9688 Q3558.6094,1083.9688 3559.25,1084.125 Q3559.9063,1084.2813 3560.4688,1084.5781 L3560.4688,1087.2969 Q3559.8438,1086.7188 3559.25,1086.4531 Q3558.6563,1086.1719 3558.0313,1086.1719 Q3556.6875,1086.1719 3556,1087.25 Q3555.3125,1088.3125 3555.3125,1090.4063 Q3555.3125,1092.5 3556,1093.5781 Q3556.6875,1094.6406 3558.0313,1094.6406 Q3558.6563,1094.6406 3559.25,1094.375 Q3559.8438,1094.0938 3560.4688,1093.5156 L3560.4688,1096.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="71" x="3571.5" y="1094.6953">Hash_Multiset</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="632" x="3650.5" y="1071.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="630" x="3651.5" y="1083.7266">template &lt;class Value, class Key = Value, class KeyExtract = identity, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3543.5" x2="4278.5" y1="1106.5938" y2="1106.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3550.5" y="1115.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="3562.5" y="1120.7988">max_load_factor_capacity : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3550.5" y="1128.4297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="3562.5" y="1133.6895">sz : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3550.5" y="1141.3203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="181" x="3562.5" y="1146.5801">max_load_fact : static constexpr float</text><line style="stroke: #000000; stroke-width: 1.0;" x1="3562.5" x2="3743.5" y1="1148.5801" y2="1148.5801"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3550.5" y="1154.2109"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="3562.5" y="1159.4707">data : std::vector&lt;bucket_type&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3550.5" y="1167.1016"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="3562.5" y="1172.3613">bucket_type : using</text><ellipse cx="3553.5" cy="1182.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3562.5" y="1185.252">const_pointer : using</text><ellipse cx="3553.5" cy="1195.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="3562.5" y="1198.1426">const_reference : using</text><ellipse cx="3553.5" cy="1208.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3562.5" y="1211.0332">difference_type : using</text><ellipse cx="3553.5" cy="1221.6641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="3562.5" y="1223.9238">hasher : using</text><ellipse cx="3553.5" cy="1234.5547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3562.5" y="1236.8145">key_type : using</text><ellipse cx="3553.5" cy="1247.4453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="3562.5" y="1249.7051">local_const_iterator : using</text><ellipse cx="3553.5" cy="1260.3359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="3562.5" y="1262.5957">local_iterator : using</text><ellipse cx="3553.5" cy="1273.2266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3562.5" y="1275.4863">pointer : using</text><ellipse cx="3553.5" cy="1286.1172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="3562.5" y="1288.377">reference : using</text><ellipse cx="3553.5" cy="1299.0078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3562.5" y="1301.2676">size_type : using</text><ellipse cx="3553.5" cy="1311.8984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="3562.5" y="1314.1582">value_type : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3543.5" x2="4278.5" y1="1320.8438" y2="1320.8438"/><ellipse cx="3553.5" cy="1332.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3562.5" y="1335.0488">Hash_Multiset()</text><ellipse cx="3553.5" cy="1345.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3562.5" y="1347.9395">emplace(Args&amp;&amp; a) : auto</text><ellipse cx="3553.5" cy="1358.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3562.5" y="1360.8301">empty() : auto {query}</text><ellipse cx="3553.5" cy="1371.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="3562.5" y="1373.7207">equal_range(const CompatibleKey&amp; key) : auto {query}</text><ellipse cx="3553.5" cy="1384.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="3562.5" y="1386.6113">equal_range_nonconst_unsafe(const CompatibleKey&amp; key) : auto</text><ellipse cx="3553.5" cy="1397.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="3562.5" y="1399.502">insert(const_reference value) : auto</text><ellipse cx="3553.5" cy="1410.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="3562.5" y="1412.3926">rehash(size_t count) : auto</text><ellipse cx="3553.5" cy="1423.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="3562.5" y="1425.2832">reserve(size_t count) : auto</text><ellipse cx="3553.5" cy="1435.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="3562.5" y="1438.1738">size() : auto {query}</text><!--class nuspell.List_Strings--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="1092.1406" id="nuspell.List_Strings" style="stroke: #000000; stroke-width: 1.5;" width="358" x="2000" y="1685.0938"/><ellipse cx="2088.75" cy="1701.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2091.7188,1706.7344 Q2091.1406,1707.0313 2090.5,1707.1719 Q2089.8594,1707.3281 2089.1563,1707.3281 Q2086.6563,1707.3281 2085.3281,1705.6875 Q2084.0156,1704.0313 2084.0156,1700.9063 Q2084.0156,1697.7813 2085.3281,1696.125 Q2086.6563,1694.4688 2089.1563,1694.4688 Q2089.8594,1694.4688 2090.5,1694.625 Q2091.1563,1694.7813 2091.7188,1695.0781 L2091.7188,1697.7969 Q2091.0938,1697.2188 2090.5,1696.9531 Q2089.9063,1696.6719 2089.2813,1696.6719 Q2087.9375,1696.6719 2087.25,1697.75 Q2086.5625,1698.8125 2086.5625,1700.9063 Q2086.5625,1703 2087.25,1704.0781 Q2087.9375,1705.1406 2089.2813,1705.1406 Q2089.9063,1705.1406 2090.5,1704.875 Q2091.0938,1704.5938 2091.7188,1704.0156 L2091.7188,1706.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="2109.25" y="1705.1953">List_Strings</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="2250" y="1682.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="2251" y="1694.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2001" x2="2357" y1="1717.0938" y2="1717.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2008" y="1726.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="38" x="2020" y="1731.2988">d : VecT</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2008" y="1738.9297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="2020" y="1744.1895">sz : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2008" y="1751.8203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="2020" y="1757.0801">VecT : using</text><ellipse cx="2011" cy="1767.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2020" y="1769.9707">allocator_type : using</text><ellipse cx="2011" cy="1780.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2020" y="1782.8613">const_iterator : using</text><ellipse cx="2011" cy="1793.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2020" y="1795.752">const_pointer : using</text><ellipse cx="2011" cy="1806.3828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2020" y="1808.6426">const_reference : using</text><ellipse cx="2011" cy="1819.2734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="2020" y="1821.5332">const_reverse_iterator : using</text><ellipse cx="2011" cy="1832.1641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2020" y="1834.4238">difference_type : using</text><ellipse cx="2011" cy="1845.0547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2020" y="1847.3145">iterator : using</text><ellipse cx="2011" cy="1857.9453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2020" y="1860.2051">pointer : using</text><ellipse cx="2011" cy="1870.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2020" y="1873.0957">reference : using</text><ellipse cx="2011" cy="1883.7266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="2020" y="1885.9863">reverse_iterator : using</text><ellipse cx="2011" cy="1896.6172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2020" y="1898.877">size_type : using</text><ellipse cx="2011" cy="1909.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2020" y="1911.7676">value_type : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2001" x2="2357" y1="1918.4531" y2="1918.4531"/><ellipse cx="2011" cy="1930.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="2020" y="1932.6582">List_Strings()</text><ellipse cx="2011" cy="1943.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2020" y="1945.5488">List_Strings(size_type n)</text><ellipse cx="2011" cy="1956.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="2020" y="1958.4395">List_Strings(size_type n, const_reference value)</text><ellipse cx="2011" cy="1969.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="2020" y="1971.3301">List_Strings(InputIterator first, InputIterator last)</text><ellipse cx="2011" cy="1981.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="2020" y="1984.2207">List_Strings(std::initializer_list&lt;value_type&gt; il)</text><ellipse cx="2011" cy="1994.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="2020" y="1997.1113">List_Strings(const List_Strings&amp; other)</text><ellipse cx="2011" cy="2007.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="2020" y="2010.002">List_Strings(List_Strings&amp;&amp; other)</text><ellipse cx="2011" cy="2020.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="2020" y="2022.8926">assign(InputIterator first, InputIterator last) : auto</text><ellipse cx="2011" cy="2033.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="2020" y="2035.7832">begin() : auto</text><ellipse cx="2011" cy="2046.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="2020" y="2048.6738">begin() : auto {query}</text><ellipse cx="2011" cy="2059.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="2020" y="2061.5645">capacity() : auto {query}</text><ellipse cx="2011" cy="2072.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="2020" y="2074.4551">cbegin() : auto {query}</text><ellipse cx="2011" cy="2085.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2020" y="2087.3457">cend() : auto {query}</text><ellipse cx="2011" cy="2097.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="2020" y="2100.2363">clear() : auto</text><ellipse cx="2011" cy="2110.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="2020" y="2113.127">crbegin() : auto {query}</text><ellipse cx="2011" cy="2123.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2020" y="2126.0176">crend() : auto {query}</text><ellipse cx="2011" cy="2136.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="2020" y="2138.9082">data() : auto</text><ellipse cx="2011" cy="2149.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2020" y="2151.7988">data() : auto {query}</text><ellipse cx="2011" cy="2162.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="2020" y="2164.6895">emplace(const_iterator pos, Args&amp;&amp; args) : auto</text><ellipse cx="2011" cy="2175.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2020" y="2177.5801">empty() : auto {query}</text><ellipse cx="2011" cy="2188.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="2020" y="2190.4707">end() : auto</text><ellipse cx="2011" cy="2201.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="2020" y="2203.3613">end() : auto {query}</text><ellipse cx="2011" cy="2213.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="2020" y="2216.252">erase(const_iterator position) : auto</text><ellipse cx="2011" cy="2226.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="2020" y="2229.1426">erase(const_iterator first, const_iterator last) : auto</text><ellipse cx="2011" cy="2239.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2020" y="2242.0332">get_allocator() : auto {query}</text><ellipse cx="2011" cy="2252.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="2020" y="2254.9238">insert(const_iterator pos, const_reference x) : auto</text><ellipse cx="2011" cy="2265.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="2020" y="2267.8145">insert(const_iterator pos, value_type&amp;&amp; x) : auto</text><ellipse cx="2011" cy="2278.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="2020" y="2280.7051">insert(const_iterator pos, size_type n, const_reference x) : auto</text><ellipse cx="2011" cy="2291.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="2020" y="2293.5957">insert(const_iterator pos, InputIterator first, InputIterator last) : auto</text><ellipse cx="2011" cy="2304.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="2020" y="2306.4863">insert(const_iterator pos, std::initializer_list&lt;value_type&gt; il) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2008" y="2314.1172"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="2020" y="2319.377">insert_priv(const_iterator pos, U&amp;&amp; val) : auto</text><ellipse cx="2011" cy="2330.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="2020" y="2332.2676">max_size() : auto {query}</text><ellipse cx="2011" cy="2342.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="2020" y="2345.1582">operator!=(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2011" cy="2355.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="2020" y="2358.0488">operator&lt;(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2011" cy="2368.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="2020" y="2370.9395">operator&lt;=(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2011" cy="2381.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="2020" y="2383.8301">operator==(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2011" cy="2394.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="2020" y="2396.7207">operator&gt;(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2011" cy="2407.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="2020" y="2409.6113">operator&gt;=(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2011" cy="2420.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="2020" y="2422.502">pop_back() : auto</text><ellipse cx="2011" cy="2433.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="2020" y="2435.3926">push_back(const_reference x) : auto</text><ellipse cx="2011" cy="2446.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="2020" y="2448.2832">push_back(value_type&amp;&amp; x) : auto</text><ellipse cx="2011" cy="2458.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="2020" y="2461.1738">rbegin() : auto</text><ellipse cx="2011" cy="2471.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2020" y="2474.0645">rbegin() : auto {query}</text><ellipse cx="2011" cy="2484.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="2020" y="2486.9551">rend() : auto</text><ellipse cx="2011" cy="2497.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="2020" y="2499.8457">rend() : auto {query}</text><ellipse cx="2011" cy="2510.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="2020" y="2512.7363">resize(size_type new_sz) : auto</text><ellipse cx="2011" cy="2523.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="2020" y="2525.627">resize(size_type new_sz, const_reference c) : auto</text><ellipse cx="2011" cy="2536.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2020" y="2538.5176">size() : auto {query}</text><ellipse cx="2011" cy="2549.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="2020" y="2551.4082">swap(List_Strings&amp; other) : auto</text><ellipse cx="2011" cy="2562.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2020" y="2564.2988">at(size_type n) : auto&amp;</text><ellipse cx="2011" cy="2574.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="2020" y="2577.1895">at(size_type n) : auto&amp; {query}</text><ellipse cx="2011" cy="2587.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="2020" y="2590.0801">back() : auto&amp;</text><ellipse cx="2011" cy="2600.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2020" y="2602.9707">back() : auto&amp; {query}</text><ellipse cx="2011" cy="2613.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="2020" y="2615.8613">emplace_back(Args&amp;&amp; args) : auto&amp;</text><ellipse cx="2011" cy="2626.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2020" y="2628.752">emplace_back() : auto&amp;</text><ellipse cx="2011" cy="2639.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="2020" y="2641.6426">front() : auto&amp;</text><ellipse cx="2011" cy="2652.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2020" y="2654.5332">front() : auto&amp; {query}</text><ellipse cx="2011" cy="2665.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="2020" y="2667.4238">operator=(const List_Strings&amp; other) : auto&amp;</text><ellipse cx="2011" cy="2678.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="2020" y="2680.3145">operator=(List_Strings&amp;&amp; other) : auto&amp;</text><ellipse cx="2011" cy="2690.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="2020" y="2693.2051">operator=(std::initializer_list&lt;value_type&gt; il) : auto&amp;</text><ellipse cx="2011" cy="2703.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="2020" y="2706.0957">operator[](size_type n) : auto&amp;</text><ellipse cx="2011" cy="2716.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="2020" y="2718.9863">operator[](size_type n) : auto&amp; {query}</text><ellipse cx="2011" cy="2729.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="2020" y="2731.877">assign(size_type n, const_reference value) : void</text><ellipse cx="2011" cy="2742.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="2020" y="2744.7676">assign(std::initializer_list&lt;value_type&gt; il) : void</text><ellipse cx="2011" cy="2755.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="2020" y="2757.6582">reserve(size_type n) : void</text><ellipse cx="2011" cy="2768.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="2020" y="2770.5488">shrink_to_fit() : void</text><!--class nuspell.Prefix--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="241.3594" id="nuspell.Prefix" style="stroke: #000000; stroke-width: 1.5;" width="667" x="2393.5" y="2110.5938"/><ellipse cx="2651.25" cy="2126.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2654.2188,2132.2344 Q2653.6406,2132.5313 2653,2132.6719 Q2652.3594,2132.8281 2651.6563,2132.8281 Q2649.1563,2132.8281 2647.8281,2131.1875 Q2646.5156,2129.5313 2646.5156,2126.4063 Q2646.5156,2123.2813 2647.8281,2121.625 Q2649.1563,2119.9688 2651.6563,2119.9688 Q2652.3594,2119.9688 2653,2120.125 Q2653.6563,2120.2813 2654.2188,2120.5781 L2654.2188,2123.2969 Q2653.5938,2122.7188 2653,2122.4531 Q2652.4063,2122.1719 2651.7813,2122.1719 Q2650.4375,2122.1719 2649.75,2123.25 Q2649.0625,2124.3125 2649.0625,2126.4063 Q2649.0625,2128.5 2649.75,2129.5781 Q2650.4375,2130.6406 2651.7813,2130.6406 Q2652.4063,2130.6406 2653,2130.375 Q2653.5938,2130.0938 2654.2188,2129.5156 L2654.2188,2132.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="30" x="2671.75" y="2130.6953">Prefix</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="2952.5" y="2107.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="2953.5" y="2119.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2394.5" x2="3059.5" y1="2142.5938" y2="2142.5938"/><ellipse cx="2404.5" cy="2154.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="2413.5" y="2156.7988">condition : CondT</text><ellipse cx="2404.5" cy="2167.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2413.5" y="2169.6895">cont_flags : Flag_Set</text><ellipse cx="2404.5" cy="2180.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="2413.5" y="2182.5801">appending : StrT</text><ellipse cx="2404.5" cy="2193.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2413.5" y="2195.4707">stripping : StrT</text><ellipse cx="2404.5" cy="2206.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2413.5" y="2208.3613">cross_product : bool</text><ellipse cx="2404.5" cy="2218.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2413.5" y="2221.252">flag : char16_t</text><ellipse cx="2404.5" cy="2231.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2413.5" y="2234.1426">CondT : using</text><ellipse cx="2404.5" cy="2244.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="2413.5" y="2247.0332">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2394.5" x2="3059.5" y1="2253.7188" y2="2253.7188"/><ellipse cx="2404.5" cy="2265.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="36" x="2413.5" y="2267.9238">Prefix()</text><ellipse cx="2404.5" cy="2278.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="2413.5" y="2280.8145">Prefix(char16_t flag, bool cross_product, const StrT&amp; strip, const StrT&amp; append, const Flag_Set&amp; cont_flags, const StrT&amp; condition)</text><ellipse cx="2404.5" cy="2291.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="2413.5" y="2293.7051">check_condition(const StrT&amp; word) : auto {query}</text><ellipse cx="2404.5" cy="2304.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="2413.5" y="2306.5957">to_derived(StrT&amp; word) : auto {query}</text><ellipse cx="2404.5" cy="2317.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="2413.5" y="2319.4863">to_derived_copy(StrT word) : auto {query}</text><ellipse cx="2404.5" cy="2330.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="2413.5" y="2332.377">to_root(StrT&amp; word) : auto {query}</text><ellipse cx="2404.5" cy="2343.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="2413.5" y="2345.2676">to_root_copy(StrT word) : auto {query}</text><!--class nuspell.Replacement_Table--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="292.9219" id="nuspell.Replacement_Table" style="stroke: #000000; stroke-width: 1.5;" width="250" x="574" y="2084.5938"/><ellipse cx="589" cy="2100.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M591.9688,2106.2344 Q591.3906,2106.5313 590.75,2106.6719 Q590.1094,2106.8281 589.4063,2106.8281 Q586.9063,2106.8281 585.5781,2105.1875 Q584.2656,2103.5313 584.2656,2100.4063 Q584.2656,2097.2813 585.5781,2095.625 Q586.9063,2093.9688 589.4063,2093.9688 Q590.1094,2093.9688 590.75,2094.125 Q591.4063,2094.2813 591.9688,2094.5781 L591.9688,2097.2969 Q591.3438,2096.7188 590.75,2096.4531 Q590.1563,2096.1719 589.5313,2096.1719 Q588.1875,2096.1719 587.5,2097.25 Q586.8125,2098.3125 586.8125,2100.4063 Q586.8125,2102.5 587.5,2103.5781 Q588.1875,2104.6406 589.5313,2104.6406 Q590.1563,2104.6406 590.75,2104.375 Q591.3438,2104.0938 591.9688,2103.5156 L591.9688,2106.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="105" x="603" y="2104.6953">Replacement_Table</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="716" y="2081.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="717" y="2093.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="575" x2="823" y1="2116.5938" y2="2116.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="582" y="2125.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="594" y="2130.7988">table : Table_Str</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="582" y="2138.4297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="594" y="2143.6895">end_word_reps_last_idx : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="582" y="2151.3203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="594" y="2156.5801">start_word_reps_last_idx : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="582" y="2164.2109"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="594" y="2169.4707">whole_word_reps_last_idx : size_t</text><ellipse cx="585" cy="2180.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="594" y="2182.3613">StrT : using</text><ellipse cx="585" cy="2192.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="594" y="2195.252">Table_Str : using</text><ellipse cx="585" cy="2205.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="594" y="2208.1426">const_iterator : using</text><ellipse cx="585" cy="2218.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="594" y="2221.0332">iterator : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="575" x2="823" y1="2227.7188" y2="2227.7188"/><ellipse cx="585" cy="2239.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="594" y="2241.9238">Replacement_Table()</text><ellipse cx="585" cy="2252.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="594" y="2254.8145">Replacement_Table(const Table_Str&amp; v)</text><ellipse cx="585" cy="2265.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="594" y="2267.7051">Replacement_Table(Table_Str&amp;&amp; v)</text><ellipse cx="585" cy="2278.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="594" y="2280.5957">any_place_replacements() : auto {query}</text><ellipse cx="585" cy="2291.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="594" y="2293.4863">end_word_replacements() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="582" y="2301.1172"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="594" y="2306.377">order_entries() : auto</text><ellipse cx="585" cy="2317.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="594" y="2319.2676">start_word_replacements() : auto {query}</text><ellipse cx="585" cy="2329.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="594" y="2332.1582">whole_word_replacements() : auto {query}</text><ellipse cx="585" cy="2342.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="594" y="2345.0488">operator=(const Table_Str&amp; v) : auto&amp;</text><ellipse cx="585" cy="2355.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="594" y="2357.9395">operator=(Table_Str&amp;&amp; v) : auto&amp;</text><ellipse cx="585" cy="2368.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="594" y="2370.8301">operator=(const Range&amp; range) : auto&amp;</text><!--class nuspell.Similarity_Group--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="138.2344" id="nuspell.Similarity_Group" style="stroke: #000000; stroke-width: 1.5;" width="227" x="859.5" y="2162.0938"/><ellipse cx="874.5" cy="2178.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M877.4688,2183.7344 Q876.8906,2184.0313 876.25,2184.1719 Q875.6094,2184.3281 874.9063,2184.3281 Q872.4063,2184.3281 871.0781,2182.6875 Q869.7656,2181.0313 869.7656,2177.9063 Q869.7656,2174.7813 871.0781,2173.125 Q872.4063,2171.4688 874.9063,2171.4688 Q875.6094,2171.4688 876.25,2171.625 Q876.9063,2171.7813 877.4688,2172.0781 L877.4688,2174.7969 Q876.8438,2174.2188 876.25,2173.9531 Q875.6563,2173.6719 875.0313,2173.6719 Q873.6875,2173.6719 873,2174.75 Q872.3125,2175.8125 872.3125,2177.9063 Q872.3125,2180 873,2181.0781 Q873.6875,2182.1406 875.0313,2182.1406 Q875.6563,2182.1406 876.25,2181.875 Q876.8438,2181.5938 877.4688,2181.0156 L877.4688,2183.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="82" x="888.5" y="2182.1953">Similarity_Group</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="978.5" y="2159.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="979.5" y="2171.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="860.5" x2="1085.5" y1="2194.0938" y2="2194.0938"/><ellipse cx="870.5" cy="2206.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="879.5" y="2208.2988">chars : StrT</text><ellipse cx="870.5" cy="2218.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="879.5" y="2221.1895">strings : std::vector&lt;StrT&gt;</text><ellipse cx="870.5" cy="2231.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="879.5" y="2234.0801">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="860.5" x2="1085.5" y1="2240.7656" y2="2240.7656"/><ellipse cx="870.5" cy="2252.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="879.5" y="2254.9707">Similarity_Group()</text><ellipse cx="870.5" cy="2265.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="879.5" y="2267.8613">Similarity_Group(const StrT&amp; s)</text><ellipse cx="870.5" cy="2278.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="879.5" y="2280.752">parse(const StrT&amp; s) : auto</text><ellipse cx="870.5" cy="2291.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="879.5" y="2293.6426">operator=(const StrT&amp; s) : auto&amp;</text><!--class nuspell.String_Pair--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="202.6875" id="nuspell.String_Pair" style="stroke: #000000; stroke-width: 1.5;" width="223" x="296.5" y="2837.0938"/><ellipse cx="321.85" cy="2853.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M324.8188,2858.7344 Q324.2406,2859.0313 323.6,2859.1719 Q322.9594,2859.3281 322.2563,2859.3281 Q319.7563,2859.3281 318.4281,2857.6875 Q317.1156,2856.0313 317.1156,2852.9063 Q317.1156,2849.7813 318.4281,2848.125 Q319.7563,2846.4688 322.2563,2846.4688 Q322.9594,2846.4688 323.6,2846.625 Q324.2563,2846.7813 324.8188,2847.0781 L324.8188,2849.7969 Q324.1938,2849.2188 323.6,2848.9531 Q323.0063,2848.6719 322.3813,2848.6719 Q321.0375,2848.6719 320.35,2849.75 Q319.6625,2850.8125 319.6625,2852.9063 Q319.6625,2855 320.35,2856.0781 Q321.0375,2857.1406 322.3813,2857.1406 Q323.0063,2857.1406 323.6,2856.875 Q324.1938,2856.5938 324.8188,2856.0156 L324.8188,2858.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="55" x="338.15" y="2857.1953">String_Pair</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="411.5" y="2834.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="412.5" y="2846.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="297.5" x2="518.5" y1="2869.0938" y2="2869.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="304.5" y="2878.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="34" x="316.5" y="2883.2988">s : StrT</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="304.5" y="2890.9297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="40" x="316.5" y="2896.1895">i : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="304.5" y="2903.8203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="316.5" y="2909.0801">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="297.5" x2="518.5" y1="2915.7656" y2="2915.7656"/><ellipse cx="307.5" cy="2927.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="316.5" y="2929.9707">String_Pair()</text><ellipse cx="307.5" cy="2940.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="316.5" y="2942.8613">String_Pair(Str1&amp;&amp; str, size_t i)</text><ellipse cx="307.5" cy="2953.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="316.5" y="2955.752">String_Pair(Str1&amp;&amp; first, Str2&amp;&amp; second)</text><ellipse cx="307.5" cy="2966.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="316.5" y="2968.6426">first() : auto {query}</text><ellipse cx="307.5" cy="2979.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="316.5" y="2981.5332">first(my_string_view&lt;CharT&gt; x) : auto</text><ellipse cx="307.5" cy="2992.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="316.5" y="2994.4238">idx() : auto {query}</text><ellipse cx="307.5" cy="3005.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="316.5" y="3007.3145">second() : auto {query}</text><ellipse cx="307.5" cy="3017.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="316.5" y="3020.2051">second(my_string_view&lt;CharT&gt; x) : auto</text><ellipse cx="307.5" cy="3030.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="316.5" y="3033.0957">str() : auto&amp; {query}</text><!--class nuspell.String_Set--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="1027.6875" id="nuspell.String_Set" style="stroke: #000000; stroke-width: 1.5;" width="420" x="3096" y="1717.0938"/><ellipse cx="3219.25" cy="1733.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3222.2188,1738.7344 Q3221.6406,1739.0313 3221,1739.1719 Q3220.3594,1739.3281 3219.6563,1739.3281 Q3217.1563,1739.3281 3215.8281,1737.6875 Q3214.5156,1736.0313 3214.5156,1732.9063 Q3214.5156,1729.7813 3215.8281,1728.125 Q3217.1563,1726.4688 3219.6563,1726.4688 Q3220.3594,1726.4688 3221,1726.625 Q3221.6563,1726.7813 3222.2188,1727.0781 L3222.2188,1729.7969 Q3221.5938,1729.2188 3221,1728.9531 Q3220.4063,1728.6719 3219.7813,1728.6719 Q3218.4375,1728.6719 3217.75,1729.75 Q3217.0625,1730.8125 3217.0625,1732.9063 Q3217.0625,1735 3217.75,1736.0781 Q3218.4375,1737.1406 3219.7813,1737.1406 Q3220.4063,1737.1406 3221,1736.875 Q3221.5938,1736.5938 3222.2188,1736.0156 L3222.2188,1738.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="52" x="3239.75" y="1737.1953">String_Set</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="3408" y="1714.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="3409" y="1726.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3097" x2="3515" y1="1749.0938" y2="1749.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3104" y="1758.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="3116" y="1763.2988">d : std::basic_string&lt;CharT&gt;</text><ellipse cx="3107" cy="1773.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="3116" y="1776.1895">StrT : using</text><ellipse cx="3107" cy="1786.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="3116" y="1789.0801">allocator_type : using</text><ellipse cx="3107" cy="1799.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3116" y="1801.9707">const_iterator : using</text><ellipse cx="3107" cy="1812.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3116" y="1814.8613">const_pointer : using</text><ellipse cx="3107" cy="1825.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="3116" y="1827.752">const_reference : using</text><ellipse cx="3107" cy="1838.3828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="3116" y="1840.6426">const_reverse_iterator : using</text><ellipse cx="3107" cy="1851.2734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3116" y="1853.5332">difference_type : using</text><ellipse cx="3107" cy="1864.1641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="3116" y="1866.4238">iterator : using</text><ellipse cx="3107" cy="1877.0547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="3116" y="1879.3145">key_compare : using</text><ellipse cx="3107" cy="1889.9453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3116" y="1892.2051">key_type : using</text><ellipse cx="3107" cy="1902.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3116" y="1905.0957">pointer : using</text><ellipse cx="3107" cy="1915.7266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="3116" y="1917.9863">reference : using</text><ellipse cx="3107" cy="1928.6172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="3116" y="1930.877">reverse_iterator : using</text><ellipse cx="3107" cy="1941.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3116" y="1943.7676">size_type : using</text><ellipse cx="3107" cy="1954.3984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="3116" y="1956.6582">traits_type : using</text><ellipse cx="3107" cy="1967.2891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="3116" y="1969.5488">value_compare : using</text><ellipse cx="3107" cy="1980.1797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="3116" y="1982.4395">value_type : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3097" x2="3515" y1="1989.125" y2="1989.125"/><ellipse cx="3107" cy="2001.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="3116" y="2003.3301">String_Set()</text><ellipse cx="3107" cy="2013.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="3116" y="2016.2207">String_Set(const StrT&amp; s)</text><ellipse cx="3107" cy="2026.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="3116" y="2029.1113">String_Set(StrT&amp;&amp; s)</text><ellipse cx="3107" cy="2039.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="3116" y="2042.002">String_Set(InputIterator first, InputIterator last)</text><ellipse cx="3107" cy="2052.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="3116" y="2054.8926">String_Set(std::initializer_list&lt;value_type&gt; il)</text><ellipse cx="3107" cy="2065.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3116" y="2067.7832">operatorconstStrT&amp;() {query}</text><ellipse cx="3107" cy="2078.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="3116" y="2080.6738">insert(const StrT&amp; s) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3104" y="2088.3047"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="3116" y="2093.5645">lookup(const key_type&amp; x) : auto {query}</text><ellipse cx="3107" cy="2104.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="3116" y="2106.4551">operator+=(const StrT&amp; s) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3104" y="2114.0859"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="3116" y="2119.3457">sort_uniq() : auto</text><ellipse cx="3107" cy="2129.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3116" y="2132.2363">data() : auto&amp; {query}</text><ellipse cx="3107" cy="2142.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="3116" y="2145.127">operator=(const StrT&amp; s) : auto&amp;</text><ellipse cx="3107" cy="2155.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="3116" y="2158.0176">operator=(StrT&amp;&amp; s) : auto&amp;</text><ellipse cx="3107" cy="2168.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="3116" y="2170.9082">operator=(std::initializer_list&lt;value_type&gt; il) : auto&amp;</text><ellipse cx="3107" cy="2181.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="3116" y="2183.7988">contains(const key_type&amp; x) : bool {query}</text><ellipse cx="3107" cy="2194.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="3116" y="2196.6895">empty() : bool {query}</text><ellipse cx="3107" cy="2207.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="3116" y="2209.5801">operator!=(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3107" cy="2220.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="3116" y="2222.4707">operator&lt;(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3107" cy="2233.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="3116" y="2235.3613">operator&lt;=(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3107" cy="2245.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="3116" y="2248.252">operator==(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3107" cy="2258.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="3116" y="2261.1426">operator&gt;(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3107" cy="2271.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="3116" y="2274.0332">operator&gt;=(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3107" cy="2284.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3116" y="2286.9238">begin() : const_iterator {query}</text><ellipse cx="3107" cy="2297.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="3116" y="2299.8145">cbegin() : const_iterator {query}</text><ellipse cx="3107" cy="2310.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="3116" y="2312.7051">cend() : const_iterator {query}</text><ellipse cx="3107" cy="2323.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="3116" y="2325.5957">end() : const_iterator {query}</text><ellipse cx="3107" cy="2336.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="3116" y="2338.4863">find(const key_type&amp; x) : const_iterator {query}</text><ellipse cx="3107" cy="2349.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="3116" y="2351.377">lower_bound(const key_type&amp; x) : const_iterator {query}</text><ellipse cx="3107" cy="2362.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="3116" y="2364.2676">upper_bound(const key_type&amp; x) : const_iterator {query}</text><ellipse cx="3107" cy="2374.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="3116" y="2377.1582">crbegin() : const_reverse_iterator {query}</text><ellipse cx="3107" cy="2387.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3116" y="2390.0488">crend() : const_reverse_iterator {query}</text><ellipse cx="3107" cy="2400.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="3116" y="2402.9395">rbegin() : const_reverse_iterator {query}</text><ellipse cx="3107" cy="2413.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="3116" y="2415.8301">rend() : const_reverse_iterator {query}</text><ellipse cx="3107" cy="2426.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="3116" y="2428.7207">begin() : iterator</text><ellipse cx="3107" cy="2439.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="3116" y="2441.6113">emplace_hint(iterator hint, Args&amp;&amp; args) : iterator</text><ellipse cx="3107" cy="2452.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3116" y="2454.502">end() : iterator</text><ellipse cx="3107" cy="2465.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="3116" y="2467.3926">erase(iterator position) : iterator</text><ellipse cx="3107" cy="2478.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="3116" y="2480.2832">erase(iterator first, iterator last) : iterator</text><ellipse cx="3107" cy="2490.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="3116" y="2493.1738">find(const key_type&amp; x) : iterator</text><ellipse cx="3107" cy="2503.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="3116" y="2506.0645">insert(iterator hint, const value_type&amp; x) : iterator</text><ellipse cx="3107" cy="2516.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="3116" y="2518.9551">lower_bound(const key_type&amp; x) : iterator</text><ellipse cx="3107" cy="2529.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="3116" y="2531.8457">upper_bound(const key_type&amp; x) : iterator</text><ellipse cx="3107" cy="2542.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="3116" y="2544.7363">key_comp() : key_compare {query}</text><ellipse cx="3107" cy="2555.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="3116" y="2557.627">rbegin() : reverse_iterator</text><ellipse cx="3107" cy="2568.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="3116" y="2570.5176">rend() : reverse_iterator</text><ellipse cx="3107" cy="2581.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="3116" y="2583.4082">count(const key_type&amp; x) : size_type {query}</text><ellipse cx="3107" cy="2594.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="3116" y="2596.2988">erase(const key_type&amp; x) : size_type</text><ellipse cx="3107" cy="2606.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="3116" y="2609.1895">max_size() : size_type {query}</text><ellipse cx="3107" cy="2619.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="3116" y="2622.0801">size() : size_type {query}</text><ellipse cx="3107" cy="2632.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="394" x="3116" y="2634.9707">equal_range(const key_type&amp; x) : std::pair&lt;const_iterator , const_iterator&gt; {query}</text><ellipse cx="3107" cy="2645.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="3116" y="2647.8613">emplace(Args&amp;&amp; args) : std::pair&lt;iterator , bool&gt;</text><ellipse cx="3107" cy="2658.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="3116" y="2660.752">insert(const value_type&amp; x) : std::pair&lt;iterator , bool&gt;</text><ellipse cx="3107" cy="2671.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="3116" y="2673.6426">equal_range(const key_type&amp; x) : std::pair&lt;iterator , iterator&gt;</text><ellipse cx="3107" cy="2684.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="3116" y="2686.5332">value_comp() : value_compare {query}</text><ellipse cx="3107" cy="2697.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="3116" y="2699.4238">clear() : void</text><ellipse cx="3107" cy="2710.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="3116" y="2712.3145">insert(InputIterator first, InputIterator last) : void</text><ellipse cx="3107" cy="2722.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="3116" y="2725.2051">insert(std::initializer_list&lt;value_type&gt; il) : void</text><ellipse cx="3107" cy="2735.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="3116" y="2738.0957">swap(String_Set&amp; s) : void</text><!--class nuspell.Substr_Replacer--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="202.6875" id="nuspell.Substr_Replacer" style="stroke: #000000; stroke-width: 1.5;" width="231" x="1121.5" y="2129.5938"/><ellipse cx="1136.5" cy="2145.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1139.4688,2151.2344 Q1138.8906,2151.5313 1138.25,2151.6719 Q1137.6094,2151.8281 1136.9063,2151.8281 Q1134.4063,2151.8281 1133.0781,2150.1875 Q1131.7656,2148.5313 1131.7656,2145.4063 Q1131.7656,2142.2813 1133.0781,2140.625 Q1134.4063,2138.9688 1136.9063,2138.9688 Q1137.6094,2138.9688 1138.25,2139.125 Q1138.9063,2139.2813 1139.4688,2139.5781 L1139.4688,2142.2969 Q1138.8438,2141.7188 1138.25,2141.4531 Q1137.6563,2141.1719 1137.0313,2141.1719 Q1135.6875,2141.1719 1135,2142.25 Q1134.3125,2143.3125 1134.3125,2145.4063 Q1134.3125,2147.5 1135,2148.5781 Q1135.6875,2149.6406 1137.0313,2149.6406 Q1137.6563,2149.6406 1138.25,2149.375 Q1138.8438,2149.0938 1139.4688,2148.5156 L1139.4688,2151.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="86" x="1150.5" y="2149.6953">Substr_Replacer</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="1244.5" y="2126.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="1245.5" y="2138.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1122.5" x2="1351.5" y1="2161.5938" y2="2161.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1129.5" y="2170.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1141.5" y="2175.7988">table : Table_Pairs</text><ellipse cx="1132.5" cy="2186.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1141.5" y="2188.6895">StrT : using</text><ellipse cx="1132.5" cy="2199.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="1141.5" y="2201.5801">Table_Pairs : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1122.5" x2="1351.5" y1="2208.2656" y2="2208.2656"/><ellipse cx="1132.5" cy="2220.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1141.5" y="2222.4707">Substr_Replacer()</text><ellipse cx="1132.5" cy="2233.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="1141.5" y="2235.3613">Substr_Replacer(const Table_Pairs&amp; v)</text><ellipse cx="1132.5" cy="2245.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="1141.5" y="2248.252">Substr_Replacer(const Table_Pairs&amp;&amp; v)</text><ellipse cx="1132.5" cy="2258.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1141.5" y="2261.1426">replace(StrT&amp; s) : auto {query}</text><ellipse cx="1132.5" cy="2271.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="1141.5" y="2274.0332">replace_copy(StrT s) : auto {query}</text><ellipse cx="1132.5" cy="2284.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="1141.5" y="2286.9238">operator=(const Table_Pairs&amp; v) : auto&amp;</text><ellipse cx="1132.5" cy="2297.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1141.5" y="2299.8145">operator=(const Table_Pairs&amp;&amp; v) : auto&amp;</text><ellipse cx="1132.5" cy="2310.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="1141.5" y="2312.7051">operator=(const Range&amp; range) : auto&amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1129.5" y="2320.3359"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="1141.5" y="2325.5957">sort_uniq() : void</text><!--class nuspell.Suffix--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="241.3594" id="nuspell.Suffix" style="stroke: #000000; stroke-width: 1.5;" width="666" x="3551" y="2110.5938"/><ellipse cx="3808.75" cy="2126.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3811.7188,2132.2344 Q3811.1406,2132.5313 3810.5,2132.6719 Q3809.8594,2132.8281 3809.1563,2132.8281 Q3806.6563,2132.8281 3805.3281,2131.1875 Q3804.0156,2129.5313 3804.0156,2126.4063 Q3804.0156,2123.2813 3805.3281,2121.625 Q3806.6563,2119.9688 3809.1563,2119.9688 Q3809.8594,2119.9688 3810.5,2120.125 Q3811.1563,2120.2813 3811.7188,2120.5781 L3811.7188,2123.2969 Q3811.0938,2122.7188 3810.5,2122.4531 Q3809.9063,2122.1719 3809.2813,2122.1719 Q3807.9375,2122.1719 3807.25,2123.25 Q3806.5625,2124.3125 3806.5625,2126.4063 Q3806.5625,2128.5 3807.25,2129.5781 Q3807.9375,2130.6406 3809.2813,2130.6406 Q3809.9063,2130.6406 3810.5,2130.375 Q3811.0938,2130.0938 3811.7188,2129.5156 L3811.7188,2132.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="29" x="3829.25" y="2130.6953">Suffix</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="4109" y="2107.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="4110" y="2119.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3552" x2="4216" y1="2142.5938" y2="2142.5938"/><ellipse cx="3562" cy="2154.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="3571" y="2156.7988">condition : CondT</text><ellipse cx="3562" cy="2167.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="3571" y="2169.6895">cont_flags : Flag_Set</text><ellipse cx="3562" cy="2180.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="3571" y="2182.5801">appending : StrT</text><ellipse cx="3562" cy="2193.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3571" y="2195.4707">stripping : StrT</text><ellipse cx="3562" cy="2206.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3571" y="2208.3613">cross_product : bool</text><ellipse cx="3562" cy="2218.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3571" y="2221.252">flag : char16_t</text><ellipse cx="3562" cy="2231.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="3571" y="2234.1426">CondT : using</text><ellipse cx="3562" cy="2244.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="3571" y="2247.0332">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3552" x2="4216" y1="2253.7188" y2="2253.7188"/><ellipse cx="3562" cy="2265.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="35" x="3571" y="2267.9238">Suffix()</text><ellipse cx="3562" cy="2278.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="640" x="3571" y="2280.8145">Suffix(char16_t flag, bool cross_product, const StrT&amp; strip, const StrT&amp; append, const Flag_Set&amp; cont_flags, const StrT&amp; condition)</text><ellipse cx="3562" cy="2291.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="3571" y="2293.7051">check_condition(const StrT&amp; word) : auto {query}</text><ellipse cx="3562" cy="2304.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="3571" y="2306.5957">to_derived(StrT&amp; word) : auto {query}</text><ellipse cx="3562" cy="2317.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="3571" y="2319.4863">to_derived_copy(StrT word) : auto {query}</text><ellipse cx="3562" cy="2330.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="3571" y="2332.377">to_root(StrT&amp; word) : auto {query}</text><ellipse cx="3562" cy="2343.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="3571" y="2345.2676">to_root_copy(StrT word) : auto {query}</text><!--class nuspell.Word_List--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="73.7813" id="nuspell.Word_List" style="stroke: #000000; stroke-width: 1.5;" width="281" x="2130.5" y="1222.5938"/><ellipse cx="2241.75" cy="1238.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2244.7188,1244.2344 Q2244.1406,1244.5313 2243.5,1244.6719 Q2242.8594,1244.8281 2242.1563,1244.8281 Q2239.6563,1244.8281 2238.3281,1243.1875 Q2237.0156,1241.5313 2237.0156,1238.4063 Q2237.0156,1235.2813 2238.3281,1233.625 Q2239.6563,1231.9688 2242.1563,1231.9688 Q2242.8594,1231.9688 2243.5,1232.125 Q2244.1563,1232.2813 2244.7188,1232.5781 L2244.7188,1235.2969 Q2244.0938,1234.7188 2243.5,1234.4531 Q2242.9063,1234.1719 2242.2813,1234.1719 Q2240.9375,1234.1719 2240.25,1235.25 Q2239.5625,1236.3125 2239.5625,1238.4063 Q2239.5625,1240.5 2240.25,1241.5781 Q2240.9375,1242.6406 2242.2813,1242.6406 Q2242.9063,1242.6406 2243.5,1242.375 Q2244.0938,1242.0938 2244.7188,1241.5156 L2244.7188,1244.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="50" x="2262.25" y="1242.6953">Word_List</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2131.5" x2="2410.5" y1="1254.5938" y2="1254.5938"/><ellipse cx="2141.5" cy="1266.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="2150.5" y="1268.7988">equal_range : using Word_List_Base::</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2131.5" x2="2410.5" y1="1275.4844" y2="1275.4844"/><ellipse cx="2141.5" cy="1287.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="2150.5" y="1289.6895">equal_range(const std::wstring&amp; word) : auto {query}</text><!--class nuspell.identity--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="60.8906" id="nuspell.identity" style="stroke: #000000; stroke-width: 1.5;" width="200" x="4252" y="2200.5938"/><ellipse cx="4329.25" cy="2216.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M4332.2188,2222.2344 Q4331.6406,2222.5313 4331,2222.6719 Q4330.3594,2222.8281 4329.6563,2222.8281 Q4327.1563,2222.8281 4325.8281,2221.1875 Q4324.5156,2219.5313 4324.5156,2216.4063 Q4324.5156,2213.2813 4325.8281,2211.625 Q4327.1563,2209.9688 4329.6563,2209.9688 Q4330.3594,2209.9688 4331,2210.125 Q4331.6563,2210.2813 4332.2188,2210.5781 L4332.2188,2213.2969 Q4331.5938,2212.7188 4331,2212.4531 Q4330.4063,2212.1719 4329.7813,2212.1719 Q4328.4375,2212.1719 4327.75,2213.25 Q4327.0625,2214.3125 4327.0625,2216.4063 Q4327.0625,2218.5 4327.75,2219.5781 Q4328.4375,2220.6406 4329.7813,2220.6406 Q4330.4063,2220.6406 4331,2220.375 Q4331.5938,2220.0938 4332.2188,2219.5156 L4332.2188,2222.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="37" x="4349.75" y="2220.6953">identity</text><line style="stroke: #000000; stroke-width: 1.5;" x1="4253" x2="4451" y1="2232.5938" y2="2232.5938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="4253" x2="4451" y1="2240.5938" y2="2240.5938"/><ellipse cx="4263" cy="2252.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="4272" y="2254.7988">operator()(T&amp;&amp; t) : constexpr auto&amp;</text><!--class nuspell.sv_eq--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="60.8906" id="nuspell.sv_eq" style="stroke: #000000; stroke-width: 1.5;" width="391" x="1983.5" y="2908.0938"/><ellipse cx="2103.25" cy="2924.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2106.2188,2929.7344 Q2105.6406,2930.0313 2105,2930.1719 Q2104.3594,2930.3281 2103.6563,2930.3281 Q2101.1563,2930.3281 2099.8281,2928.6875 Q2098.5156,2927.0313 2098.5156,2923.9063 Q2098.5156,2920.7813 2099.8281,2919.125 Q2101.1563,2917.4688 2103.6563,2917.4688 Q2104.3594,2917.4688 2105,2917.625 Q2105.6563,2917.7813 2106.2188,2918.0781 L2106.2188,2920.7969 Q2105.5938,2920.2188 2105,2919.9531 Q2104.4063,2919.6719 2103.7813,2919.6719 Q2102.4375,2919.6719 2101.75,2920.75 Q2101.0625,2921.8125 2101.0625,2923.9063 Q2101.0625,2926 2101.75,2927.0781 Q2102.4375,2928.1406 2103.7813,2928.1406 Q2104.4063,2928.1406 2105,2927.875 Q2105.5938,2927.5938 2106.2188,2927.0156 L2106.2188,2929.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="30" x="2123.75" y="2928.1953">sv_eq</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="2266.5" y="2905.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="2267.5" y="2917.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1984.5" x2="2373.5" y1="2940.0938" y2="2940.0938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1984.5" x2="2373.5" y1="2948.0938" y2="2948.0938"/><ellipse cx="1994.5" cy="2960.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="365" x="2003.5" y="2962.2988">operator()(my_string_view&lt;CharT&gt; l, my_string_view&lt;CharT&gt; r) : auto {query}</text><!--class nuspell.sv_hash--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="60.8906" id="nuspell.sv_hash" style="stroke: #000000; stroke-width: 1.5;" width="319" x="2409.5" y="2908.0938"/><ellipse cx="2488.25" cy="2924.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2491.2188,2929.7344 Q2490.6406,2930.0313 2490,2930.1719 Q2489.3594,2930.3281 2488.6563,2930.3281 Q2486.1563,2930.3281 2484.8281,2928.6875 Q2483.5156,2927.0313 2483.5156,2923.9063 Q2483.5156,2920.7813 2484.8281,2919.125 Q2486.1563,2917.4688 2488.6563,2917.4688 Q2489.3594,2917.4688 2490,2917.625 Q2490.6563,2917.7813 2491.2188,2918.0781 L2491.2188,2920.7969 Q2490.5938,2920.2188 2490,2919.9531 Q2489.4063,2919.6719 2488.7813,2919.6719 Q2487.4375,2919.6719 2486.75,2920.75 Q2486.0625,2921.8125 2486.0625,2923.9063 Q2486.0625,2926 2486.75,2927.0781 Q2487.4375,2928.1406 2488.7813,2928.1406 Q2489.4063,2928.1406 2490,2927.875 Q2490.5938,2927.5938 2491.2188,2927.0156 L2491.2188,2929.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="40" x="2508.75" y="2928.1953">sv_hash</text><rect fill="url(#go672sgmnlw0u0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="2620.5" y="2905.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="2621.5" y="2917.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2410.5" x2="2727.5" y1="2940.0938" y2="2940.0938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="2410.5" x2="2727.5" y1="2948.0938" y2="2948.0938"/><ellipse cx="2420.5" cy="2960.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="2429.5" y="2962.2988">operator()(boost::basic_string_view&lt;CharT&gt; s) : auto {query}</text><!--class nuspell.Affixing_Mode--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="99.5625" id="nuspell.Affixing_Mode" style="stroke: #000000; stroke-width: 1.5;" width="126" x="2764" y="2888.5938"/><ellipse cx="2788" cy="2904.5938" fill="#EB937F" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2792.1094,2910.5938 L2784.3906,2910.5938 L2784.3906,2898.2031 L2792.1094,2898.2031 L2792.1094,2900.3594 L2786.8438,2900.3594 L2786.8438,2903.0313 L2791.6094,2903.0313 L2791.6094,2905.1875 L2786.8438,2905.1875 L2786.8438,2908.4375 L2792.1094,2908.4375 L2792.1094,2910.5938 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="74" x="2804" y="2908.6953">Affixing_Mode</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2765" x2="2889" y1="2920.5938" y2="2920.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2770" y="2934.7988">AT_COMPOUND_BEGIN</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="2770" y="2947.6895">AT_COMPOUND_END</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="2770" y="2960.5801">AT_COMPOUND_MIDDLE</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="2770" y="2973.4707">FULL_WORD</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2765" x2="2889" y1="2980.1563" y2="2980.1563"/><!--class nuspell.Flag_Type--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="99.5625" id="nuspell.Flag_Type" style="stroke: #000000; stroke-width: 1.5;" width="108" x="2925" y="2888.5938"/><ellipse cx="2949.9" cy="2904.5938" fill="#EB937F" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2954.0094,2910.5938 L2946.2906,2910.5938 L2946.2906,2898.2031 L2954.0094,2898.2031 L2954.0094,2900.3594 L2948.7438,2900.3594 L2948.7438,2903.0313 L2953.5094,2903.0313 L2953.5094,2905.1875 L2948.7438,2905.1875 L2948.7438,2908.4375 L2954.0094,2908.4375 L2954.0094,2910.5938 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="54" x="2966.1" y="2908.6953">Flag_Type</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2926" x2="3032" y1="2920.5938" y2="2920.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2931" y="2934.7988">FLAG_DOUBLE_CHAR</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="2931" y="2947.6895">FLAG_NUMBER</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="2931" y="2960.5801">FLAG_SINGLE_CHAR</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="50" x="2931" y="2973.4707">FLAG_UTF8</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2926" x2="3032" y1="2980.1563" y2="2980.1563"/><!--class nuspell.empty--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="48" id="nuspell.empty" style="stroke: #000000; stroke-width: 1.5;" width="63" x="3068.5" y="2914.5938"/><ellipse cx="3083.5" cy="2930.5938" fill="#EB937F" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3087.6094,2936.5938 L3079.8906,2936.5938 L3079.8906,2924.2031 L3087.6094,2924.2031 L3087.6094,2926.3594 L3082.3438,2926.3594 L3082.3438,2929.0313 L3087.1094,2929.0313 L3087.1094,2931.1875 L3082.3438,2931.1875 L3082.3438,2934.4375 L3087.6094,2934.4375 L3087.6094,2936.5938 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="31" x="3097.5" y="2934.6953">empty</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3069.5" x2="3130.5" y1="2946.5938" y2="2946.5938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="3069.5" x2="3130.5" y1="2954.5938" y2="2954.5938"/><!--class nuspell::String_Set.String_Set::Char_Traits_Less_Than--><rect fill="#FFFFFF" filter="url(#fo672sgmnlw0u)" height="60.8906" id="nuspell::String_Set.String_Set::Char_Traits_Less_Than" style="stroke: #000000; stroke-width: 1.5;" width="209" x="4476.5" y="418.5938"/><ellipse cx="4491.5" cy="434.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M4494.4688,440.2344 Q4493.8906,440.5313 4493.25,440.6719 Q4492.6094,440.8281 4491.9063,440.8281 Q4489.4063,440.8281 4488.0781,439.1875 Q4486.7656,437.5313 4486.7656,434.4063 Q4486.7656,431.2813 4488.0781,429.625 Q4489.4063,427.9688 4491.9063,427.9688 Q4492.6094,427.9688 4493.25,428.125 Q4493.9063,428.2813 4494.4688,428.5781 L4494.4688,431.2969 Q4493.8438,430.7188 4493.25,430.4531 Q4492.6563,430.1719 4492.0313,430.1719 Q4490.6875,430.1719 4490,431.25 Q4489.3125,432.3125 4489.3125,434.4063 Q4489.3125,436.5 4490,437.5781 Q4490.6875,438.6406 4492.0313,438.6406 Q4492.6563,438.6406 4493.25,438.375 Q4493.8438,438.0938 4494.4688,437.5156 L4494.4688,440.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="177" x="4505.5" y="438.6953">String_Set::Char_Traits_Less_Than</text><line style="stroke: #000000; stroke-width: 1.5;" x1="4477.5" x2="4684.5" y1="450.5938" y2="450.5938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="4477.5" x2="4684.5" y1="458.5938" y2="458.5938"/><ellipse cx="4487.5" cy="470.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="4496.5" y="472.7988">operator()(CharT a, CharT b) : auto</text><!--link nuspell.Aff_Data to nuspell.Dict_Base--><path d="M1515.4095,852.8481 C1520.8201,866.5523 1526.2317,880.2588 1531.6194,893.9048 " fill="none" id="nuspell.Aff_Data-nuspell.Dict_Base" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="1508.868,855.3411,1508.0342,834.1678,1521.8898,850.1998,1508.868,855.3411" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Dict_Base to nuspell.Basic_Dictionary--><path d="M1676,1645.3481 C1676,1820.828 1676,2014.5069 1676,2129.3315 " fill="none" id="nuspell.Dict_Base-nuspell.Basic_Dictionary" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="1669.0001,1645.1461,1676,1625.146,1683.0001,1645.146,1669.0001,1645.1461" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Data to nuspell.Aff_Structures--><path d="M1153.334,591.2692 C1049.0273,671.5934 925.1957,778.8452 835,894.0938 C770.0518,977.0819 718.8759,1086.7782 687.3487,1164.2723 " fill="none" id="nuspell.Aff_Data-nuspell.Aff_Structures" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#go672sgmnlw0u0)" points="1163.6872,583.3353,1156.4917,583.8099,1154.1624,590.6344,1161.3578,590.1598,1163.6872,583.3353" style="stroke: #000000; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="7" x="1149.0383" y="585.3537">2</text><!--link nuspell.Aff_Data to nuspell.Compound_Rule_Table--><path d="M1199.6345,846.3798 C1152.9655,964.954 1105.9386,1084.4379 1074.5437,1164.2046 " fill="none" id="nuspell.Aff_Data-nuspell.Compound_Rule_Table" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#go672sgmnlw0u0)" points="1204.4409,834.1678,1198.5213,838.2859,1200.0459,845.334,1205.9654,841.216,1204.4409,834.1678" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Data to nuspell.Word_List--><path d="M1560.3257,526.7993 C1728.0162,599.5678 1961.6806,722.8449 2113,894.0938 C2201.4599,994.2042 2246.4021,1151.4509 2263.1194,1222.5237 " fill="none" id="nuspell.Aff_Data-nuspell.Word_List" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#go672sgmnlw0u0)" points="1548.368,521.6474,1552.2955,527.6951,1559.3886,526.3958,1555.4611,520.348,1548.368,521.6474" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Break_Table--><path d="M526.7385,1363.5348 C439.215,1442.8502 326.5316,1559.5624 260,1685.0938 C190.9254,1815.4234 158.7785,1982.7177 144.0434,2097.5811 " fill="none" id="nuspell.Aff_Structures-nuspell.Break_Table" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#go672sgmnlw0u0)" points="536.4717,1354.774,529.3361,1355.815,527.5527,1362.8021,534.6882,1361.761,536.4717,1354.774" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Compound_Pattern--><path d="M624.8365,1367.7468 C573.6511,1571.5446 464.4097,2006.4954 423.7108,2168.5402 " fill="none" id="nuspell.Aff_Structures-nuspell.Compound_Pattern" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#go672sgmnlw0u0)" points="628.0484,1354.9585,622.7073,1359.8033,625.1253,1366.597,630.4664,1361.7521,628.0484,1354.9585" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Replacement_Table--><path d="M657.2458,1368.0251 C665.7099,1542.9807 682.3905,1887.7723 691.9068,2084.4759 " fill="none" id="nuspell.Aff_Structures-nuspell.Replacement_Table" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#go672sgmnlw0u0)" points="656.6136,1354.9585,652.9083,1361.1448,657.1936,1366.9444,660.8989,1360.7581,656.6136,1354.9585" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Similarity_Group--><path d="M706.3331,1366.432 C747.7988,1451.1823 804.0712,1573.5322 842,1685.0938 C898.9513,1852.6068 940.9957,2057.0432 960.6437,2161.8451 " fill="none" id="nuspell.Aff_Structures-nuspell.Similarity_Group" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#go672sgmnlw0u0)" points="700.5838,1354.7279,699.639,1361.8768,705.8746,1365.4985,706.8194,1358.3496,700.5838,1354.7279" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Substr_Replacer--><path d="M678.7122,1367.5083 C704.8327,1450.3267 752.9419,1561.0089 835,1625.0938 C931.5409,1700.4893 1016.5445,1599.3256 1104,1685.0938 C1223.1996,1801.9936 1242.4686,2006.5802 1242.1431,2129.389 " fill="none" id="nuspell.Aff_Structures-nuspell.Substr_Replacer" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#go672sgmnlw0u0)" points="674.8618,1354.9843,672.8017,1361.8948,678.3883,1366.4544,680.4484,1359.5438,674.8618,1354.9843" style="stroke: #000000; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="7" x="669.2232" y="1374.2947">2</text><!--link nuspell.Basic_Dictionary to nuspell.Encoding_Details--><path d="M1676,2345.8768 C1676,2516.4171 1676,2826.1212 1676,2914.476 " fill="none" id="nuspell.Basic_Dictionary-nuspell.Encoding_Details" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#go672sgmnlw0u0)" points="1676,2332.8378,1672,2338.8378,1676,2344.8378,1680,2338.8378,1676,2332.8378" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Compound_Pattern to nuspell.String_Pair--><path d="M408,2306.9542 C408,2434.83 408,2693.3536 408,2836.8395 " fill="none" id="nuspell.Compound_Pattern-nuspell.String_Pair" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#go672sgmnlw0u0)" points="408,2293.8797,404,2299.8797,408,2305.8797,412,2299.8797,408,2293.8797" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Affix to nuspell.Affix_Table--><!--link nuspell.Affix_Table to nuspell.Affixing_Result--><!--link nuspell.Affixing_Result to nuspell.Casing--><!--link nuspell.Casing to nuspell.Compound_Check_Pattern--><!--link nuspell.Affix to nuspell.Compounding_Result--><!--link nuspell.Compounding_Result to nuspell.Condition--><!--link nuspell.Condition to nuspell.Encoding--><!--link nuspell.Encoding to nuspell.Finder--><!--link nuspell.Finder to nuspell.Hash_Multiset--><!--link nuspell.Compounding_Result to nuspell.List_Strings--><!--link nuspell.List_Strings to nuspell.Prefix--><!--link nuspell.Prefix to nuspell.String_Set--><!--link nuspell.String_Set to nuspell.Suffix--><!--link nuspell.Suffix to nuspell.identity--><!--link nuspell.List_Strings to nuspell.sv_eq--><!--link nuspell.sv_eq to nuspell.sv_hash--><!--link nuspell.sv_hash to nuspell.Affixing_Mode--><!--link nuspell.Affixing_Mode to nuspell.Flag_Type--><!--link nuspell.Flag_Type to nuspell.empty--><!--
@startuml
skinparam BackgroundColor White|White
skinparam ArrowColor Black
skinparam DefaultFontName Roboto Condensed
skinparam TitleFontStyle Bold

skinparam NoteBackgroundColor White
skinparam NoteBorderColor Black

skinparam UsecaseBackgroundColor White
skinparam ActorBackgroundColor White
skinparam UsecaseBorderColor Black
skinparam ActorBorderColor Black

skinparam usecase {
	BackgroundColor<<for now out of scope>> Gray
}

skinparam StateBackgroundColor White
skinparam StateBorderColor Black

skinparam ActivityBackgroundColor White
skinparam ActivityDiamondBackgroundColor White
skinparam ActivityBorderColor Black
skinparam ActivityDiamondBorderColor Black

skinparam ClassBackgroundColor White
skinparam ClassBorderColor Black
title Nuspell
namespace nuspell {
	class Aff_Data {
		+structures : Aff_Structures<char>
		+wide_structures : Aff_Structures<wchar_t>
		+compound_rules : Compound_Rule_Table
		+compound_syllable_num : Flag_Set
		+flag_type : Flag_Type
		+words : Word_List
		+get_structures() : auto {query}
		+parse_aff(istream& in) : auto
		+parse_aff_dic(std::istream& aff, std::istream& dic) : auto
		+parse_dic(istream& in) : auto
		+set_encoding_and_language(const string& enc, const string& lang) : auto
		+checksharps : bool
		+complex_prefixes : bool
		+compound_check_case : bool
		+compound_check_duplicate : bool
		+compound_check_rep : bool
		+compound_check_triple : bool
		+compound_more_suffixes : bool
		+compound_simplified_triple : bool
		+forbid_warn : bool
		+fullstrip : bool
		+no_split_suggestions : bool
		+only_max_diff : bool
		+suggest_with_dots : bool
		+circumfix_flag : char16_t
		+compound_begin_flag : char16_t
		+compound_flag : char16_t
		+compound_forbid_flag : char16_t
		+compound_force_uppercase : char16_t
		+compound_last_flag : char16_t
		+compound_middle_flag : char16_t
		+compound_onlyin_flag : char16_t
		+compound_permit_flag : char16_t
		+compound_root_flag : char16_t
		+forbiddenword_flag : char16_t
		+keepcase_flag : char16_t
		+need_affix_flag : char16_t
		+nosuggest_flag : char16_t
		+substandard_flag : char16_t
		+warn_flag : char16_t
		+internal_locale : std::locale
		+compound_syllable_vowels : string
		+wordchars : string
		+compound_max_word_count : unsigned short
		+compound_min_length : unsigned short
		+compound_syllable_max : unsigned short
		+max_compound_suggestions : unsigned short
		+max_diff_factor : unsigned short
		+max_ngram_suggestions : unsigned short
		+istream : using
		+pair : using
		+string : using
		+u16string : using
		+vector : using
		+flag_aliases : vector<Flag_Set>
		+phonetic_replacements : vector<pair<string, string> >
	}
}

namespace nuspell {
	class Aff_Structures <template <class CharT>> {
		+break_table : Break_Table<CharT>
		+prefixes : Prefix_Table<CharT>
		+replacements : Replacement_Table<CharT>
		+input_substr_replacer : Substr_Replacer<CharT>
		+output_substr_replacer : Substr_Replacer<CharT>
		+suffixes : Suffix_Table<CharT>
		+ignored_chars : std::basic_string<CharT>
		+keyboard_closeness : std::basic_string<CharT>
		+try_chars : std::basic_string<CharT>
		+compound_patterns : std::vector<Compound_Pattern<CharT> >
		+similarities : std::vector<Similarity_Group<CharT> >
	}
}

namespace nuspell {
	class Affix {
		+new_flags : Flag_Set
		+cross_product : bool
		+flag : char16_t
		+appending : string
		+condition : string
		+stripping : string
		+string : using
		+vector : using
		+morphological_fields : vector<string>
	}
}

namespace nuspell {
	class Affix_Table <template <class CharT, class AffixT>> {
		-all_cont_flags : Flag_Set
		+emplace(Args&& a) : auto
		+equal_range(my_string_view<CharT> appending) : auto {query}
		+has_continuation_flag(char16_t flag) : auto {query}
		+has_continuation_flags() : auto {query}
		+base : using
		+iterator : using
	}
}

namespace nuspell {
	class Affixing_Result <template <class... Affixes>> {
		+Affixing_Result()
		+Affixing_Result(Word_List::const_reference word_entry, const Affixes& affixes)
		+const_pointer() {query}
		+operator->() : auto {query}
		+operator*() : auto& {query}
		+base_type : using
	}
}

namespace nuspell {
	class Basic_Dictionary {
		+Basic_Dictionary()
		#Basic_Dictionary(std::istream& aff, std::istream& dic)
		#enc_details : Encoding_Details
		#external_to_internal_encoding(const std::string& in, std::wstring& wide_out, std::string& narrow_out) : auto {query}
		+imbue(const std::locale& loc) : auto
		#internal_to_external_encoding(std::string& in_out, std::wstring& wide_in_out) : auto {query}
		+{static} load_from_aff_dic(std::istream& aff, std::istream& dic) : auto
		+{static} load_from_aff_dic(const string& file_path_without_extension) : auto
		+spell(const std::string& word) : auto {query}
		+suggest(const std::string& word, List_Strings<char>& out) : auto {query}
		#List_Strings_Back_Inserter : friend struct
		#external_locale : std::locale
	}
}

namespace nuspell {
	class Break_Table <template <class CharT>> {
		+Break_Table()
		+Break_Table(const Table_Str& v)
		+Break_Table(Table_Str&& v)
		-table : Table_Str
		+end_word_breaks() : auto {query}
		+middle_word_breaks() : auto {query}
		-order_entries() : auto
		+start_word_breaks() : auto {query}
		+operator=(const Table_Str& v) : auto&
		+operator=(Table_Str&& v) : auto&
		+operator=(const Range& range) : auto&
		-end_word_breaks_last_idx : size_t
		-start_word_breaks_last_idx : size_t
		+StrT : using
		+Table_Str : using
		+const_iterator : using
		+iterator : using
	}
}

namespace nuspell {
	class Casing {
	}
}

namespace nuspell {
	class Compound_Check_Pattern {
		+first_word_flag : char16_t
		+second_word_flag : char16_t
		+first_word_end : string
		+replacement : string
		+second_word_begin : string
		+string : using
	}
}

namespace nuspell {
	class Compound_Pattern <template <class CharT>> {
		+replacement : StrT
		+begin_end_chars : String_Pair<CharT>
		+match_first_only_unaffixed_or_zero_affixed : bool
		+first_word_flag : char16_t
		+second_word_flag : char16_t
		+StrT : using
	}
}

namespace nuspell {
	class Compound_Rule_Table {
		+Compound_Rule_Table()
		+Compound_Rule_Table(const std::vector<std::u16string>& tbl)
		+Compound_Rule_Table(std::vector<std::u16string>&& tbl)
		-all_flags : Flag_Set
		+empty() : auto {query}
		-fill_all_flags() : auto
		+has_any_of_flags(const Flag_Set& f) : auto {query}
		+match_any_rule(const std::vector<const Flag_Set*> data) : auto {query}
		+operator=(const std::vector<std::u16string>& tbl) : auto
		+operator=(std::vector<std::u16string>&& tbl) : auto
		-rules : std::vector<std::u16string>
	}
}

namespace nuspell {
	class Compounding_Result {
		+const_pointer() {query}
		+operator->() : auto {query}
		+operator*() : auto& {query}
	}
}

namespace nuspell {
	class Condition <template <class CharT>> {
		+Condition()
		+Condition(const StrT& condition)
		+Condition(StrT&& condition)
		-cond : StrT
		-construct() : auto
		+match(const StrT& s, size_t pos, size_t len) : auto {query}
		+match_prefix(const StrT& s) : auto {query}
		+match_suffix(const StrT& s) : auto {query}
		-length : size_t
		+StrT : using
		+tuple : using
		+vector : using
		-spans : vector<tuple<size_t, size_t, Span_Type> >
	}
}

namespace nuspell {
	class Dict_Base {
		+Dict_Base()
		+add_sug_if_correct(std::basic_string<CharT>& word, OutIter& out) : auto {query}
		+affix_NOT_valid(const Prefix<CharT>& a) : auto {query}
		+affix_NOT_valid(const Suffix<CharT>& a) : auto {query}
		+bad_char_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+check_compound(std::basic_string<CharT>& word) : auto {query}
		+check_compound(std::basic_string<CharT>& word, size_t start_pos, size_t num_part, std::basic_string<CharT>& part) : auto {query}
		+check_compound_classic(std::basic_string<CharT>& word, size_t start_pos, size_t i, size_t num_part, std::basic_string<CharT>& part) : auto {query}
		+check_compound_with_pattern_replacements(std::basic_string<CharT>& word, size_t start_pos, size_t i, size_t num_part, std::basic_string<CharT>& part) : auto {query}
		+check_compound_with_rules(std::basic_string<CharT>& word, std::vector<const Flag_Set*>& words_data, size_t start_pos, std::basic_string<CharT>& part) : auto {query}
		+check_word(std::basic_string<CharT>& s) : auto {query}
		+check_word_in_compound(std::basic_string<CharT>& s) : auto {query}
		+extra_char_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+forgotten_char_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+is_circumfix(const AffixT& a) : auto {query}
		+is_valid_inside_compound(const Flag_Set& flags) : auto {query}
		+keyboard_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+map_suggest(std::basic_string<CharT>& word, OutIter out, size_t i) : auto {query}
		+outer_affix_NOT_valid(const AffixT& a) : auto {query}
		+rep_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+spell_break(std::basic_string<CharT>& s, size_t depth) : auto {query}
		+spell_casing(std::basic_string<CharT>& s) : auto {query}
		+spell_casing_title(std::basic_string<CharT>& s) : auto {query}
		+spell_casing_upper(std::basic_string<CharT>& s) : auto {query}
		+spell_priv(const std::basic_string<CharT>& s) : auto {query}
		+spell_priv(std::basic_string<CharT>& s) : auto {query}
		+spell_sharps(std::basic_string<CharT>& base, size_t n_pos, size_t n, size_t rep) : auto {query}
		+strip_2_pfx_sfx_3(const Prefix<CharT>& pe1, const Prefix<CharT>& pe2, std::basic_string<CharT>& word) : auto {query}
		+strip_2_prefixes_then_suffix(std::basic_string<CharT>& word) : auto {query}
		+strip_2_sfx_pfx_3(const Suffix<CharT>& se1, const Suffix<CharT>& se2, std::basic_string<CharT>& word) : auto {query}
		+strip_2_suffixes_then_prefix(std::basic_string<CharT>& s) : auto {query}
		+strip_p_s_p_3(const Prefix<CharT>& pe1, const Suffix<CharT>& se1, std::basic_string<CharT>& word) : auto {query}
		+strip_pfx_2_sfx_3(const Prefix<CharT>& pe1, const Suffix<CharT>& se1, std::basic_string<CharT>& s) : auto {query}
		+strip_pfx_then_pfx_2(const Prefix<CharT>& pe1, std::basic_string<CharT>& s) : auto {query}
		+strip_pfx_then_sfx_2(const Prefix<CharT>& pe, std::basic_string<CharT>& s) : auto {query}
		+strip_pfx_then_sfx_comm_2(const Prefix<CharT>& pe, std::basic_string<CharT>& word) : auto {query}
		+strip_prefix_only(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_suffix_prefix(std::basic_string<CharT>& word) : auto {query}
		+strip_prefix_then_2_suffixes(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_then_prefix(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_then_suffix(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_then_suffix_commutative(std::basic_string<CharT>& word) : auto {query}
		+strip_s_p_s_3(const Suffix<CharT>& se1, const Prefix<CharT>& pe1, std::basic_string<CharT>& word) : auto {query}
		+strip_sfx_2_pfx_3(const Suffix<CharT>& se1, const Prefix<CharT>& pe1, std::basic_string<CharT>& s) : auto {query}
		+strip_sfx_then_pfx_2(const Suffix<CharT>& se, std::basic_string<CharT>& s) : auto {query}
		+strip_sfx_then_sfx_2(const Suffix<CharT>& se1, std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_only(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_prefix_suffix(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_then_2_prefixes(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_then_prefix(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_then_suffix(std::basic_string<CharT>& s) : auto {query}
		+suggest_priv(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+try_rep_suggestion(std::basic_string<CharT>& word, OutIter out) : auto {query}
	}
}

namespace nuspell {
	class Encoding {
		+Encoding()
		+Encoding(const std::string& e)
		+Encoding(std::string&& e)
		+Encoding(const char* e)
		+operatorEnc_Type() {query}
		+string&() {query}
		+empty() : auto {query}
		+is_utf8() : auto {query}
		-normalize_name() : auto
		+value_or_default() : auto
		+operator=(const std::string& e) : auto&
		+operator=(std::string&& e) : auto&
		+operator=(const char* e) : auto&
		+value() : auto& {query}
		-name : std::string
	}
}

namespace nuspell {
	class Encoding_Details {
	}
}

namespace nuspell {
	class Finder {
		-dictionaries : Dict_List
		+add_apacheopenoffice_paths() : auto
		+add_default_paths() : auto
		+add_libreoffice_paths() : auto
		+add_mozilla_paths() : auto
		+begin() : auto {query}
		+end() : auto {query}
		+equal_range(const std::string& dict) : auto {query}
		+find(const std::string& dict) : auto {query}
		+get_dictionary(const std::string& dict) : auto {query}
		+search_dictionaries() : auto
		+{static} search_dictionaries_in_all_paths() : auto
		+get_all_dictionaries() : auto& {query}
		+get_all_paths() : auto& {query}
		-paths : std::vector<std::string>
		-Dict_List : using
		+const_iterator : using
	}
}

namespace nuspell {
	class Hash_Multiset <template <class Value, class Key = Value, class KeyExtract = identity, class Hash = std::hash<Key>, class KeyEqual = std::equal_to<Key>>> {
		+Hash_Multiset()
		+emplace(Args&& a) : auto
		+empty() : auto {query}
		+equal_range(const CompatibleKey& key) : auto {query}
		+equal_range_nonconst_unsafe(const CompatibleKey& key) : auto
		+insert(const_reference value) : auto
		+rehash(size_t count) : auto
		+reserve(size_t count) : auto
		+size() : auto {query}
		-max_load_factor_capacity : size_t
		-sz : size_t
		-{static} max_load_fact : static constexpr float
		-data : std::vector<bucket_type>
		-bucket_type : using
		+const_pointer : using
		+const_reference : using
		+difference_type : using
		+hasher : using
		+key_type : using
		+local_const_iterator : using
		+local_iterator : using
		+pointer : using
		+reference : using
		+size_type : using
		+value_type : using
	}
}

namespace nuspell {
	class List_Strings <template <class CharT>> {
		+List_Strings()
		+List_Strings(size_type n)
		+List_Strings(size_type n, const_reference value)
		+List_Strings(InputIterator first, InputIterator last)
		+List_Strings(std::initializer_list<value_type> il)
		+List_Strings(const List_Strings& other)
		+List_Strings(List_Strings&& other)
		-d : VecT
		+assign(InputIterator first, InputIterator last) : auto
		+begin() : auto
		+begin() : auto {query}
		+capacity() : auto {query}
		+cbegin() : auto {query}
		+cend() : auto {query}
		+clear() : auto
		+crbegin() : auto {query}
		+crend() : auto {query}
		+data() : auto
		+data() : auto {query}
		+emplace(const_iterator pos, Args&& args) : auto
		+empty() : auto {query}
		+end() : auto
		+end() : auto {query}
		+erase(const_iterator position) : auto
		+erase(const_iterator first, const_iterator last) : auto
		+get_allocator() : auto {query}
		+insert(const_iterator pos, const_reference x) : auto
		+insert(const_iterator pos, value_type&& x) : auto
		+insert(const_iterator pos, size_type n, const_reference x) : auto
		+insert(const_iterator pos, InputIterator first, InputIterator last) : auto
		+insert(const_iterator pos, std::initializer_list<value_type> il) : auto
		-insert_priv(const_iterator pos, U&& val) : auto
		+max_size() : auto {query}
		+operator!=(const List_Strings& other) : auto {query}
		+operator<(const List_Strings& other) : auto {query}
		+operator<=(const List_Strings& other) : auto {query}
		+operator==(const List_Strings& other) : auto {query}
		+operator>(const List_Strings& other) : auto {query}
		+operator>=(const List_Strings& other) : auto {query}
		+pop_back() : auto
		+push_back(const_reference x) : auto
		+push_back(value_type&& x) : auto
		+rbegin() : auto
		+rbegin() : auto {query}
		+rend() : auto
		+rend() : auto {query}
		+resize(size_type new_sz) : auto
		+resize(size_type new_sz, const_reference c) : auto
		+size() : auto {query}
		+swap(List_Strings& other) : auto
		+at(size_type n) : auto&
		+at(size_type n) : auto& {query}
		+back() : auto&
		+back() : auto& {query}
		+emplace_back(Args&& args) : auto&
		+emplace_back() : auto&
		+front() : auto&
		+front() : auto& {query}
		+operator=(const List_Strings& other) : auto&
		+operator=(List_Strings&& other) : auto&
		+operator=(std::initializer_list<value_type> il) : auto&
		+operator[](size_type n) : auto&
		+operator[](size_type n) : auto& {query}
		-sz : size_t
		-VecT : using
		+allocator_type : using
		+const_iterator : using
		+const_pointer : using
		+const_reference : using
		+const_reverse_iterator : using
		+difference_type : using
		+iterator : using
		+pointer : using
		+reference : using
		+reverse_iterator : using
		+size_type : using
		+value_type : using
		+assign(size_type n, const_reference value) : void
		+assign(std::initializer_list<value_type> il) : void
		+reserve(size_type n) : void
		+shrink_to_fit() : void
	}
}

namespace nuspell {
	class Prefix <template <class CharT>> {
		+Prefix()
		+Prefix(char16_t flag, bool cross_product, const StrT& strip, const StrT& append, const Flag_Set& cont_flags, const StrT& condition)
		+condition : CondT
		+cont_flags : Flag_Set
		+appending : StrT
		+stripping : StrT
		+check_condition(const StrT& word) : auto {query}
		+to_derived(StrT& word) : auto {query}
		+to_derived_copy(StrT word) : auto {query}
		+to_root(StrT& word) : auto {query}
		+to_root_copy(StrT word) : auto {query}
		+cross_product : bool
		+flag : char16_t
		+CondT : using
		+StrT : using
	}
}

namespace nuspell {
	class Replacement_Table <template <class CharT>> {
		+Replacement_Table()
		+Replacement_Table(const Table_Str& v)
		+Replacement_Table(Table_Str&& v)
		-table : Table_Str
		+any_place_replacements() : auto {query}
		+end_word_replacements() : auto {query}
		-order_entries() : auto
		+start_word_replacements() : auto {query}
		+whole_word_replacements() : auto {query}
		+operator=(const Table_Str& v) : auto&
		+operator=(Table_Str&& v) : auto&
		+operator=(const Range& range) : auto&
		-end_word_reps_last_idx : size_t
		-start_word_reps_last_idx : size_t
		-whole_word_reps_last_idx : size_t
		+StrT : using
		+Table_Str : using
		+const_iterator : using
		+iterator : using
	}
}

namespace nuspell {
	class Similarity_Group <template <class CharT>> {
		+Similarity_Group()
		+Similarity_Group(const StrT& s)
		+chars : StrT
		+parse(const StrT& s) : auto
		+operator=(const StrT& s) : auto&
		+strings : std::vector<StrT>
		+StrT : using
	}
}

namespace nuspell {
	class String_Pair <template <class CharT>> {
		+String_Pair()
		+String_Pair(Str1&& str, size_t i)
		+String_Pair(Str1&& first, Str2&& second)
		-s : StrT
		+first() : auto {query}
		+first(my_string_view<CharT> x) : auto
		+idx() : auto {query}
		+second() : auto {query}
		+second(my_string_view<CharT> x) : auto
		+str() : auto& {query}
		-i : size_t
		-StrT : using
	}
}

namespace nuspell {
	class String_Set <template <class CharT>> {
		+String_Set()
		+String_Set(const StrT& s)
		+String_Set(StrT&& s)
		+String_Set(InputIterator first, InputIterator last)
		+String_Set(std::initializer_list<value_type> il)
		+operatorconstStrT&() {query}
		+insert(const StrT& s) : auto
		-lookup(const key_type& x) : auto {query}
		+operator+=(const StrT& s) : auto
		-sort_uniq() : auto
		+data() : auto& {query}
		+operator=(const StrT& s) : auto&
		+operator=(StrT&& s) : auto&
		+operator=(std::initializer_list<value_type> il) : auto&
		+contains(const key_type& x) : bool {query}
		+empty() : bool {query}
		+operator!=(const String_Set& rhs) : bool {query}
		+operator<(const String_Set& rhs) : bool {query}
		+operator<=(const String_Set& rhs) : bool {query}
		+operator==(const String_Set& rhs) : bool {query}
		+operator>(const String_Set& rhs) : bool {query}
		+operator>=(const String_Set& rhs) : bool {query}
		+begin() : const_iterator {query}
		+cbegin() : const_iterator {query}
		+cend() : const_iterator {query}
		+end() : const_iterator {query}
		+find(const key_type& x) : const_iterator {query}
		+lower_bound(const key_type& x) : const_iterator {query}
		+upper_bound(const key_type& x) : const_iterator {query}
		+crbegin() : const_reverse_iterator {query}
		+crend() : const_reverse_iterator {query}
		+rbegin() : const_reverse_iterator {query}
		+rend() : const_reverse_iterator {query}
		+begin() : iterator
		+emplace_hint(iterator hint, Args&& args) : iterator
		+end() : iterator
		+erase(iterator position) : iterator
		+erase(iterator first, iterator last) : iterator
		+find(const key_type& x) : iterator
		+insert(iterator hint, const value_type& x) : iterator
		+lower_bound(const key_type& x) : iterator
		+upper_bound(const key_type& x) : iterator
		+key_comp() : key_compare {query}
		+rbegin() : reverse_iterator
		+rend() : reverse_iterator
		+count(const key_type& x) : size_type {query}
		+erase(const key_type& x) : size_type
		+max_size() : size_type {query}
		+size() : size_type {query}
		-d : std::basic_string<CharT>
		+equal_range(const key_type& x) : std::pair<const_iterator , const_iterator> {query}
		+emplace(Args&& args) : std::pair<iterator , bool>
		+insert(const value_type& x) : std::pair<iterator , bool>
		+equal_range(const key_type& x) : std::pair<iterator , iterator>
		+StrT : using
		+allocator_type : using
		+const_iterator : using
		+const_pointer : using
		+const_reference : using
		+const_reverse_iterator : using
		+difference_type : using
		+iterator : using
		+key_compare : using
		+key_type : using
		+pointer : using
		+reference : using
		+reverse_iterator : using
		+size_type : using
		+traits_type : using
		+value_compare : using
		+value_type : using
		+value_comp() : value_compare {query}
		+clear() : void
		+insert(InputIterator first, InputIterator last) : void
		+insert(std::initializer_list<value_type> il) : void
		+swap(String_Set& s) : void
	}
}

namespace nuspell::String_Set {
	class String_Set::Char_Traits_Less_Than {
		+operator()(CharT a, CharT b) : auto
	}
}

namespace nuspell {
	class Substr_Replacer <template <class CharT>> {
		+Substr_Replacer()
		+Substr_Replacer(const Table_Pairs& v)
		+Substr_Replacer(const Table_Pairs&& v)
		-table : Table_Pairs
		+replace(StrT& s) : auto {query}
		+replace_copy(StrT s) : auto {query}
		+operator=(const Table_Pairs& v) : auto&
		+operator=(const Table_Pairs&& v) : auto&
		+operator=(const Range& range) : auto&
		+StrT : using
		+Table_Pairs : using
		-sort_uniq() : void
	}
}

namespace nuspell {
	class Suffix <template <class CharT>> {
		+Suffix()
		+Suffix(char16_t flag, bool cross_product, const StrT& strip, const StrT& append, const Flag_Set& cont_flags, const StrT& condition)
		+condition : CondT
		+cont_flags : Flag_Set
		+appending : StrT
		+stripping : StrT
		+check_condition(const StrT& word) : auto {query}
		+to_derived(StrT& word) : auto {query}
		+to_derived_copy(StrT word) : auto {query}
		+to_root(StrT& word) : auto {query}
		+to_root_copy(StrT word) : auto {query}
		+cross_product : bool
		+flag : char16_t
		+CondT : using
		+StrT : using
	}
}

namespace nuspell {
	class Word_List {
		+equal_range(const std::wstring& word) : auto {query}
		+equal_range : using Word_List_Base::
	}
}

namespace nuspell {
	class identity {
		+operator()(T&& t) : constexpr auto&
	}
}

namespace nuspell {
	class sv_eq <template <class CharT>> {
		+operator()(my_string_view<CharT> l, my_string_view<CharT> r) : auto {query}
	}
}

namespace nuspell {
	class sv_hash <template <class CharT>> {
		+operator()(boost::basic_string_view<CharT> s) : auto {query}
	}
}

namespace nuspell {
	enum Affixing_Mode {
		AT_COMPOUND_BEGIN
		AT_COMPOUND_END
		AT_COMPOUND_MIDDLE
		FULL_WORD
	}
}

namespace nuspell {
	enum Flag_Type {
		FLAG_DOUBLE_CHAR
		FLAG_NUMBER
		FLAG_SINGLE_CHAR
		FLAG_UTF8
	}
}

namespace nuspell {
	enum empty {
	}
}

namespace nuspell {
	Aff_Data <|- - Dict_Base
}

namespace nuspell {
	Dict_Base <|- - Basic_Dictionary
}

namespace nuspell {
	Aff_Data "2" o- - Aff_Structures
}

namespace nuspell {
	Aff_Data o- - Compound_Rule_Table
}

namespace nuspell {
	Aff_Data o- - Word_List
}

namespace nuspell {
	Aff_Structures o- - Break_Table
}

namespace nuspell {
	Aff_Structures o- - Compound_Pattern
}

namespace nuspell {
	Aff_Structures o- - Replacement_Table
}

namespace nuspell {
	Aff_Structures o- - Similarity_Group
}

namespace nuspell {
	Aff_Structures "2" o- - Substr_Replacer
}

namespace nuspell {
	Basic_Dictionary o- - Encoding_Details
}

namespace nuspell {
	Compound_Pattern o- - String_Pair
}


@enduml

PlantUML version 1.2018.10(Sat Aug 25 19:02:59 CEST 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 10.0.2+13-Ubuntu-1ubuntu0.18.04.2
Operating System: Linux
OS Version: 4.15.0-34-generic
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>