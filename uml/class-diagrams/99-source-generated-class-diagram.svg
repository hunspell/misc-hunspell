<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="3039px" preserveAspectRatio="none" style="width:5403px;height:3039px;" version="1.1" viewBox="0 0 5403 3039" width="5403px" zoomAndPan="magnify"><defs><linearGradient id="gvhucfnqu5hcf0" x1="0%" x2="100%" y1="50%" y2="50%"><stop offset="0%" stop-color="#FFFFFF"/><stop offset="100%" stop-color="#FFFFFF"/></linearGradient><filter height="300%" id="fvhucfnqu5hcf" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><rect fill="url(#gvhucfnqu5hcf0)" height="3039" style="stroke: none; stroke-width: 1.0;" width="5403" x="0" y="0"/><text fill="#000000" font-family="Roboto Condensed" font-size="18" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="59" x="2674" y="16.6992">Nuspell</text><!--cluster nuspell--><polygon fill="url(#gvhucfnqu5hcf0)" filter="url(#fvhucfnqu5hcf)" points="14,37.0938,67,37.0938,74,59.5,4883,59.5,4883,3027.0938,14,3027.0938,14,37.0938" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="14" x2="74" y1="59.5" y2="59.5"/><text fill="#000000" font-family="Roboto Condensed" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="47" x="18" y="52.082">nuspell</text><!--cluster nuspell::Phonetic_Table--><polygon fill="url(#gvhucfnqu5hcf0)" filter="url(#fvhucfnqu5hcf)" points="4891,353.0938,5054,353.0938,5061,375.5,5137,375.5,5137,513.0938,4891,513.0938,4891,353.0938" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="4891" x2="5061" y1="375.5" y2="375.5"/><text fill="#000000" font-family="Roboto Condensed" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="157" x="4895" y="368.082">nuspell::Phonetic_Table</text><!--cluster nuspell::String_Set--><polygon fill="url(#gvhucfnqu5hcf0)" filter="url(#fvhucfnqu5hcf)" points="5155,389.0938,5286,389.0938,5293,411.5,5381,411.5,5381,477.0938,5155,477.0938,5155,389.0938" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="5155" x2="5293" y1="411.5" y2="411.5"/><text fill="#000000" font-family="Roboto Condensed" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="125" x="5159" y="404.082">nuspell::String_Set</text><!--class nuspell.Aff_Data--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="756.9844" id="nuspell.Aff_Data" style="stroke: #000000; stroke-width: 1.5;" width="384" x="1433" y="64.0938"/><ellipse cx="1599.75" cy="80.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1603.0938,85.5156 Q1602.2344,85.9844 1601.5156,86.1563 Q1600.8125,86.3281 1600.0156,86.3281 Q1597.4531,86.3281 1596.0469,84.5469 Q1594.6563,82.75 1594.6563,79.5625 Q1594.6563,76.4063 1596.0625,74.5938 Q1597.4688,72.7813 1600.0156,72.7813 Q1600.8125,72.7813 1601.5156,72.9688 Q1602.2344,73.1406 1603.0938,73.6094 L1603.0938,76.2656 Q1601.9688,75.3281 1601.3125,75.0938 Q1600.6563,74.8438 1600.0156,74.8438 Q1598.5625,74.8438 1597.8281,75.9844 Q1597.0938,77.1094 1597.0938,79.5625 Q1597.0938,82.0156 1597.8281,83.1563 Q1598.5625,84.2813 1600.0156,84.2813 Q1600.6719,84.2813 1601.3125,84.0469 Q1601.9688,83.7969 1603.0938,82.8594 L1603.0938,85.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="42" x="1620.25" y="84.1953">Aff_Data</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1434" x2="1816" y1="96.0938" y2="96.0938"/><ellipse cx="1444" cy="108.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="1453" y="110.2988">structures : Aff_Structures&lt;char&gt;</text><ellipse cx="1444" cy="120.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="1453" y="123.1895">wide_structures : Aff_Structures&lt;wchar_t&gt;</text><ellipse cx="1444" cy="133.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="1453" y="136.0801">compound_rules : Compound_Rule_Table</text><ellipse cx="1444" cy="146.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="1453" y="148.9707">compound_syllable_num : Flag_Set</text><ellipse cx="1444" cy="159.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="1453" y="161.8613">flag_type : Flag_Type</text><ellipse cx="1444" cy="172.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="1453" y="174.752">words : Word_List</text><ellipse cx="1444" cy="185.3828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="1453" y="187.6426">checksharps : bool</text><ellipse cx="1444" cy="198.2734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="1453" y="200.5332">complex_prefixes : bool</text><ellipse cx="1444" cy="211.1641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="1453" y="213.4238">compound_check_case : bool</text><ellipse cx="1444" cy="224.0547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="1453" y="226.3145">compound_check_duplicate : bool</text><ellipse cx="1444" cy="236.9453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="1453" y="239.2051">compound_check_rep : bool</text><ellipse cx="1444" cy="249.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1453" y="252.0957">compound_check_triple : bool</text><ellipse cx="1444" cy="262.7266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="1453" y="264.9863">compound_more_suffixes : bool</text><ellipse cx="1444" cy="275.6172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="1453" y="277.877">compound_simplified_triple : bool</text><ellipse cx="1444" cy="288.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1453" y="290.7676">forbid_warn : bool</text><ellipse cx="1444" cy="301.3984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="1453" y="303.6582">fullstrip : bool</text><ellipse cx="1444" cy="314.2891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="1453" y="316.5488">no_split_suggestions : bool</text><ellipse cx="1444" cy="327.1797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="1453" y="329.4395">only_max_diff : bool</text><ellipse cx="1444" cy="340.0703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="1453" y="342.3301">suggest_with_dots : bool</text><ellipse cx="1444" cy="352.9609" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="1453" y="355.2207">circumfix_flag : char16_t</text><ellipse cx="1444" cy="365.8516" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="1453" y="368.1113">compound_begin_flag : char16_t</text><ellipse cx="1444" cy="378.7422" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="1453" y="381.002">compound_flag : char16_t</text><ellipse cx="1444" cy="391.6328" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="1453" y="393.8926">compound_forbid_flag : char16_t</text><ellipse cx="1444" cy="404.5234" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="1453" y="406.7832">compound_force_uppercase : char16_t</text><ellipse cx="1444" cy="417.4141" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1453" y="419.6738">compound_last_flag : char16_t</text><ellipse cx="1444" cy="430.3047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="1453" y="432.5645">compound_middle_flag : char16_t</text><ellipse cx="1444" cy="443.1953" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="1453" y="445.4551">compound_onlyin_flag : char16_t</text><ellipse cx="1444" cy="456.0859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="1453" y="458.3457">compound_permit_flag : char16_t</text><ellipse cx="1444" cy="468.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="1453" y="471.2363">compound_root_flag : char16_t</text><ellipse cx="1444" cy="481.8672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1453" y="484.127">forbiddenword_flag : char16_t</text><ellipse cx="1444" cy="494.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="1453" y="497.0176">keepcase_flag : char16_t</text><ellipse cx="1444" cy="507.6484" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="1453" y="509.9082">need_affix_flag : char16_t</text><ellipse cx="1444" cy="520.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="1453" y="522.7988">nosuggest_flag : char16_t</text><ellipse cx="1444" cy="533.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1453" y="535.6895">substandard_flag : char16_t</text><ellipse cx="1444" cy="546.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="1453" y="548.5801">warn_flag : char16_t</text><ellipse cx="1444" cy="559.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1453" y="561.4707">internal_locale : std::locale</text><ellipse cx="1444" cy="572.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="1453" y="574.3613">compound_syllable_vowels : string</text><ellipse cx="1444" cy="584.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1453" y="587.252">wordchars : string</text><ellipse cx="1444" cy="597.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="1453" y="600.1426">compound_max_word_count : unsigned short</text><ellipse cx="1444" cy="610.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1453" y="613.0332">compound_min_length : unsigned short</text><ellipse cx="1444" cy="623.6641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="1453" y="625.9238">compound_syllable_max : unsigned short</text><ellipse cx="1444" cy="636.5547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="1453" y="638.8145">max_compound_suggestions : unsigned short</text><ellipse cx="1444" cy="649.4453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1453" y="651.7051">max_diff_factor : unsigned short</text><ellipse cx="1444" cy="662.3359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1453" y="664.5957">max_ngram_suggestions : unsigned short</text><ellipse cx="1444" cy="675.2266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="1453" y="677.4863">istream : using</text><ellipse cx="1444" cy="688.1172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1453" y="690.377">pair : using</text><ellipse cx="1444" cy="701.0078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="1453" y="703.2676">string : using</text><ellipse cx="1444" cy="713.8984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="1453" y="716.1582">u16string : using</text><ellipse cx="1444" cy="726.7891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1453" y="729.0488">vector : using</text><ellipse cx="1444" cy="739.6797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="1453" y="741.9395">flag_aliases : vector&lt;Flag_Set&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1434" x2="1816" y1="748.625" y2="748.625"/><ellipse cx="1444" cy="760.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="1453" y="762.8301">get_structures() : auto {query}</text><ellipse cx="1444" cy="773.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1453" y="775.7207">parse_aff(istream&amp; in) : auto</text><ellipse cx="1444" cy="786.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="1453" y="788.6113">parse_aff_dic(std::istream&amp; aff, std::istream&amp; dic) : auto</text><ellipse cx="1444" cy="799.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="1453" y="801.502">parse_dic(istream&amp; in) : auto</text><ellipse cx="1444" cy="812.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="1453" y="814.3926">set_encoding_and_language(const string&amp; enc, const string&amp; lang) : auto</text><!--class nuspell.Aff_Structures--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="194.6875" id="nuspell.Aff_Structures" style="stroke: #000000; stroke-width: 1.5;" width="330" x="756" y="1145.0938"/><ellipse cx="823.75" cy="1161.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M827.0938,1166.5156 Q826.2344,1166.9844 825.5156,1167.1563 Q824.8125,1167.3281 824.0156,1167.3281 Q821.4531,1167.3281 820.0469,1165.5469 Q818.6563,1163.75 818.6563,1160.5625 Q818.6563,1157.4063 820.0625,1155.5938 Q821.4688,1153.7813 824.0156,1153.7813 Q824.8125,1153.7813 825.5156,1153.9688 Q826.2344,1154.1406 827.0938,1154.6094 L827.0938,1157.2656 Q825.9688,1156.3281 825.3125,1156.0938 Q824.6563,1155.8438 824.0156,1155.8438 Q822.5625,1155.8438 821.8281,1156.9844 Q821.0938,1158.1094 821.0938,1160.5625 Q821.0938,1163.0156 821.8281,1164.1563 Q822.5625,1165.2813 824.0156,1165.2813 Q824.6719,1165.2813 825.3125,1165.0469 Q825.9688,1164.7969 827.0938,1163.8594 L827.0938,1166.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="73" x="844.25" y="1165.1953">Aff_Structures</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="978" y="1142.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="979" y="1154.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="757" x2="1085" y1="1177.0938" y2="1177.0938"/><ellipse cx="767" cy="1189.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="776" y="1191.2988">break_table : Break_Table&lt;CharT&gt;</text><ellipse cx="767" cy="1201.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="776" y="1204.1895">phonetic_table : Phonetic_Table&lt;CharT&gt;</text><ellipse cx="767" cy="1214.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="776" y="1217.0801">prefixes : Prefix_Table&lt;CharT&gt;</text><ellipse cx="767" cy="1227.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="776" y="1229.9707">replacements : Replacement_Table&lt;CharT&gt;</text><ellipse cx="767" cy="1240.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="776" y="1242.8613">input_substr_replacer : Substr_Replacer&lt;CharT&gt;</text><ellipse cx="767" cy="1253.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="776" y="1255.752">output_substr_replacer : Substr_Replacer&lt;CharT&gt;</text><ellipse cx="767" cy="1266.3828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="776" y="1268.6426">suffixes : Suffix_Table&lt;CharT&gt;</text><ellipse cx="767" cy="1279.2734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="776" y="1281.5332">ignored_chars : std::basic_string&lt;CharT&gt;</text><ellipse cx="767" cy="1292.1641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="776" y="1294.4238">keyboard_closeness : std::basic_string&lt;CharT&gt;</text><ellipse cx="767" cy="1305.0547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="776" y="1307.3145">try_chars : std::basic_string&lt;CharT&gt;</text><ellipse cx="767" cy="1317.9453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="776" y="1320.2051">compound_patterns : std::vector&lt;Compound_Pattern&lt;CharT&gt; &gt;</text><ellipse cx="767" cy="1330.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="776" y="1333.0957">similarities : std::vector&lt;Similarity_Group&lt;CharT&gt; &gt;</text><!--class nuspell.Affix--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="156.0156" id="nuspell.Affix" style="stroke: #000000; stroke-width: 1.5;" width="209" x="2689.5" y="364.5938"/><ellipse cx="2778.25" cy="380.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2781.5938,386.0156 Q2780.7344,386.4844 2780.0156,386.6563 Q2779.3125,386.8281 2778.5156,386.8281 Q2775.9531,386.8281 2774.5469,385.0469 Q2773.1563,383.25 2773.1563,380.0625 Q2773.1563,376.9063 2774.5625,375.0938 Q2775.9688,373.2813 2778.5156,373.2813 Q2779.3125,373.2813 2780.0156,373.4688 Q2780.7344,373.6406 2781.5938,374.1094 L2781.5938,376.7656 Q2780.4688,375.8281 2779.8125,375.5938 Q2779.1563,375.3438 2778.5156,375.3438 Q2777.0625,375.3438 2776.3281,376.4844 Q2775.5938,377.6094 2775.5938,380.0625 Q2775.5938,382.5156 2776.3281,383.6563 Q2777.0625,384.7813 2778.5156,384.7813 Q2779.1719,384.7813 2779.8125,384.5469 Q2780.4688,384.2969 2781.5938,383.3594 L2781.5938,386.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="23" x="2798.75" y="384.6953">Affix</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2690.5" x2="2897.5" y1="396.5938" y2="396.5938"/><ellipse cx="2700.5" cy="408.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2709.5" y="410.7988">new_flags : Flag_Set</text><ellipse cx="2700.5" cy="421.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2709.5" y="423.6895">cross_product : bool</text><ellipse cx="2700.5" cy="434.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2709.5" y="436.5801">flag : char16_t</text><ellipse cx="2700.5" cy="447.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="2709.5" y="449.4707">appending : string</text><ellipse cx="2700.5" cy="460.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="2709.5" y="462.3613">condition : string</text><ellipse cx="2700.5" cy="472.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="2709.5" y="475.252">stripping : string</text><ellipse cx="2700.5" cy="485.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="2709.5" y="488.1426">string : using</text><ellipse cx="2700.5" cy="498.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2709.5" y="501.0332">vector : using</text><ellipse cx="2700.5" cy="511.6641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="2709.5" y="513.9238">morphological_fields : vector&lt;string&gt;</text><!--class nuspell.Affix_Table--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="138.2344" id="nuspell.Affix_Table" style="stroke: #000000; stroke-width: 1.5;" width="324" x="2934" y="373.5938"/><ellipse cx="2975.55" cy="389.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2978.8938,395.0156 Q2978.0344,395.4844 2977.3156,395.6563 Q2976.6125,395.8281 2975.8156,395.8281 Q2973.2531,395.8281 2971.8469,394.0469 Q2970.4563,392.25 2970.4563,389.0625 Q2970.4563,385.9063 2971.8625,384.0938 Q2973.2688,382.2813 2975.8156,382.2813 Q2976.6125,382.2813 2977.3156,382.4688 Q2978.0344,382.6406 2978.8938,383.1094 L2978.8938,385.7656 Q2977.7688,384.8281 2977.1125,384.5938 Q2976.4563,384.3438 2975.8156,384.3438 Q2974.3625,384.3438 2973.6281,385.4844 Q2972.8938,386.6094 2972.8938,389.0625 Q2972.8938,391.5156 2973.6281,392.6563 Q2974.3625,393.7813 2975.8156,393.7813 Q2976.4719,393.7813 2977.1125,393.5469 Q2977.7688,393.2969 2978.8938,392.3594 L2978.8938,395.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="2995.45" y="393.6953">Affix_Table</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="172" x="3089" y="370.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="170" x="3090" y="382.7266">template &lt;class CharT, class AffixT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2935" x2="3257" y1="405.5938" y2="405.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2942" y="414.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2954" y="419.7988">all_cont_flags : Flag_Set</text><ellipse cx="2945" cy="430.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="2954" y="432.6895">base : using</text><ellipse cx="2945" cy="443.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2954" y="445.5801">iterator : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2935" x2="3257" y1="452.2656" y2="452.2656"/><ellipse cx="2945" cy="464.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2954" y="466.4707">emplace(Args&amp;&amp; a) : auto</text><ellipse cx="2945" cy="477.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="2954" y="479.3613">equal_range(my_string_view&lt;CharT&gt; appending) : auto {query}</text><ellipse cx="2945" cy="489.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="2954" y="492.252">has_continuation_flag(char16_t flag) : auto {query}</text><ellipse cx="2945" cy="502.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="2954" y="505.1426">has_continuation_flags() : auto {query}</text><!--class nuspell.Affixing_Result--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="125.3438" id="nuspell.Affixing_Result" style="stroke: #000000; stroke-width: 1.5;" width="401" x="3293.5" y="380.0938"/><ellipse cx="3388.75" cy="396.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3392.0938,401.5156 Q3391.2344,401.9844 3390.5156,402.1563 Q3389.8125,402.3281 3389.0156,402.3281 Q3386.4531,402.3281 3385.0469,400.5469 Q3383.6563,398.75 3383.6563,395.5625 Q3383.6563,392.4063 3385.0625,390.5938 Q3386.4688,388.7813 3389.0156,388.7813 Q3389.8125,388.7813 3390.5156,388.9688 Q3391.2344,389.1406 3392.0938,389.6094 L3392.0938,392.2656 Q3390.9688,391.3281 3390.3125,391.0938 Q3389.6563,390.8438 3389.0156,390.8438 Q3387.5625,390.8438 3386.8281,391.9844 Q3386.0938,393.1094 3386.0938,395.5625 Q3386.0938,398.0156 3386.8281,399.1563 Q3387.5625,400.2813 3389.0156,400.2813 Q3389.6719,400.2813 3390.3125,400.0469 Q3390.9688,399.7969 3392.0938,398.8594 L3392.0938,401.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="3409.25" y="400.1953">Affixing_Result</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="124" x="3573.5" y="377.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="122" x="3574.5" y="389.2266">template &lt;class... Affixes&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3294.5" x2="3693.5" y1="412.0938" y2="412.0938"/><ellipse cx="3304.5" cy="424.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="3313.5" y="426.2988">base_type : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3294.5" x2="3693.5" y1="432.9844" y2="432.9844"/><ellipse cx="3304.5" cy="444.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="3313.5" y="447.1895">Affixing_Result()</text><ellipse cx="3304.5" cy="457.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="375" x="3313.5" y="460.0801">Affixing_Result(Word_List::const_reference word_entry, const Affixes&amp; affixes)</text><ellipse cx="3304.5" cy="470.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="3313.5" y="472.9707">const_pointer() {query}</text><ellipse cx="3304.5" cy="483.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="3313.5" y="485.8613">operator-&gt;() : auto {query}</text><ellipse cx="3304.5" cy="496.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="3313.5" y="498.752">operator*() : auto&amp; {query}</text><!--class nuspell.Basic_Dictionary--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="202.6875" id="nuspell.Basic_Dictionary" style="stroke: #000000; stroke-width: 1.5;" width="577" x="1810.5" y="2108.5938"/><ellipse cx="2052.25" cy="2124.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2055.5938,2130.0156 Q2054.7344,2130.4844 2054.0156,2130.6563 Q2053.3125,2130.8281 2052.5156,2130.8281 Q2049.9531,2130.8281 2048.5469,2129.0469 Q2047.1563,2127.25 2047.1563,2124.0625 Q2047.1563,2120.9063 2048.5625,2119.0938 Q2049.9688,2117.2813 2052.5156,2117.2813 Q2053.3125,2117.2813 2054.0156,2117.4688 Q2054.7344,2117.6406 2055.5938,2118.1094 L2055.5938,2120.7656 Q2054.4688,2119.8281 2053.8125,2119.5938 Q2053.1563,2119.3438 2052.5156,2119.3438 Q2051.0625,2119.3438 2050.3281,2120.4844 Q2049.5938,2121.6094 2049.5938,2124.0625 Q2049.5938,2126.5156 2050.3281,2127.6563 Q2051.0625,2128.7813 2052.5156,2128.7813 Q2053.1719,2128.7813 2053.8125,2128.5469 Q2054.4688,2128.2969 2055.5938,2127.3594 L2055.5938,2130.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="2072.75" y="2128.6953">Basic_Dictionary</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1811.5" x2="2386.5" y1="2140.5938" y2="2140.5938"/><polygon fill="none" points="1821.5,2147.5391,1825.5,2151.5391,1821.5,2155.5391,1817.5,2151.5391" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="1830.5" y="2154.7988">enc_details : Encoding_Details</text><polygon fill="none" points="1821.5,2160.4297,1825.5,2164.4297,1821.5,2168.4297,1817.5,2164.4297" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="1830.5" y="2167.6895">List_Strings_Back_Inserter : friend struct</text><polygon fill="none" points="1821.5,2173.3203,1825.5,2177.3203,1821.5,2181.3203,1817.5,2177.3203" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="1830.5" y="2180.5801">external_locale : std::locale</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1811.5" x2="2386.5" y1="2187.2656" y2="2187.2656"/><ellipse cx="1821.5" cy="2199.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1830.5" y="2201.4707">Basic_Dictionary()</text><polygon fill="#FFFF44" points="1821.5,2207.1016,1825.5,2211.1016,1821.5,2215.1016,1817.5,2211.1016" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="1830.5" y="2214.3613">Basic_Dictionary(std::istream&amp; aff, std::istream&amp; dic)</text><polygon fill="#FFFF44" points="1821.5,2219.9922,1825.5,2223.9922,1821.5,2227.9922,1817.5,2223.9922" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="551" x="1830.5" y="2227.252">external_to_internal_encoding(const std::string&amp; in, std::wstring&amp; wide_out, std::string&amp; narrow_out) : auto {query}</text><ellipse cx="1821.5" cy="2237.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="1830.5" y="2240.1426">imbue(const std::locale&amp; loc) : auto</text><polygon fill="#FFFF44" points="1821.5,2245.7734,1825.5,2249.7734,1821.5,2253.7734,1817.5,2249.7734" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="434" x="1830.5" y="2253.0332">internal_to_external_encoding(std::string&amp; in_out, std::wstring&amp; wide_in_out) : auto {query}</text><ellipse cx="1821.5" cy="2263.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="292" x="1830.5" y="2265.9238">load_from_aff_dic(std::istream&amp; aff, std::istream&amp; dic) : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1830.5" x2="2122.5" y1="2267.9238" y2="2267.9238"/><ellipse cx="1821.5" cy="2276.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="1830.5" y="2278.8145">load_from_aff_dic(const string&amp; file_path_without_extension) : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1830.5" x2="2153.5" y1="2280.8145" y2="2280.8145"/><ellipse cx="1821.5" cy="2289.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="1830.5" y="2291.7051">spell(const std::string&amp; word) : auto {query}</text><ellipse cx="1821.5" cy="2302.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="1830.5" y="2304.5957">suggest(const std::string&amp; word, List_Strings&lt;char&gt;&amp; out) : auto {query}</text><!--class nuspell.Break_Table--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="267.1406" id="nuspell.Break_Table" style="stroke: #000000; stroke-width: 1.5;" width="220" x="22" y="2076.5938"/><ellipse cx="41.05" cy="2092.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M44.3938,2098.0156 Q43.5344,2098.4844 42.8156,2098.6563 Q42.1125,2098.8281 41.3156,2098.8281 Q38.7531,2098.8281 37.3469,2097.0469 Q35.9563,2095.25 35.9563,2092.0625 Q35.9563,2088.9063 37.3625,2087.0938 Q38.7688,2085.2813 41.3156,2085.2813 Q42.1125,2085.2813 42.8156,2085.4688 Q43.5344,2085.6406 44.3938,2086.1094 L44.3938,2088.7656 Q43.2688,2087.8281 42.6125,2087.5938 Q41.9563,2087.3438 41.3156,2087.3438 Q39.8625,2087.3438 39.1281,2088.4844 Q38.3938,2089.6094 38.3938,2092.0625 Q38.3938,2094.5156 39.1281,2095.6563 Q39.8625,2096.7813 41.3156,2096.7813 Q41.9719,2096.7813 42.6125,2096.5469 Q43.2688,2096.2969 44.3938,2095.3594 L44.3938,2098.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="55.95" y="2096.6953">Break_Table</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="134" y="2073.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="135" y="2085.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="23" x2="241" y1="2108.5938" y2="2108.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2117.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="42" y="2122.7988">table : Table_Str</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2130.4297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="42" y="2135.6895">end_word_breaks_last_idx : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2143.3203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="42" y="2148.5801">start_word_breaks_last_idx : size_t</text><ellipse cx="33" cy="2159.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="42" y="2161.4707">StrT : using</text><ellipse cx="33" cy="2172.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="42" y="2174.3613">Table_Str : using</text><ellipse cx="33" cy="2184.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="42" y="2187.252">const_iterator : using</text><ellipse cx="33" cy="2197.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="42" y="2200.1426">iterator : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="23" x2="241" y1="2206.8281" y2="2206.8281"/><ellipse cx="33" cy="2218.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="42" y="2221.0332">Break_Table()</text><ellipse cx="33" cy="2231.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="42" y="2233.9238">Break_Table(const Table_Str&amp; v)</text><ellipse cx="33" cy="2244.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="42" y="2246.8145">Break_Table(Table_Str&amp;&amp; v)</text><ellipse cx="33" cy="2257.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="42" y="2259.7051">end_word_breaks() : auto {query}</text><ellipse cx="33" cy="2270.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="42" y="2272.5957">middle_word_breaks() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2280.2266"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="42" y="2285.4863">order_entries() : auto</text><ellipse cx="33" cy="2296.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="42" y="2298.377">start_word_breaks() : auto {query}</text><ellipse cx="33" cy="2309.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="42" y="2311.2676">operator=(const Table_Str&amp; v) : auto&amp;</text><ellipse cx="33" cy="2321.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="42" y="2324.1582">operator=(Table_Str&amp;&amp; v) : auto&amp;</text><ellipse cx="33" cy="2334.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="42" y="2337.0488">operator=(const Range&amp; range) : auto&amp;</text><!--class nuspell.Casing--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="32" id="nuspell.Casing" style="stroke: #000000; stroke-width: 1.5;" width="67" x="3729.5" y="426.5938"/><ellipse cx="3744.5" cy="442.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3747.8438,448.0156 Q3746.9844,448.4844 3746.2656,448.6563 Q3745.5625,448.8281 3744.7656,448.8281 Q3742.2031,448.8281 3740.7969,447.0469 Q3739.4063,445.25 3739.4063,442.0625 Q3739.4063,438.9063 3740.8125,437.0938 Q3742.2188,435.2813 3744.7656,435.2813 Q3745.5625,435.2813 3746.2656,435.4688 Q3746.9844,435.6406 3747.8438,436.1094 L3747.8438,438.7656 Q3746.7188,437.8281 3746.0625,437.5938 Q3745.4063,437.3438 3744.7656,437.3438 Q3743.3125,437.3438 3742.5781,438.4844 Q3741.8438,439.6094 3741.8438,442.0625 Q3741.8438,444.5156 3742.5781,445.6563 Q3743.3125,446.7813 3744.7656,446.7813 Q3745.4219,446.7813 3746.0625,446.5469 Q3746.7188,446.2969 3747.8438,445.3594 L3747.8438,448.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="35" x="3758.5" y="446.6953">Casing</text><!--class nuspell.Compound_Check_Pattern--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="117.3438" id="nuspell.Compound_Check_Pattern" style="stroke: #000000; stroke-width: 1.5;" width="167" x="3831.5" y="384.0938"/><ellipse cx="3846.5" cy="400.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3849.8438,405.5156 Q3848.9844,405.9844 3848.2656,406.1563 Q3847.5625,406.3281 3846.7656,406.3281 Q3844.2031,406.3281 3842.7969,404.5469 Q3841.4063,402.75 3841.4063,399.5625 Q3841.4063,396.4063 3842.8125,394.5938 Q3844.2188,392.7813 3846.7656,392.7813 Q3847.5625,392.7813 3848.2656,392.9688 Q3848.9844,393.1406 3849.8438,393.6094 L3849.8438,396.2656 Q3848.7188,395.3281 3848.0625,395.0938 Q3847.4063,394.8438 3846.7656,394.8438 Q3845.3125,394.8438 3844.5781,395.9844 Q3843.8438,397.1094 3843.8438,399.5625 Q3843.8438,402.0156 3844.5781,403.1563 Q3845.3125,404.2813 3846.7656,404.2813 Q3847.4219,404.2813 3848.0625,404.0469 Q3848.7188,403.7969 3849.8438,402.8594 L3849.8438,405.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="135" x="3860.5" y="404.1953">Compound_Check_Pattern</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3832.5" x2="3997.5" y1="416.0938" y2="416.0938"/><ellipse cx="3842.5" cy="428.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="3851.5" y="430.2988">first_word_flag : char16_t</text><ellipse cx="3842.5" cy="440.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="3851.5" y="443.1895">second_word_flag : char16_t</text><ellipse cx="3842.5" cy="453.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3851.5" y="456.0801">first_word_end : string</text><ellipse cx="3842.5" cy="466.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="3851.5" y="468.9707">replacement : string</text><ellipse cx="3842.5" cy="479.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="3851.5" y="481.8613">second_word_begin : string</text><ellipse cx="3842.5" cy="492.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="3851.5" y="494.752">string : using</text><!--class nuspell.Compound_Pattern--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="117.3438" id="nuspell.Compound_Pattern" style="stroke: #000000; stroke-width: 1.5;" width="262" x="277" y="2151.5938"/><ellipse cx="301" cy="2167.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M304.3438,2173.0156 Q303.4844,2173.4844 302.7656,2173.6563 Q302.0625,2173.8281 301.2656,2173.8281 Q298.7031,2173.8281 297.2969,2172.0469 Q295.9063,2170.25 295.9063,2167.0625 Q295.9063,2163.9063 297.3125,2162.0938 Q298.7188,2160.2813 301.2656,2160.2813 Q302.0625,2160.2813 302.7656,2160.4688 Q303.4844,2160.6406 304.3438,2161.1094 L304.3438,2163.7656 Q303.2188,2162.8281 302.5625,2162.5938 Q301.9063,2162.3438 301.2656,2162.3438 Q299.8125,2162.3438 299.0781,2163.4844 Q298.3438,2164.6094 298.3438,2167.0625 Q298.3438,2169.5156 299.0781,2170.6563 Q299.8125,2171.7813 301.2656,2171.7813 Q301.9219,2171.7813 302.5625,2171.5469 Q303.2188,2171.2969 304.3438,2170.3594 L304.3438,2173.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="97" x="317" y="2171.6953">Compound_Pattern</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="431" y="2148.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="432" y="2160.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="278" x2="538" y1="2183.5938" y2="2183.5938"/><ellipse cx="288" cy="2195.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="297" y="2197.7988">replacement : StrT</text><ellipse cx="288" cy="2208.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="297" y="2210.6895">begin_end_chars : String_Pair&lt;CharT&gt;</text><ellipse cx="288" cy="2221.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="297" y="2223.5801">match_first_only_unaffixed_or_zero_affixed : bool</text><ellipse cx="288" cy="2234.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="297" y="2236.4707">first_word_flag : char16_t</text><ellipse cx="288" cy="2247.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="297" y="2249.3613">second_word_flag : char16_t</text><ellipse cx="288" cy="2259.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="297" y="2262.252">StrT : using</text><!--class nuspell.Compound_Rule_Table--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="189.7969" id="nuspell.Compound_Rule_Table" style="stroke: #000000; stroke-width: 1.5;" width="369" x="1121.5" y="1147.5938"/><ellipse cx="1241.75" cy="1163.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1245.0938,1169.0156 Q1244.2344,1169.4844 1243.5156,1169.6563 Q1242.8125,1169.8281 1242.0156,1169.8281 Q1239.4531,1169.8281 1238.0469,1168.0469 Q1236.6563,1166.25 1236.6563,1163.0625 Q1236.6563,1159.9063 1238.0625,1158.0938 Q1239.4688,1156.2813 1242.0156,1156.2813 Q1242.8125,1156.2813 1243.5156,1156.4688 Q1244.2344,1156.6406 1245.0938,1157.1094 L1245.0938,1159.7656 Q1243.9688,1158.8281 1243.3125,1158.5938 Q1242.6563,1158.3438 1242.0156,1158.3438 Q1240.5625,1158.3438 1239.8281,1159.4844 Q1239.0938,1160.6094 1239.0938,1163.0625 Q1239.0938,1165.5156 1239.8281,1166.6563 Q1240.5625,1167.7813 1242.0156,1167.7813 Q1242.6719,1167.7813 1243.3125,1167.5469 Q1243.9688,1167.2969 1245.0938,1166.3594 L1245.0938,1169.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="120" x="1262.25" y="1167.6953">Compound_Rule_Table</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1122.5" x2="1489.5" y1="1179.5938" y2="1179.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1129.5" y="1188.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1141.5" y="1193.7988">all_flags : Flag_Set</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1129.5" y="1201.4297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1141.5" y="1206.6895">rules : std::vector&lt;std::u16string&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1122.5" x2="1489.5" y1="1213.375" y2="1213.375"/><ellipse cx="1132.5" cy="1225.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1141.5" y="1227.5801">Compound_Rule_Table()</text><ellipse cx="1132.5" cy="1238.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="1141.5" y="1240.4707">Compound_Rule_Table(const std::vector&lt;std::u16string&gt;&amp; tbl)</text><ellipse cx="1132.5" cy="1251.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="1141.5" y="1253.3613">Compound_Rule_Table(std::vector&lt;std::u16string&gt;&amp;&amp; tbl)</text><ellipse cx="1132.5" cy="1263.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1141.5" y="1266.252">empty() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1129.5" y="1273.8828"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="1141.5" y="1279.1426">fill_all_flags() : auto</text><ellipse cx="1132.5" cy="1289.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="1141.5" y="1292.0332">has_any_of_flags(const Flag_Set&amp; f) : auto {query}</text><ellipse cx="1132.5" cy="1302.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="1141.5" y="1304.9238">match_any_rule(const std::vector&lt;const Flag_Set*&gt; data) : auto {query}</text><ellipse cx="1132.5" cy="1315.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="1141.5" y="1317.8145">operator=(const std::vector&lt;std::u16string&gt;&amp; tbl) : auto</text><ellipse cx="1132.5" cy="1328.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="1141.5" y="1330.7051">operator=(std::vector&lt;std::u16string&gt;&amp;&amp; tbl) : auto</text><!--class nuspell.Compounding_Result--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="78.6719" id="nuspell.Compounding_Result" style="stroke: #000000; stroke-width: 1.5;" width="156" x="2716" y="1203.0938"/><ellipse cx="2737.75" cy="1219.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2741.0938,1224.5156 Q2740.2344,1224.9844 2739.5156,1225.1563 Q2738.8125,1225.3281 2738.0156,1225.3281 Q2735.4531,1225.3281 2734.0469,1223.5469 Q2732.6563,1221.75 2732.6563,1218.5625 Q2732.6563,1215.4063 2734.0625,1213.5938 Q2735.4688,1211.7813 2738.0156,1211.7813 Q2738.8125,1211.7813 2739.5156,1211.9688 Q2740.2344,1212.1406 2741.0938,1212.6094 L2741.0938,1215.2656 Q2739.9688,1214.3281 2739.3125,1214.0938 Q2738.6563,1213.8438 2738.0156,1213.8438 Q2736.5625,1213.8438 2735.8281,1214.9844 Q2735.0938,1216.1094 2735.0938,1218.5625 Q2735.0938,1221.0156 2735.8281,1222.1563 Q2736.5625,1223.2813 2738.0156,1223.2813 Q2738.6719,1223.2813 2739.3125,1223.0469 Q2739.9688,1222.7969 2741.0938,1221.8594 L2741.0938,1224.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="109" x="2753.25" y="1223.1953">Compounding_Result</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2717" x2="2871" y1="1235.0938" y2="1235.0938"/><ellipse cx="2727" cy="1247.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="2736" y="1249.2988">const_pointer() {query}</text><ellipse cx="2727" cy="1259.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="2736" y="1262.1895">operator-&gt;() : auto {query}</text><ellipse cx="2727" cy="1272.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="2736" y="1275.0801">operator*() : auto&amp; {query}</text><!--class nuspell.Condition--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="215.5781" id="nuspell.Condition" style="stroke: #000000; stroke-width: 1.5;" width="305" x="2907.5" y="1134.5938"/><ellipse cx="2974.75" cy="1150.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2978.0938,1156.0156 Q2977.2344,1156.4844 2976.5156,1156.6563 Q2975.8125,1156.8281 2975.0156,1156.8281 Q2972.4531,1156.8281 2971.0469,1155.0469 Q2969.6563,1153.25 2969.6563,1150.0625 Q2969.6563,1146.9063 2971.0625,1145.0938 Q2972.4688,1143.2813 2975.0156,1143.2813 Q2975.8125,1143.2813 2976.5156,1143.4688 Q2977.2344,1143.6406 2978.0938,1144.1094 L2978.0938,1146.7656 Q2976.9688,1145.8281 2976.3125,1145.5938 Q2975.6563,1145.3438 2975.0156,1145.3438 Q2973.5625,1145.3438 2972.8281,1146.4844 Q2972.0938,1147.6094 2972.0938,1150.0625 Q2972.0938,1152.5156 2972.8281,1153.6563 Q2973.5625,1154.7813 2975.0156,1154.7813 Q2975.6719,1154.7813 2976.3125,1154.5469 Q2976.9688,1154.2969 2978.0938,1153.3594 L2978.0938,1156.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="49" x="2995.25" y="1154.6953">Condition</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="3104.5" y="1131.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="3105.5" y="1143.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2908.5" x2="3211.5" y1="1166.5938" y2="1166.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2915.5" y="1175.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53" x="2927.5" y="1180.7988">cond : StrT</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2915.5" y="1188.4297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2927.5" y="1193.6895">length : size_t</text><ellipse cx="2918.5" cy="1204.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="2927.5" y="1206.5801">StrT : using</text><ellipse cx="2918.5" cy="1217.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="2927.5" y="1219.4707">tuple : using</text><ellipse cx="2918.5" cy="1230.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2927.5" y="1232.3613">vector : using</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2915.5" y="1239.9922"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="2927.5" y="1245.252">spans : vector&lt;tuple&lt;size_t, size_t, Span_Type&gt; &gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2908.5" x2="3211.5" y1="1251.9375" y2="1251.9375"/><ellipse cx="2918.5" cy="1263.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="2927.5" y="1266.1426">Condition()</text><ellipse cx="2918.5" cy="1276.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="2927.5" y="1279.0332">Condition(const StrT&amp; condition)</text><ellipse cx="2918.5" cy="1289.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2927.5" y="1291.9238">Condition(StrT&amp;&amp; condition)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2915.5" y="1299.5547"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2927.5" y="1304.8145">construct() : auto</text><ellipse cx="2918.5" cy="1315.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="2927.5" y="1317.7051">match(const StrT&amp; s, size_t pos, size_t len) : auto {query}</text><ellipse cx="2918.5" cy="1328.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="2927.5" y="1330.5957">match_prefix(const StrT&amp; s) : auto {query}</text><ellipse cx="2918.5" cy="1341.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="2927.5" y="1343.4863">match_suffix(const StrT&amp; s) : auto {query}</text><!--class nuspell.Dict_Base--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="723.2031" id="nuspell.Dict_Base" style="stroke: #000000; stroke-width: 1.5;" width="838" x="1526" y="881.0938"/><ellipse cx="1915.25" cy="897.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1918.5938,902.5156 Q1917.7344,902.9844 1917.0156,903.1563 Q1916.3125,903.3281 1915.5156,903.3281 Q1912.9531,903.3281 1911.5469,901.5469 Q1910.1563,899.75 1910.1563,896.5625 Q1910.1563,893.4063 1911.5625,891.5938 Q1912.9688,889.7813 1915.5156,889.7813 Q1916.3125,889.7813 1917.0156,889.9688 Q1917.7344,890.1406 1918.5938,890.6094 L1918.5938,893.2656 Q1917.4688,892.3281 1916.8125,892.0938 Q1916.1563,891.8438 1915.5156,891.8438 Q1914.0625,891.8438 1913.3281,892.9844 Q1912.5938,894.1094 1912.5938,896.5625 Q1912.5938,899.0156 1913.3281,900.1563 Q1914.0625,901.2813 1915.5156,901.2813 Q1916.1719,901.2813 1916.8125,901.0469 Q1917.4688,900.7969 1918.5938,899.8594 L1918.5938,902.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="51" x="1935.75" y="901.1953">Dict_Base</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1527" x2="2363" y1="913.0938" y2="913.0938"/><ellipse cx="1537" cy="925.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1546" y="927.2988">Dict_Base()</text><ellipse cx="1537" cy="937.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="445" x="1546" y="940.1895">add_sug_if_correct(std::basic_string&lt;CharT&gt;&amp; word, List_Strings&lt;CharT&gt;&amp; out) : auto {query}</text><ellipse cx="1537" cy="950.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="1546" y="953.0801">affix_NOT_valid(const Prefix&lt;CharT&gt;&amp; a) : auto {query}</text><ellipse cx="1537" cy="963.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="1546" y="965.9707">affix_NOT_valid(const Suffix&lt;CharT&gt;&amp; a) : auto {query}</text><ellipse cx="1537" cy="976.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="442" x="1546" y="978.8613">bad_char_suggest(std::basic_string&lt;CharT&gt;&amp; word, List_Strings&lt;CharT&gt;&amp; out) : auto {query}</text><ellipse cx="1537" cy="989.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="1546" y="991.752">check_compound(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1002.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="631" x="1546" y="1004.6426">check_compound(std::basic_string&lt;CharT&gt;&amp; word, size_t start_pos, size_t num_part, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1537" cy="1015.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="711" x="1546" y="1017.5332">check_compound_classic(std::basic_string&lt;CharT&gt;&amp; word, size_t start_pos, size_t i, size_t num_part, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1537" cy="1028.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="803" x="1546" y="1030.4238">check_compound_with_pattern_replacements(std::basic_string&lt;CharT&gt;&amp; word, size_t start_pos, size_t i, size_t num_part, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1537" cy="1041.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="812" x="1546" y="1043.3145">check_compound_with_rules(std::basic_string&lt;CharT&gt;&amp; word, std::vector&lt;const Flag_Set*&gt;&amp; words_data, size_t start_pos, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1537" cy="1053.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="1546" y="1056.2051">check_word(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1066.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="1546" y="1069.0957">check_word_in_compound(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1079.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="448" x="1546" y="1081.9863">extra_char_suggest(std::basic_string&lt;CharT&gt;&amp; word, List_Strings&lt;CharT&gt;&amp; out) : auto {query}</text><ellipse cx="1537" cy="1092.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="469" x="1546" y="1094.877">forgotten_char_suggest(std::basic_string&lt;CharT&gt;&amp; word, List_Strings&lt;CharT&gt;&amp; out) : auto {query}</text><ellipse cx="1537" cy="1105.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="1546" y="1107.7676">is_circumfix(const AffixT&amp; a) : auto {query}</text><ellipse cx="1537" cy="1118.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="1546" y="1120.6582">is_valid_inside_compound(const Flag_Set&amp; flags) : auto {query}</text><ellipse cx="1537" cy="1131.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="443" x="1546" y="1133.5488">keyboard_suggest(std::basic_string&lt;CharT&gt;&amp; word, List_Strings&lt;CharT&gt;&amp; out) : auto {query}</text><ellipse cx="1537" cy="1144.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="459" x="1546" y="1146.4395">map_suggest(std::basic_string&lt;CharT&gt;&amp; word, List_Strings&lt;CharT&gt;&amp; out, size_t i) : auto {query}</text><ellipse cx="1537" cy="1157.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="1546" y="1159.3301">outer_affix_NOT_valid(const AffixT&amp; a) : auto {query}</text><ellipse cx="1537" cy="1169.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="441" x="1546" y="1172.2207">phonetic_suggest(std::basic_string&lt;CharT&gt;&amp; word, List_Strings&lt;CharT&gt;&amp; out) : auto {query}</text><ellipse cx="1537" cy="1182.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="414" x="1546" y="1185.1113">rep_suggest(std::basic_string&lt;CharT&gt;&amp; word, List_Strings&lt;CharT&gt;&amp; out) : auto {query}</text><ellipse cx="1537" cy="1195.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="329" x="1546" y="1198.002">spell_break(std::basic_string&lt;CharT&gt;&amp; s, size_t depth) : auto {query}</text><ellipse cx="1537" cy="1208.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="1546" y="1210.8926">spell_casing(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1221.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="1546" y="1223.7832">spell_casing_title(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1234.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="1546" y="1236.6738">spell_casing_upper(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1247.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="1546" y="1249.5645">spell_priv(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1260.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="1546" y="1262.4551">spell_sharps(std::basic_string&lt;CharT&gt;&amp; base, size_t n_pos, size_t n, size_t rep) : auto {query}</text><ellipse cx="1537" cy="1273.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="570" x="1546" y="1275.3457">strip_2_pfx_sfx_3(const Prefix&lt;CharT&gt;&amp; pe1, const Prefix&lt;CharT&gt;&amp; pe2, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1285.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="1546" y="1288.2363">strip_2_prefixes_then_suffix(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1298.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="568" x="1546" y="1301.127">strip_2_sfx_pfx_3(const Suffix&lt;CharT&gt;&amp; se1, const Suffix&lt;CharT&gt;&amp; se2, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1311.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="1546" y="1314.0176">strip_2_suffixes_then_prefix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1324.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="553" x="1546" y="1326.9082">strip_p_s_p_3(const Prefix&lt;CharT&gt;&amp; pe1, const Suffix&lt;CharT&gt;&amp; se1, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1337.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="551" x="1546" y="1339.7988">strip_pfx_2_sfx_3(const Prefix&lt;CharT&gt;&amp; pe1, const Suffix&lt;CharT&gt;&amp; se1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1350.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="435" x="1546" y="1352.6895">strip_pfx_then_pfx_2(const Prefix&lt;CharT&gt;&amp; pe1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1363.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="429" x="1546" y="1365.5801">strip_pfx_then_sfx_2(const Prefix&lt;CharT&gt;&amp; pe, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1376.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="1546" y="1378.4707">strip_pfx_then_sfx_comm_2(const Prefix&lt;CharT&gt;&amp; pe, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1389.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="1546" y="1391.3613">strip_prefix_only(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1401.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="1546" y="1404.252">strip_prefix_suffix_prefix(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1414.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="1546" y="1417.1426">strip_prefix_then_2_suffixes(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1427.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="1546" y="1430.0332">strip_prefix_then_prefix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1440.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="1546" y="1442.9238">strip_prefix_then_suffix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1453.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="403" x="1546" y="1455.8145">strip_prefix_then_suffix_commutative(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1466.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="553" x="1546" y="1468.7051">strip_s_p_s_3(const Suffix&lt;CharT&gt;&amp; se1, const Prefix&lt;CharT&gt;&amp; pe1, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1479.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="551" x="1546" y="1481.5957">strip_sfx_2_pfx_3(const Suffix&lt;CharT&gt;&amp; se1, const Prefix&lt;CharT&gt;&amp; pe1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1492.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="428" x="1546" y="1494.4863">strip_sfx_then_pfx_2(const Suffix&lt;CharT&gt;&amp; se, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1505.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="434" x="1546" y="1507.377">strip_sfx_then_sfx_2(const Suffix&lt;CharT&gt;&amp; se1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1518.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="1546" y="1520.2676">strip_suffix_only(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1530.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="1546" y="1533.1582">strip_suffix_prefix_suffix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1543.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="1546" y="1546.0488">strip_suffix_then_2_prefixes(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1556.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="1546" y="1558.9395">strip_suffix_then_prefix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1569.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="1546" y="1571.8301">strip_suffix_then_suffix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1582.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="416" x="1546" y="1584.7207">suggest_priv(std::basic_string&lt;CharT&gt;&amp; word, List_Strings&lt;CharT&gt;&amp; out) : auto {query}</text><ellipse cx="1537" cy="1595.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="446" x="1546" y="1597.6113">try_rep_suggestion(std::basic_string&lt;CharT&gt;&amp; word, List_Strings&lt;CharT&gt;&amp; out) : auto {query}</text><!--class nuspell.Encoding--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="241.3594" id="nuspell.Encoding" style="stroke: #000000; stroke-width: 1.5;" width="216" x="3248" y="1122.0938"/><ellipse cx="3327.25" cy="1138.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3330.5938,1143.5156 Q3329.7344,1143.9844 3329.0156,1144.1563 Q3328.3125,1144.3281 3327.5156,1144.3281 Q3324.9531,1144.3281 3323.5469,1142.5469 Q3322.1563,1140.75 3322.1563,1137.5625 Q3322.1563,1134.4063 3323.5625,1132.5938 Q3324.9688,1130.7813 3327.5156,1130.7813 Q3328.3125,1130.7813 3329.0156,1130.9688 Q3329.7344,1131.1406 3330.5938,1131.6094 L3330.5938,1134.2656 Q3329.4688,1133.3281 3328.8125,1133.0938 Q3328.1563,1132.8438 3327.5156,1132.8438 Q3326.0625,1132.8438 3325.3281,1133.9844 Q3324.5938,1135.1094 3324.5938,1137.5625 Q3324.5938,1140.0156 3325.3281,1141.1563 Q3326.0625,1142.2813 3327.5156,1142.2813 Q3328.1719,1142.2813 3328.8125,1142.0469 Q3329.4688,1141.7969 3330.5938,1140.8594 L3330.5938,1143.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="49" x="3347.75" y="1142.1953">Encoding</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3249" x2="3463" y1="1154.0938" y2="1154.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3256" y="1163.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="3268" y="1168.2988">name : std::string</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3249" x2="3463" y1="1174.9844" y2="1174.9844"/><ellipse cx="3259" cy="1186.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="54" x="3268" y="1189.1895">Encoding()</text><ellipse cx="3259" cy="1199.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="3268" y="1202.0801">Encoding(const std::string&amp; e)</text><ellipse cx="3259" cy="1212.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3268" y="1214.9707">Encoding(std::string&amp;&amp; e)</text><ellipse cx="3259" cy="1225.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="3268" y="1227.8613">Encoding(const char* e)</text><ellipse cx="3259" cy="1238.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="3268" y="1240.752">operatorEnc_Type() {query}</text><ellipse cx="3259" cy="1251.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="3268" y="1253.6426">string&amp;() {query}</text><ellipse cx="3259" cy="1264.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3268" y="1266.5332">empty() : auto {query}</text><ellipse cx="3259" cy="1277.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3268" y="1279.4238">is_utf8() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3256" y="1287.0547"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="3268" y="1292.3145">normalize_name() : auto</text><ellipse cx="3259" cy="1302.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="3268" y="1305.2051">value_or_default() : auto</text><ellipse cx="3259" cy="1315.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3268" y="1318.0957">operator=(const std::string&amp; e) : auto&amp;</text><ellipse cx="3259" cy="1328.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="3268" y="1330.9863">operator=(std::string&amp;&amp; e) : auto&amp;</text><ellipse cx="3259" cy="1341.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="3268" y="1343.877">operator=(const char* e) : auto&amp;</text><ellipse cx="3259" cy="1354.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="3268" y="1356.7676">value() : auto&amp; {query}</text><!--class nuspell.Encoding_Details--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="32" id="nuspell.Encoding_Details" style="stroke: #000000; stroke-width: 1.5;" width="121" x="2038.5" y="2901.5938"/><ellipse cx="2053.5" cy="2917.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2056.8438,2923.0156 Q2055.9844,2923.4844 2055.2656,2923.6563 Q2054.5625,2923.8281 2053.7656,2923.8281 Q2051.2031,2923.8281 2049.7969,2922.0469 Q2048.4063,2920.25 2048.4063,2917.0625 Q2048.4063,2913.9063 2049.8125,2912.0938 Q2051.2188,2910.2813 2053.7656,2910.2813 Q2054.5625,2910.2813 2055.2656,2910.4688 Q2055.9844,2910.6406 2056.8438,2911.1094 L2056.8438,2913.7656 Q2055.7188,2912.8281 2055.0625,2912.5938 Q2054.4063,2912.3438 2053.7656,2912.3438 Q2052.3125,2912.3438 2051.5781,2913.4844 Q2050.8438,2914.6094 2050.8438,2917.0625 Q2050.8438,2919.5156 2051.5781,2920.6563 Q2052.3125,2921.7813 2053.7656,2921.7813 Q2054.4219,2921.7813 2055.0625,2921.5469 Q2055.7188,2921.2969 2056.8438,2920.3594 L2056.8438,2923.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="89" x="2067.5" y="2921.6953">Encoding_Details</text><!--class nuspell.Finder--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="267.1406" id="nuspell.Finder" style="stroke: #000000; stroke-width: 1.5;" width="277" x="3499.5" y="1109.0938"/><ellipse cx="3617.25" cy="1125.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3620.5938,1130.5156 Q3619.7344,1130.9844 3619.0156,1131.1563 Q3618.3125,1131.3281 3617.5156,1131.3281 Q3614.9531,1131.3281 3613.5469,1129.5469 Q3612.1563,1127.75 3612.1563,1124.5625 Q3612.1563,1121.4063 3613.5625,1119.5938 Q3614.9688,1117.7813 3617.5156,1117.7813 Q3618.3125,1117.7813 3619.0156,1117.9688 Q3619.7344,1118.1406 3620.5938,1118.6094 L3620.5938,1121.2656 Q3619.4688,1120.3281 3618.8125,1120.0938 Q3618.1563,1119.8438 3617.5156,1119.8438 Q3616.0625,1119.8438 3615.3281,1120.9844 Q3614.5938,1122.1094 3614.5938,1124.5625 Q3614.5938,1127.0156 3615.3281,1128.1563 Q3616.0625,1129.2813 3617.5156,1129.2813 Q3618.1719,1129.2813 3618.8125,1129.0469 Q3619.4688,1128.7969 3620.5938,1127.8594 L3620.5938,1130.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="33" x="3637.75" y="1129.1953">Finder</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3500.5" x2="3775.5" y1="1141.0938" y2="1141.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3507.5" y="1150.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="3519.5" y="1155.2988">dictionaries : Dict_List</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3507.5" y="1162.9297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3519.5" y="1168.1895">paths : std::vector&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3507.5" y="1175.8203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3519.5" y="1181.0801">Dict_List : using</text><ellipse cx="3510.5" cy="1191.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3519.5" y="1193.9707">const_iterator : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3500.5" x2="3775.5" y1="1200.6563" y2="1200.6563"/><ellipse cx="3510.5" cy="1212.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="3519.5" y="1214.8613">add_apacheopenoffice_paths() : auto</text><ellipse cx="3510.5" cy="1225.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="3519.5" y="1227.752">add_default_paths() : auto</text><ellipse cx="3510.5" cy="1238.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="3519.5" y="1240.6426">add_libreoffice_paths() : auto</text><ellipse cx="3510.5" cy="1251.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="3519.5" y="1253.5332">add_mozilla_paths() : auto</text><ellipse cx="3510.5" cy="1264.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="3519.5" y="1266.4238">begin() : auto {query}</text><ellipse cx="3510.5" cy="1277.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="3519.5" y="1279.3145">end() : auto {query}</text><ellipse cx="3510.5" cy="1289.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="3519.5" y="1292.2051">equal_range(const std::string&amp; dict) : auto {query}</text><ellipse cx="3510.5" cy="1302.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="3519.5" y="1305.0957">find(const std::string&amp; dict) : auto {query}</text><ellipse cx="3510.5" cy="1315.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="3519.5" y="1317.9863">get_dictionary(const std::string&amp; dict) : auto {query}</text><ellipse cx="3510.5" cy="1328.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="3519.5" y="1330.877">search_dictionaries() : auto</text><ellipse cx="3510.5" cy="1341.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="196" x="3519.5" y="1343.7676">search_dictionaries_in_all_paths() : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="3519.5" x2="3715.5" y1="1345.7676" y2="1345.7676"/><ellipse cx="3510.5" cy="1354.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="3519.5" y="1356.6582">get_all_dictionaries() : auto&amp; {query}</text><ellipse cx="3510.5" cy="1367.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="3519.5" y="1369.5488">get_all_paths() : auto&amp; {query}</text><!--class nuspell.Hash_Multiset--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="370.2656" id="nuspell.Hash_Multiset" style="stroke: #000000; stroke-width: 1.5;" width="737" x="3811.5" y="1057.5938"/><ellipse cx="3826.5" cy="1073.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3829.8438,1079.0156 Q3828.9844,1079.4844 3828.2656,1079.6563 Q3827.5625,1079.8281 3826.7656,1079.8281 Q3824.2031,1079.8281 3822.7969,1078.0469 Q3821.4063,1076.25 3821.4063,1073.0625 Q3821.4063,1069.9063 3822.8125,1068.0938 Q3824.2188,1066.2813 3826.7656,1066.2813 Q3827.5625,1066.2813 3828.2656,1066.4688 Q3828.9844,1066.6406 3829.8438,1067.1094 L3829.8438,1069.7656 Q3828.7188,1068.8281 3828.0625,1068.5938 Q3827.4063,1068.3438 3826.7656,1068.3438 Q3825.3125,1068.3438 3824.5781,1069.4844 Q3823.8438,1070.6094 3823.8438,1073.0625 Q3823.8438,1075.5156 3824.5781,1076.6563 Q3825.3125,1077.7813 3826.7656,1077.7813 Q3827.4219,1077.7813 3828.0625,1077.5469 Q3828.7188,1077.2969 3829.8438,1076.3594 L3829.8438,1079.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="71" x="3840.5" y="1077.6953">Hash_Multiset</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="632" x="3919.5" y="1054.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="630" x="3920.5" y="1066.7266">template &lt;class Value, class Key = Value, class KeyExtract = identity, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3812.5" x2="4547.5" y1="1089.5938" y2="1089.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3819.5" y="1098.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="3831.5" y="1103.7988">max_load_factor_capacity : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3819.5" y="1111.4297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="3831.5" y="1116.6895">sz : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3819.5" y="1124.3203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="181" x="3831.5" y="1129.5801">max_load_fact : static constexpr float</text><line style="stroke: #000000; stroke-width: 1.0;" x1="3831.5" x2="4012.5" y1="1131.5801" y2="1131.5801"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3819.5" y="1137.2109"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="3831.5" y="1142.4707">data : std::vector&lt;bucket_type&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3819.5" y="1150.1016"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="3831.5" y="1155.3613">bucket_type : using</text><ellipse cx="3822.5" cy="1165.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3831.5" y="1168.252">const_pointer : using</text><ellipse cx="3822.5" cy="1178.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="3831.5" y="1181.1426">const_reference : using</text><ellipse cx="3822.5" cy="1191.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3831.5" y="1194.0332">difference_type : using</text><ellipse cx="3822.5" cy="1204.6641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="3831.5" y="1206.9238">hasher : using</text><ellipse cx="3822.5" cy="1217.5547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3831.5" y="1219.8145">key_type : using</text><ellipse cx="3822.5" cy="1230.4453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="3831.5" y="1232.7051">local_const_iterator : using</text><ellipse cx="3822.5" cy="1243.3359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="3831.5" y="1245.5957">local_iterator : using</text><ellipse cx="3822.5" cy="1256.2266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3831.5" y="1258.4863">pointer : using</text><ellipse cx="3822.5" cy="1269.1172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="3831.5" y="1271.377">reference : using</text><ellipse cx="3822.5" cy="1282.0078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3831.5" y="1284.2676">size_type : using</text><ellipse cx="3822.5" cy="1294.8984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="3831.5" y="1297.1582">value_type : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3812.5" x2="4547.5" y1="1303.8438" y2="1303.8438"/><ellipse cx="3822.5" cy="1315.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3831.5" y="1318.0488">Hash_Multiset()</text><ellipse cx="3822.5" cy="1328.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3831.5" y="1330.9395">emplace(Args&amp;&amp; a) : auto</text><ellipse cx="3822.5" cy="1341.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3831.5" y="1343.8301">empty() : auto {query}</text><ellipse cx="3822.5" cy="1354.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="3831.5" y="1356.7207">equal_range(const CompatibleKey&amp; key) : auto {query}</text><ellipse cx="3822.5" cy="1367.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="3831.5" y="1369.6113">equal_range_nonconst_unsafe(const CompatibleKey&amp; key) : auto</text><ellipse cx="3822.5" cy="1380.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="3831.5" y="1382.502">insert(const_reference value) : auto</text><ellipse cx="3822.5" cy="1393.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="3831.5" y="1395.3926">rehash(size_t count) : auto</text><ellipse cx="3822.5" cy="1406.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="3831.5" y="1408.2832">reserve(size_t count) : auto</text><ellipse cx="3822.5" cy="1418.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="3831.5" y="1421.1738">size() : auto {query}</text><!--class nuspell.List_Strings--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="1092.1406" id="nuspell.List_Strings" style="stroke: #000000; stroke-width: 1.5;" width="358" x="2423" y="1664.0938"/><ellipse cx="2511.75" cy="1680.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2515.0938,1685.5156 Q2514.2344,1685.9844 2513.5156,1686.1563 Q2512.8125,1686.3281 2512.0156,1686.3281 Q2509.4531,1686.3281 2508.0469,1684.5469 Q2506.6563,1682.75 2506.6563,1679.5625 Q2506.6563,1676.4063 2508.0625,1674.5938 Q2509.4688,1672.7813 2512.0156,1672.7813 Q2512.8125,1672.7813 2513.5156,1672.9688 Q2514.2344,1673.1406 2515.0938,1673.6094 L2515.0938,1676.2656 Q2513.9688,1675.3281 2513.3125,1675.0938 Q2512.6563,1674.8438 2512.0156,1674.8438 Q2510.5625,1674.8438 2509.8281,1675.9844 Q2509.0938,1677.1094 2509.0938,1679.5625 Q2509.0938,1682.0156 2509.8281,1683.1563 Q2510.5625,1684.2813 2512.0156,1684.2813 Q2512.6719,1684.2813 2513.3125,1684.0469 Q2513.9688,1683.7969 2515.0938,1682.8594 L2515.0938,1685.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="2532.25" y="1684.1953">List_Strings</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="2673" y="1661.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="2674" y="1673.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2424" x2="2780" y1="1696.0938" y2="1696.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2431" y="1705.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="38" x="2443" y="1710.2988">d : VecT</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2431" y="1717.9297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="2443" y="1723.1895">sz : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2431" y="1730.8203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="2443" y="1736.0801">VecT : using</text><ellipse cx="2434" cy="1746.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2443" y="1748.9707">allocator_type : using</text><ellipse cx="2434" cy="1759.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2443" y="1761.8613">const_iterator : using</text><ellipse cx="2434" cy="1772.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2443" y="1774.752">const_pointer : using</text><ellipse cx="2434" cy="1785.3828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2443" y="1787.6426">const_reference : using</text><ellipse cx="2434" cy="1798.2734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="2443" y="1800.5332">const_reverse_iterator : using</text><ellipse cx="2434" cy="1811.1641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2443" y="1813.4238">difference_type : using</text><ellipse cx="2434" cy="1824.0547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2443" y="1826.3145">iterator : using</text><ellipse cx="2434" cy="1836.9453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2443" y="1839.2051">pointer : using</text><ellipse cx="2434" cy="1849.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2443" y="1852.0957">reference : using</text><ellipse cx="2434" cy="1862.7266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="2443" y="1864.9863">reverse_iterator : using</text><ellipse cx="2434" cy="1875.6172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2443" y="1877.877">size_type : using</text><ellipse cx="2434" cy="1888.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2443" y="1890.7676">value_type : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2424" x2="2780" y1="1897.4531" y2="1897.4531"/><ellipse cx="2434" cy="1909.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="2443" y="1911.6582">List_Strings()</text><ellipse cx="2434" cy="1922.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2443" y="1924.5488">List_Strings(size_type n)</text><ellipse cx="2434" cy="1935.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="2443" y="1937.4395">List_Strings(size_type n, const_reference value)</text><ellipse cx="2434" cy="1948.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="2443" y="1950.3301">List_Strings(InputIterator first, InputIterator last)</text><ellipse cx="2434" cy="1960.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="2443" y="1963.2207">List_Strings(std::initializer_list&lt;value_type&gt; il)</text><ellipse cx="2434" cy="1973.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="2443" y="1976.1113">List_Strings(const List_Strings&amp; other)</text><ellipse cx="2434" cy="1986.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="2443" y="1989.002">List_Strings(List_Strings&amp;&amp; other)</text><ellipse cx="2434" cy="1999.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="2443" y="2001.8926">assign(InputIterator first, InputIterator last) : auto</text><ellipse cx="2434" cy="2012.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="2443" y="2014.7832">begin() : auto</text><ellipse cx="2434" cy="2025.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="2443" y="2027.6738">begin() : auto {query}</text><ellipse cx="2434" cy="2038.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="2443" y="2040.5645">capacity() : auto {query}</text><ellipse cx="2434" cy="2051.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="2443" y="2053.4551">cbegin() : auto {query}</text><ellipse cx="2434" cy="2064.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2443" y="2066.3457">cend() : auto {query}</text><ellipse cx="2434" cy="2076.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="2443" y="2079.2363">clear() : auto</text><ellipse cx="2434" cy="2089.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="2443" y="2092.127">crbegin() : auto {query}</text><ellipse cx="2434" cy="2102.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2443" y="2105.0176">crend() : auto {query}</text><ellipse cx="2434" cy="2115.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="2443" y="2117.9082">data() : auto</text><ellipse cx="2434" cy="2128.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2443" y="2130.7988">data() : auto {query}</text><ellipse cx="2434" cy="2141.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="2443" y="2143.6895">emplace(const_iterator pos, Args&amp;&amp; args) : auto</text><ellipse cx="2434" cy="2154.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2443" y="2156.5801">empty() : auto {query}</text><ellipse cx="2434" cy="2167.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="2443" y="2169.4707">end() : auto</text><ellipse cx="2434" cy="2180.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="2443" y="2182.3613">end() : auto {query}</text><ellipse cx="2434" cy="2192.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="2443" y="2195.252">erase(const_iterator position) : auto</text><ellipse cx="2434" cy="2205.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="2443" y="2208.1426">erase(const_iterator first, const_iterator last) : auto</text><ellipse cx="2434" cy="2218.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2443" y="2221.0332">get_allocator() : auto {query}</text><ellipse cx="2434" cy="2231.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="2443" y="2233.9238">insert(const_iterator pos, const_reference x) : auto</text><ellipse cx="2434" cy="2244.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="2443" y="2246.8145">insert(const_iterator pos, value_type&amp;&amp; x) : auto</text><ellipse cx="2434" cy="2257.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="2443" y="2259.7051">insert(const_iterator pos, size_type n, const_reference x) : auto</text><ellipse cx="2434" cy="2270.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="2443" y="2272.5957">insert(const_iterator pos, InputIterator first, InputIterator last) : auto</text><ellipse cx="2434" cy="2283.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="2443" y="2285.4863">insert(const_iterator pos, std::initializer_list&lt;value_type&gt; il) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2431" y="2293.1172"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="2443" y="2298.377">insert_priv(const_iterator pos, U&amp;&amp; val) : auto</text><ellipse cx="2434" cy="2309.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="2443" y="2311.2676">max_size() : auto {query}</text><ellipse cx="2434" cy="2321.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="2443" y="2324.1582">operator!=(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2434" cy="2334.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="2443" y="2337.0488">operator&lt;(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2434" cy="2347.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="2443" y="2349.9395">operator&lt;=(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2434" cy="2360.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="2443" y="2362.8301">operator==(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2434" cy="2373.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="2443" y="2375.7207">operator&gt;(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2434" cy="2386.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="2443" y="2388.6113">operator&gt;=(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2434" cy="2399.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="2443" y="2401.502">pop_back() : auto</text><ellipse cx="2434" cy="2412.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="2443" y="2414.3926">push_back(const_reference x) : auto</text><ellipse cx="2434" cy="2425.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="2443" y="2427.2832">push_back(value_type&amp;&amp; x) : auto</text><ellipse cx="2434" cy="2437.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="2443" y="2440.1738">rbegin() : auto</text><ellipse cx="2434" cy="2450.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2443" y="2453.0645">rbegin() : auto {query}</text><ellipse cx="2434" cy="2463.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="2443" y="2465.9551">rend() : auto</text><ellipse cx="2434" cy="2476.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="2443" y="2478.8457">rend() : auto {query}</text><ellipse cx="2434" cy="2489.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="2443" y="2491.7363">resize(size_type new_sz) : auto</text><ellipse cx="2434" cy="2502.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="2443" y="2504.627">resize(size_type new_sz, const_reference c) : auto</text><ellipse cx="2434" cy="2515.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2443" y="2517.5176">size() : auto {query}</text><ellipse cx="2434" cy="2528.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="2443" y="2530.4082">swap(List_Strings&amp; other) : auto</text><ellipse cx="2434" cy="2541.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2443" y="2543.2988">at(size_type n) : auto&amp;</text><ellipse cx="2434" cy="2553.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="2443" y="2556.1895">at(size_type n) : auto&amp; {query}</text><ellipse cx="2434" cy="2566.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="2443" y="2569.0801">back() : auto&amp;</text><ellipse cx="2434" cy="2579.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2443" y="2581.9707">back() : auto&amp; {query}</text><ellipse cx="2434" cy="2592.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="2443" y="2594.8613">emplace_back(Args&amp;&amp; args) : auto&amp;</text><ellipse cx="2434" cy="2605.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2443" y="2607.752">emplace_back() : auto&amp;</text><ellipse cx="2434" cy="2618.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="2443" y="2620.6426">front() : auto&amp;</text><ellipse cx="2434" cy="2631.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2443" y="2633.5332">front() : auto&amp; {query}</text><ellipse cx="2434" cy="2644.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="2443" y="2646.4238">operator=(const List_Strings&amp; other) : auto&amp;</text><ellipse cx="2434" cy="2657.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="2443" y="2659.3145">operator=(List_Strings&amp;&amp; other) : auto&amp;</text><ellipse cx="2434" cy="2669.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="2443" y="2672.2051">operator=(std::initializer_list&lt;value_type&gt; il) : auto&amp;</text><ellipse cx="2434" cy="2682.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="2443" y="2685.0957">operator[](size_type n) : auto&amp;</text><ellipse cx="2434" cy="2695.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="2443" y="2697.9863">operator[](size_type n) : auto&amp; {query}</text><ellipse cx="2434" cy="2708.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="2443" y="2710.877">assign(size_type n, const_reference value) : void</text><ellipse cx="2434" cy="2721.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="2443" y="2723.7676">assign(std::initializer_list&lt;value_type&gt; il) : void</text><ellipse cx="2434" cy="2734.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="2443" y="2736.6582">reserve(size_type n) : void</text><ellipse cx="2434" cy="2747.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="2443" y="2749.5488">shrink_to_fit() : void</text><!--class nuspell.Phonetic_Table--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="189.7969" id="nuspell.Phonetic_Table" style="stroke: #000000; stroke-width: 1.5;" width="388" x="574" y="2115.0938"/><ellipse cx="666.25" cy="2131.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M669.5938,2136.5156 Q668.7344,2136.9844 668.0156,2137.1563 Q667.3125,2137.3281 666.5156,2137.3281 Q663.9531,2137.3281 662.5469,2135.5469 Q661.1563,2133.75 661.1563,2130.5625 Q661.1563,2127.4063 662.5625,2125.5938 Q663.9688,2123.7813 666.5156,2123.7813 Q667.3125,2123.7813 668.0156,2123.9688 Q668.7344,2124.1406 669.5938,2124.6094 L669.5938,2127.2656 Q668.4688,2126.3281 667.8125,2126.0938 Q667.1563,2125.8438 666.5156,2125.8438 Q665.0625,2125.8438 664.3281,2126.9844 Q663.5938,2128.1094 663.5938,2130.5625 Q663.5938,2133.0156 664.3281,2134.1563 Q665.0625,2135.2813 666.5156,2135.2813 Q667.1719,2135.2813 667.8125,2135.0469 Q668.4688,2134.7969 669.5938,2133.8594 L669.5938,2136.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="82" x="686.75" y="2135.1953">Phonetic_Table</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="854" y="2112.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="855" y="2124.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="575" x2="961" y1="2147.0938" y2="2147.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="582" y="2156.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="594" y="2161.2988">table : std::vector&lt;std::pair&lt;StrT, StrT&gt; &gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="582" y="2168.9297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="594" y="2174.1895">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="575" x2="961" y1="2180.875" y2="2180.875"/><ellipse cx="585" cy="2192.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="594" y="2195.0801">Phonetic_Table()</text><ellipse cx="585" cy="2205.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="594" y="2207.9707">Phonetic_Table(const std::vector&lt;std::pair&lt;StrT, StrT&gt; &gt;&amp; v)</text><ellipse cx="585" cy="2218.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="594" y="2220.8613">Phonetic_Table(std::vector&lt;std::pair&lt;StrT, StrT&gt; &gt;&amp;&amp; v)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="582" y="2228.4922"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="362" x="594" y="2233.752">match(const StrT&amp; data, size_t i, const StrT&amp; pattern, bool at_begin) : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="594" x2="956" y1="2235.752" y2="2235.752"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="582" y="2241.3828"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="594" y="2246.6426">order() : auto</text><ellipse cx="585" cy="2257.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="594" y="2259.5332">replace(StrT&amp; word) : auto {query}</text><ellipse cx="585" cy="2270.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="594" y="2272.4238">operator=(const std::vector&lt;std::pair&lt;StrT, StrT&gt; &gt;&amp; v) : auto&amp;</text><ellipse cx="585" cy="2283.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="594" y="2285.3145">operator=(std::vector&lt;std::pair&lt;StrT, StrT&gt; &gt;&amp;&amp; v) : auto&amp;</text><ellipse cx="585" cy="2295.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="594" y="2298.2051">operator=(const Range&amp; range) : auto&amp;</text><!--class nuspell.Prefix--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="241.3594" id="nuspell.Prefix" style="stroke: #000000; stroke-width: 1.5;" width="667" x="2816.5" y="2089.5938"/><ellipse cx="3074.25" cy="2105.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3077.5938,2111.0156 Q3076.7344,2111.4844 3076.0156,2111.6563 Q3075.3125,2111.8281 3074.5156,2111.8281 Q3071.9531,2111.8281 3070.5469,2110.0469 Q3069.1563,2108.25 3069.1563,2105.0625 Q3069.1563,2101.9063 3070.5625,2100.0938 Q3071.9688,2098.2813 3074.5156,2098.2813 Q3075.3125,2098.2813 3076.0156,2098.4688 Q3076.7344,2098.6406 3077.5938,2099.1094 L3077.5938,2101.7656 Q3076.4688,2100.8281 3075.8125,2100.5938 Q3075.1563,2100.3438 3074.5156,2100.3438 Q3073.0625,2100.3438 3072.3281,2101.4844 Q3071.5938,2102.6094 3071.5938,2105.0625 Q3071.5938,2107.5156 3072.3281,2108.6563 Q3073.0625,2109.7813 3074.5156,2109.7813 Q3075.1719,2109.7813 3075.8125,2109.5469 Q3076.4688,2109.2969 3077.5938,2108.3594 L3077.5938,2111.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="30" x="3094.75" y="2109.6953">Prefix</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="3375.5" y="2086.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="3376.5" y="2098.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2817.5" x2="3482.5" y1="2121.5938" y2="2121.5938"/><ellipse cx="2827.5" cy="2133.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="2836.5" y="2135.7988">condition : CondT</text><ellipse cx="2827.5" cy="2146.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2836.5" y="2148.6895">cont_flags : Flag_Set</text><ellipse cx="2827.5" cy="2159.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="2836.5" y="2161.5801">appending : StrT</text><ellipse cx="2827.5" cy="2172.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2836.5" y="2174.4707">stripping : StrT</text><ellipse cx="2827.5" cy="2185.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2836.5" y="2187.3613">cross_product : bool</text><ellipse cx="2827.5" cy="2197.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2836.5" y="2200.252">flag : char16_t</text><ellipse cx="2827.5" cy="2210.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2836.5" y="2213.1426">CondT : using</text><ellipse cx="2827.5" cy="2223.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="2836.5" y="2226.0332">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2817.5" x2="3482.5" y1="2232.7188" y2="2232.7188"/><ellipse cx="2827.5" cy="2244.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="36" x="2836.5" y="2246.9238">Prefix()</text><ellipse cx="2827.5" cy="2257.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="2836.5" y="2259.8145">Prefix(char16_t flag, bool cross_product, const StrT&amp; strip, const StrT&amp; append, const Flag_Set&amp; cont_flags, const StrT&amp; condition)</text><ellipse cx="2827.5" cy="2270.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="2836.5" y="2272.7051">check_condition(const StrT&amp; word) : auto {query}</text><ellipse cx="2827.5" cy="2283.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="2836.5" y="2285.5957">to_derived(StrT&amp; word) : auto {query}</text><ellipse cx="2827.5" cy="2296.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="2836.5" y="2298.4863">to_derived_copy(StrT word) : auto {query}</text><ellipse cx="2827.5" cy="2309.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="2836.5" y="2311.377">to_root(StrT&amp; word) : auto {query}</text><ellipse cx="2827.5" cy="2322.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="2836.5" y="2324.2676">to_root_copy(StrT word) : auto {query}</text><!--class nuspell.Replacement_Table--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="292.9219" id="nuspell.Replacement_Table" style="stroke: #000000; stroke-width: 1.5;" width="250" x="997" y="2063.5938"/><ellipse cx="1012" cy="2079.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1015.3438,2085.0156 Q1014.4844,2085.4844 1013.7656,2085.6563 Q1013.0625,2085.8281 1012.2656,2085.8281 Q1009.7031,2085.8281 1008.2969,2084.0469 Q1006.9063,2082.25 1006.9063,2079.0625 Q1006.9063,2075.9063 1008.3125,2074.0938 Q1009.7188,2072.2813 1012.2656,2072.2813 Q1013.0625,2072.2813 1013.7656,2072.4688 Q1014.4844,2072.6406 1015.3438,2073.1094 L1015.3438,2075.7656 Q1014.2188,2074.8281 1013.5625,2074.5938 Q1012.9063,2074.3438 1012.2656,2074.3438 Q1010.8125,2074.3438 1010.0781,2075.4844 Q1009.3438,2076.6094 1009.3438,2079.0625 Q1009.3438,2081.5156 1010.0781,2082.6563 Q1010.8125,2083.7813 1012.2656,2083.7813 Q1012.9219,2083.7813 1013.5625,2083.5469 Q1014.2188,2083.2969 1015.3438,2082.3594 L1015.3438,2085.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="105" x="1026" y="2083.6953">Replacement_Table</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="1139" y="2060.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="1140" y="2072.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="998" x2="1246" y1="2095.5938" y2="2095.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1005" y="2104.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="1017" y="2109.7988">table : Table_Str</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1005" y="2117.4297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="1017" y="2122.6895">end_word_reps_last_idx : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1005" y="2130.3203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1017" y="2135.5801">start_word_reps_last_idx : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1005" y="2143.2109"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="1017" y="2148.4707">whole_word_reps_last_idx : size_t</text><ellipse cx="1008" cy="2159.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1017" y="2161.3613">StrT : using</text><ellipse cx="1008" cy="2171.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="1017" y="2174.252">Table_Str : using</text><ellipse cx="1008" cy="2184.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1017" y="2187.1426">const_iterator : using</text><ellipse cx="1008" cy="2197.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="1017" y="2200.0332">iterator : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="998" x2="1246" y1="2206.7188" y2="2206.7188"/><ellipse cx="1008" cy="2218.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="1017" y="2220.9238">Replacement_Table()</text><ellipse cx="1008" cy="2231.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1017" y="2233.8145">Replacement_Table(const Table_Str&amp; v)</text><ellipse cx="1008" cy="2244.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="1017" y="2246.7051">Replacement_Table(Table_Str&amp;&amp; v)</text><ellipse cx="1008" cy="2257.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="1017" y="2259.5957">any_place_replacements() : auto {query}</text><ellipse cx="1008" cy="2270.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1017" y="2272.4863">end_word_replacements() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1005" y="2280.1172"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1017" y="2285.377">order_entries() : auto</text><ellipse cx="1008" cy="2296.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="1017" y="2298.2676">start_word_replacements() : auto {query}</text><ellipse cx="1008" cy="2308.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1017" y="2311.1582">whole_word_replacements() : auto {query}</text><ellipse cx="1008" cy="2321.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="1017" y="2324.0488">operator=(const Table_Str&amp; v) : auto&amp;</text><ellipse cx="1008" cy="2334.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="1017" y="2336.9395">operator=(Table_Str&amp;&amp; v) : auto&amp;</text><ellipse cx="1008" cy="2347.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="1017" y="2349.8301">operator=(const Range&amp; range) : auto&amp;</text><!--class nuspell.Similarity_Group--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="138.2344" id="nuspell.Similarity_Group" style="stroke: #000000; stroke-width: 1.5;" width="227" x="1282.5" y="2141.0938"/><ellipse cx="1297.5" cy="2157.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1300.8438,2162.5156 Q1299.9844,2162.9844 1299.2656,2163.1563 Q1298.5625,2163.3281 1297.7656,2163.3281 Q1295.2031,2163.3281 1293.7969,2161.5469 Q1292.4063,2159.75 1292.4063,2156.5625 Q1292.4063,2153.4063 1293.8125,2151.5938 Q1295.2188,2149.7813 1297.7656,2149.7813 Q1298.5625,2149.7813 1299.2656,2149.9688 Q1299.9844,2150.1406 1300.8438,2150.6094 L1300.8438,2153.2656 Q1299.7188,2152.3281 1299.0625,2152.0938 Q1298.4063,2151.8438 1297.7656,2151.8438 Q1296.3125,2151.8438 1295.5781,2152.9844 Q1294.8438,2154.1094 1294.8438,2156.5625 Q1294.8438,2159.0156 1295.5781,2160.1563 Q1296.3125,2161.2813 1297.7656,2161.2813 Q1298.4219,2161.2813 1299.0625,2161.0469 Q1299.7188,2160.7969 1300.8438,2159.8594 L1300.8438,2162.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="82" x="1311.5" y="2161.1953">Similarity_Group</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="1401.5" y="2138.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="1402.5" y="2150.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1283.5" x2="1508.5" y1="2173.0938" y2="2173.0938"/><ellipse cx="1293.5" cy="2185.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="1302.5" y="2187.2988">chars : StrT</text><ellipse cx="1293.5" cy="2197.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="1302.5" y="2200.1895">strings : std::vector&lt;StrT&gt;</text><ellipse cx="1293.5" cy="2210.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1302.5" y="2213.0801">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1283.5" x2="1508.5" y1="2219.7656" y2="2219.7656"/><ellipse cx="1293.5" cy="2231.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1302.5" y="2233.9707">Similarity_Group()</text><ellipse cx="1293.5" cy="2244.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="1302.5" y="2246.8613">Similarity_Group(const StrT&amp; s)</text><ellipse cx="1293.5" cy="2257.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1302.5" y="2259.752">parse(const StrT&amp; s) : auto</text><ellipse cx="1293.5" cy="2270.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="1302.5" y="2272.6426">operator=(const StrT&amp; s) : auto&amp;</text><!--class nuspell.String_Pair--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="202.6875" id="nuspell.String_Pair" style="stroke: #000000; stroke-width: 1.5;" width="223" x="296.5" y="2816.0938"/><ellipse cx="321.85" cy="2832.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M325.1938,2837.5156 Q324.3344,2837.9844 323.6156,2838.1563 Q322.9125,2838.3281 322.1156,2838.3281 Q319.5531,2838.3281 318.1469,2836.5469 Q316.7563,2834.75 316.7563,2831.5625 Q316.7563,2828.4063 318.1625,2826.5938 Q319.5688,2824.7813 322.1156,2824.7813 Q322.9125,2824.7813 323.6156,2824.9688 Q324.3344,2825.1406 325.1938,2825.6094 L325.1938,2828.2656 Q324.0688,2827.3281 323.4125,2827.0938 Q322.7563,2826.8438 322.1156,2826.8438 Q320.6625,2826.8438 319.9281,2827.9844 Q319.1938,2829.1094 319.1938,2831.5625 Q319.1938,2834.0156 319.9281,2835.1563 Q320.6625,2836.2813 322.1156,2836.2813 Q322.7719,2836.2813 323.4125,2836.0469 Q324.0688,2835.7969 325.1938,2834.8594 L325.1938,2837.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="55" x="338.15" y="2836.1953">String_Pair</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="411.5" y="2813.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="412.5" y="2825.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="297.5" x2="518.5" y1="2848.0938" y2="2848.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="304.5" y="2857.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="34" x="316.5" y="2862.2988">s : StrT</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="304.5" y="2869.9297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="40" x="316.5" y="2875.1895">i : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="304.5" y="2882.8203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="316.5" y="2888.0801">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="297.5" x2="518.5" y1="2894.7656" y2="2894.7656"/><ellipse cx="307.5" cy="2906.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="316.5" y="2908.9707">String_Pair()</text><ellipse cx="307.5" cy="2919.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="316.5" y="2921.8613">String_Pair(Str1&amp;&amp; str, size_t i)</text><ellipse cx="307.5" cy="2932.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="316.5" y="2934.752">String_Pair(Str1&amp;&amp; first, Str2&amp;&amp; second)</text><ellipse cx="307.5" cy="2945.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="316.5" y="2947.6426">first() : auto {query}</text><ellipse cx="307.5" cy="2958.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="316.5" y="2960.5332">first(my_string_view&lt;CharT&gt; x) : auto</text><ellipse cx="307.5" cy="2971.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="316.5" y="2973.4238">idx() : auto {query}</text><ellipse cx="307.5" cy="2984.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="316.5" y="2986.3145">second() : auto {query}</text><ellipse cx="307.5" cy="2996.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="316.5" y="2999.2051">second(my_string_view&lt;CharT&gt; x) : auto</text><ellipse cx="307.5" cy="3009.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="316.5" y="3012.0957">str() : auto&amp; {query}</text><!--class nuspell.String_Set--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="1027.6875" id="nuspell.String_Set" style="stroke: #000000; stroke-width: 1.5;" width="420" x="3519" y="1696.0938"/><ellipse cx="3642.25" cy="1712.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3645.5938,1717.5156 Q3644.7344,1717.9844 3644.0156,1718.1563 Q3643.3125,1718.3281 3642.5156,1718.3281 Q3639.9531,1718.3281 3638.5469,1716.5469 Q3637.1563,1714.75 3637.1563,1711.5625 Q3637.1563,1708.4063 3638.5625,1706.5938 Q3639.9688,1704.7813 3642.5156,1704.7813 Q3643.3125,1704.7813 3644.0156,1704.9688 Q3644.7344,1705.1406 3645.5938,1705.6094 L3645.5938,1708.2656 Q3644.4688,1707.3281 3643.8125,1707.0938 Q3643.1563,1706.8438 3642.5156,1706.8438 Q3641.0625,1706.8438 3640.3281,1707.9844 Q3639.5938,1709.1094 3639.5938,1711.5625 Q3639.5938,1714.0156 3640.3281,1715.1563 Q3641.0625,1716.2813 3642.5156,1716.2813 Q3643.1719,1716.2813 3643.8125,1716.0469 Q3644.4688,1715.7969 3645.5938,1714.8594 L3645.5938,1717.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="52" x="3662.75" y="1716.1953">String_Set</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="3831" y="1693.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="3832" y="1705.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3520" x2="3938" y1="1728.0938" y2="1728.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3527" y="1737.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="3539" y="1742.2988">d : std::basic_string&lt;CharT&gt;</text><ellipse cx="3530" cy="1752.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="3539" y="1755.1895">StrT : using</text><ellipse cx="3530" cy="1765.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="3539" y="1768.0801">allocator_type : using</text><ellipse cx="3530" cy="1778.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3539" y="1780.9707">const_iterator : using</text><ellipse cx="3530" cy="1791.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3539" y="1793.8613">const_pointer : using</text><ellipse cx="3530" cy="1804.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="3539" y="1806.752">const_reference : using</text><ellipse cx="3530" cy="1817.3828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="3539" y="1819.6426">const_reverse_iterator : using</text><ellipse cx="3530" cy="1830.2734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3539" y="1832.5332">difference_type : using</text><ellipse cx="3530" cy="1843.1641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="3539" y="1845.4238">iterator : using</text><ellipse cx="3530" cy="1856.0547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="3539" y="1858.3145">key_compare : using</text><ellipse cx="3530" cy="1868.9453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3539" y="1871.2051">key_type : using</text><ellipse cx="3530" cy="1881.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3539" y="1884.0957">pointer : using</text><ellipse cx="3530" cy="1894.7266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="3539" y="1896.9863">reference : using</text><ellipse cx="3530" cy="1907.6172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="3539" y="1909.877">reverse_iterator : using</text><ellipse cx="3530" cy="1920.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3539" y="1922.7676">size_type : using</text><ellipse cx="3530" cy="1933.3984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="3539" y="1935.6582">traits_type : using</text><ellipse cx="3530" cy="1946.2891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="3539" y="1948.5488">value_compare : using</text><ellipse cx="3530" cy="1959.1797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="3539" y="1961.4395">value_type : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3520" x2="3938" y1="1968.125" y2="1968.125"/><ellipse cx="3530" cy="1980.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="3539" y="1982.3301">String_Set()</text><ellipse cx="3530" cy="1992.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="3539" y="1995.2207">String_Set(const StrT&amp; s)</text><ellipse cx="3530" cy="2005.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="3539" y="2008.1113">String_Set(StrT&amp;&amp; s)</text><ellipse cx="3530" cy="2018.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="3539" y="2021.002">String_Set(InputIterator first, InputIterator last)</text><ellipse cx="3530" cy="2031.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="3539" y="2033.8926">String_Set(std::initializer_list&lt;value_type&gt; il)</text><ellipse cx="3530" cy="2044.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3539" y="2046.7832">operatorconstStrT&amp;() {query}</text><ellipse cx="3530" cy="2057.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="3539" y="2059.6738">insert(const StrT&amp; s) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3527" y="2067.3047"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="3539" y="2072.5645">lookup(const key_type&amp; x) : auto {query}</text><ellipse cx="3530" cy="2083.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="3539" y="2085.4551">operator+=(const StrT&amp; s) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3527" y="2093.0859"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="3539" y="2098.3457">sort_uniq() : auto</text><ellipse cx="3530" cy="2108.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3539" y="2111.2363">data() : auto&amp; {query}</text><ellipse cx="3530" cy="2121.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="3539" y="2124.127">operator=(const StrT&amp; s) : auto&amp;</text><ellipse cx="3530" cy="2134.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="3539" y="2137.0176">operator=(StrT&amp;&amp; s) : auto&amp;</text><ellipse cx="3530" cy="2147.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="3539" y="2149.9082">operator=(std::initializer_list&lt;value_type&gt; il) : auto&amp;</text><ellipse cx="3530" cy="2160.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="3539" y="2162.7988">contains(const key_type&amp; x) : bool {query}</text><ellipse cx="3530" cy="2173.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="3539" y="2175.6895">empty() : bool {query}</text><ellipse cx="3530" cy="2186.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="3539" y="2188.5801">operator!=(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3530" cy="2199.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="3539" y="2201.4707">operator&lt;(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3530" cy="2212.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="3539" y="2214.3613">operator&lt;=(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3530" cy="2224.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="3539" y="2227.252">operator==(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3530" cy="2237.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="3539" y="2240.1426">operator&gt;(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3530" cy="2250.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="3539" y="2253.0332">operator&gt;=(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3530" cy="2263.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3539" y="2265.9238">begin() : const_iterator {query}</text><ellipse cx="3530" cy="2276.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="3539" y="2278.8145">cbegin() : const_iterator {query}</text><ellipse cx="3530" cy="2289.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="3539" y="2291.7051">cend() : const_iterator {query}</text><ellipse cx="3530" cy="2302.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="3539" y="2304.5957">end() : const_iterator {query}</text><ellipse cx="3530" cy="2315.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="3539" y="2317.4863">find(const key_type&amp; x) : const_iterator {query}</text><ellipse cx="3530" cy="2328.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="3539" y="2330.377">lower_bound(const key_type&amp; x) : const_iterator {query}</text><ellipse cx="3530" cy="2341.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="3539" y="2343.2676">upper_bound(const key_type&amp; x) : const_iterator {query}</text><ellipse cx="3530" cy="2353.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="3539" y="2356.1582">crbegin() : const_reverse_iterator {query}</text><ellipse cx="3530" cy="2366.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3539" y="2369.0488">crend() : const_reverse_iterator {query}</text><ellipse cx="3530" cy="2379.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="3539" y="2381.9395">rbegin() : const_reverse_iterator {query}</text><ellipse cx="3530" cy="2392.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="3539" y="2394.8301">rend() : const_reverse_iterator {query}</text><ellipse cx="3530" cy="2405.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="3539" y="2407.7207">begin() : iterator</text><ellipse cx="3530" cy="2418.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="3539" y="2420.6113">emplace_hint(iterator hint, Args&amp;&amp; args) : iterator</text><ellipse cx="3530" cy="2431.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3539" y="2433.502">end() : iterator</text><ellipse cx="3530" cy="2444.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="3539" y="2446.3926">erase(iterator position) : iterator</text><ellipse cx="3530" cy="2457.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="3539" y="2459.2832">erase(iterator first, iterator last) : iterator</text><ellipse cx="3530" cy="2469.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="3539" y="2472.1738">find(const key_type&amp; x) : iterator</text><ellipse cx="3530" cy="2482.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="3539" y="2485.0645">insert(iterator hint, const value_type&amp; x) : iterator</text><ellipse cx="3530" cy="2495.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="3539" y="2497.9551">lower_bound(const key_type&amp; x) : iterator</text><ellipse cx="3530" cy="2508.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="3539" y="2510.8457">upper_bound(const key_type&amp; x) : iterator</text><ellipse cx="3530" cy="2521.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="3539" y="2523.7363">key_comp() : key_compare {query}</text><ellipse cx="3530" cy="2534.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="3539" y="2536.627">rbegin() : reverse_iterator</text><ellipse cx="3530" cy="2547.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="3539" y="2549.5176">rend() : reverse_iterator</text><ellipse cx="3530" cy="2560.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="3539" y="2562.4082">count(const key_type&amp; x) : size_type {query}</text><ellipse cx="3530" cy="2573.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="3539" y="2575.2988">erase(const key_type&amp; x) : size_type</text><ellipse cx="3530" cy="2585.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="3539" y="2588.1895">max_size() : size_type {query}</text><ellipse cx="3530" cy="2598.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="3539" y="2601.0801">size() : size_type {query}</text><ellipse cx="3530" cy="2611.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="394" x="3539" y="2613.9707">equal_range(const key_type&amp; x) : std::pair&lt;const_iterator , const_iterator&gt; {query}</text><ellipse cx="3530" cy="2624.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="3539" y="2626.8613">emplace(Args&amp;&amp; args) : std::pair&lt;iterator , bool&gt;</text><ellipse cx="3530" cy="2637.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="3539" y="2639.752">insert(const value_type&amp; x) : std::pair&lt;iterator , bool&gt;</text><ellipse cx="3530" cy="2650.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="3539" y="2652.6426">equal_range(const key_type&amp; x) : std::pair&lt;iterator , iterator&gt;</text><ellipse cx="3530" cy="2663.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="3539" y="2665.5332">value_comp() : value_compare {query}</text><ellipse cx="3530" cy="2676.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="3539" y="2678.4238">clear() : void</text><ellipse cx="3530" cy="2689.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="3539" y="2691.3145">insert(InputIterator first, InputIterator last) : void</text><ellipse cx="3530" cy="2701.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="3539" y="2704.2051">insert(std::initializer_list&lt;value_type&gt; il) : void</text><ellipse cx="3530" cy="2714.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="3539" y="2717.0957">swap(String_Set&amp; s) : void</text><!--class nuspell.Substr_Replacer--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="202.6875" id="nuspell.Substr_Replacer" style="stroke: #000000; stroke-width: 1.5;" width="231" x="1544.5" y="2108.5938"/><ellipse cx="1559.5" cy="2124.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1562.8438,2130.0156 Q1561.9844,2130.4844 1561.2656,2130.6563 Q1560.5625,2130.8281 1559.7656,2130.8281 Q1557.2031,2130.8281 1555.7969,2129.0469 Q1554.4063,2127.25 1554.4063,2124.0625 Q1554.4063,2120.9063 1555.8125,2119.0938 Q1557.2188,2117.2813 1559.7656,2117.2813 Q1560.5625,2117.2813 1561.2656,2117.4688 Q1561.9844,2117.6406 1562.8438,2118.1094 L1562.8438,2120.7656 Q1561.7188,2119.8281 1561.0625,2119.5938 Q1560.4063,2119.3438 1559.7656,2119.3438 Q1558.3125,2119.3438 1557.5781,2120.4844 Q1556.8438,2121.6094 1556.8438,2124.0625 Q1556.8438,2126.5156 1557.5781,2127.6563 Q1558.3125,2128.7813 1559.7656,2128.7813 Q1560.4219,2128.7813 1561.0625,2128.5469 Q1561.7188,2128.2969 1562.8438,2127.3594 L1562.8438,2130.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="86" x="1573.5" y="2128.6953">Substr_Replacer</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="1667.5" y="2105.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="1668.5" y="2117.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1545.5" x2="1774.5" y1="2140.5938" y2="2140.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1552.5" y="2149.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1564.5" y="2154.7988">table : Table_Pairs</text><ellipse cx="1555.5" cy="2165.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1564.5" y="2167.6895">StrT : using</text><ellipse cx="1555.5" cy="2178.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="1564.5" y="2180.5801">Table_Pairs : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1545.5" x2="1774.5" y1="2187.2656" y2="2187.2656"/><ellipse cx="1555.5" cy="2199.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1564.5" y="2201.4707">Substr_Replacer()</text><ellipse cx="1555.5" cy="2212.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="1564.5" y="2214.3613">Substr_Replacer(const Table_Pairs&amp; v)</text><ellipse cx="1555.5" cy="2224.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="1564.5" y="2227.252">Substr_Replacer(const Table_Pairs&amp;&amp; v)</text><ellipse cx="1555.5" cy="2237.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1564.5" y="2240.1426">replace(StrT&amp; s) : auto {query}</text><ellipse cx="1555.5" cy="2250.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="1564.5" y="2253.0332">replace_copy(StrT s) : auto {query}</text><ellipse cx="1555.5" cy="2263.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="1564.5" y="2265.9238">operator=(const Table_Pairs&amp; v) : auto&amp;</text><ellipse cx="1555.5" cy="2276.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1564.5" y="2278.8145">operator=(const Table_Pairs&amp;&amp; v) : auto&amp;</text><ellipse cx="1555.5" cy="2289.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="1564.5" y="2291.7051">operator=(const Range&amp; range) : auto&amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1552.5" y="2299.3359"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="1564.5" y="2304.5957">sort_uniq() : void</text><!--class nuspell.Suffix--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="241.3594" id="nuspell.Suffix" style="stroke: #000000; stroke-width: 1.5;" width="666" x="3974" y="2089.5938"/><ellipse cx="4231.75" cy="2105.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M4235.0938,2111.0156 Q4234.2344,2111.4844 4233.5156,2111.6563 Q4232.8125,2111.8281 4232.0156,2111.8281 Q4229.4531,2111.8281 4228.0469,2110.0469 Q4226.6563,2108.25 4226.6563,2105.0625 Q4226.6563,2101.9063 4228.0625,2100.0938 Q4229.4688,2098.2813 4232.0156,2098.2813 Q4232.8125,2098.2813 4233.5156,2098.4688 Q4234.2344,2098.6406 4235.0938,2099.1094 L4235.0938,2101.7656 Q4233.9688,2100.8281 4233.3125,2100.5938 Q4232.6563,2100.3438 4232.0156,2100.3438 Q4230.5625,2100.3438 4229.8281,2101.4844 Q4229.0938,2102.6094 4229.0938,2105.0625 Q4229.0938,2107.5156 4229.8281,2108.6563 Q4230.5625,2109.7813 4232.0156,2109.7813 Q4232.6719,2109.7813 4233.3125,2109.5469 Q4233.9688,2109.2969 4235.0938,2108.3594 L4235.0938,2111.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="29" x="4252.25" y="2109.6953">Suffix</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="4532" y="2086.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="4533" y="2098.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3975" x2="4639" y1="2121.5938" y2="2121.5938"/><ellipse cx="3985" cy="2133.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="3994" y="2135.7988">condition : CondT</text><ellipse cx="3985" cy="2146.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="3994" y="2148.6895">cont_flags : Flag_Set</text><ellipse cx="3985" cy="2159.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="3994" y="2161.5801">appending : StrT</text><ellipse cx="3985" cy="2172.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3994" y="2174.4707">stripping : StrT</text><ellipse cx="3985" cy="2185.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3994" y="2187.3613">cross_product : bool</text><ellipse cx="3985" cy="2197.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3994" y="2200.252">flag : char16_t</text><ellipse cx="3985" cy="2210.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="3994" y="2213.1426">CondT : using</text><ellipse cx="3985" cy="2223.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="3994" y="2226.0332">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3975" x2="4639" y1="2232.7188" y2="2232.7188"/><ellipse cx="3985" cy="2244.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="35" x="3994" y="2246.9238">Suffix()</text><ellipse cx="3985" cy="2257.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="640" x="3994" y="2259.8145">Suffix(char16_t flag, bool cross_product, const StrT&amp; strip, const StrT&amp; append, const Flag_Set&amp; cont_flags, const StrT&amp; condition)</text><ellipse cx="3985" cy="2270.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="3994" y="2272.7051">check_condition(const StrT&amp; word) : auto {query}</text><ellipse cx="3985" cy="2283.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="3994" y="2285.5957">to_derived(StrT&amp; word) : auto {query}</text><ellipse cx="3985" cy="2296.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="3994" y="2298.4863">to_derived_copy(StrT word) : auto {query}</text><ellipse cx="3985" cy="2309.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="3994" y="2311.377">to_root(StrT&amp; word) : auto {query}</text><ellipse cx="3985" cy="2322.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="3994" y="2324.2676">to_root_copy(StrT word) : auto {query}</text><!--class nuspell.Word_List--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="73.7813" id="nuspell.Word_List" style="stroke: #000000; stroke-width: 1.5;" width="281" x="2399.5" y="1205.5938"/><ellipse cx="2510.75" cy="1221.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2514.0938,1227.0156 Q2513.2344,1227.4844 2512.5156,1227.6563 Q2511.8125,1227.8281 2511.0156,1227.8281 Q2508.4531,1227.8281 2507.0469,1226.0469 Q2505.6563,1224.25 2505.6563,1221.0625 Q2505.6563,1217.9063 2507.0625,1216.0938 Q2508.4688,1214.2813 2511.0156,1214.2813 Q2511.8125,1214.2813 2512.5156,1214.4688 Q2513.2344,1214.6406 2514.0938,1215.1094 L2514.0938,1217.7656 Q2512.9688,1216.8281 2512.3125,1216.5938 Q2511.6563,1216.3438 2511.0156,1216.3438 Q2509.5625,1216.3438 2508.8281,1217.4844 Q2508.0938,1218.6094 2508.0938,1221.0625 Q2508.0938,1223.5156 2508.8281,1224.6563 Q2509.5625,1225.7813 2511.0156,1225.7813 Q2511.6719,1225.7813 2512.3125,1225.5469 Q2512.9688,1225.2969 2514.0938,1224.3594 L2514.0938,1227.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="50" x="2531.25" y="1225.6953">Word_List</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2400.5" x2="2679.5" y1="1237.5938" y2="1237.5938"/><ellipse cx="2410.5" cy="1249.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="2419.5" y="1251.7988">equal_range : using Word_List_Base::</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2400.5" x2="2679.5" y1="1258.4844" y2="1258.4844"/><ellipse cx="2410.5" cy="1270.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="2419.5" y="1272.6895">equal_range(const std::wstring&amp; word) : auto {query}</text><!--class nuspell.identity--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="52.8906" id="nuspell.identity" style="stroke: #000000; stroke-width: 1.5;" width="200" x="4675" y="2183.5938"/><ellipse cx="4752.25" cy="2199.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M4755.5938,2205.0156 Q4754.7344,2205.4844 4754.0156,2205.6563 Q4753.3125,2205.8281 4752.5156,2205.8281 Q4749.9531,2205.8281 4748.5469,2204.0469 Q4747.1563,2202.25 4747.1563,2199.0625 Q4747.1563,2195.9063 4748.5625,2194.0938 Q4749.9688,2192.2813 4752.5156,2192.2813 Q4753.3125,2192.2813 4754.0156,2192.4688 Q4754.7344,2192.6406 4755.5938,2193.1094 L4755.5938,2195.7656 Q4754.4688,2194.8281 4753.8125,2194.5938 Q4753.1563,2194.3438 4752.5156,2194.3438 Q4751.0625,2194.3438 4750.3281,2195.4844 Q4749.5938,2196.6094 4749.5938,2199.0625 Q4749.5938,2201.5156 4750.3281,2202.6563 Q4751.0625,2203.7813 4752.5156,2203.7813 Q4753.1719,2203.7813 4753.8125,2203.5469 Q4754.4688,2203.2969 4755.5938,2202.3594 L4755.5938,2205.0156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="37" x="4772.75" y="2203.6953">identity</text><line style="stroke: #000000; stroke-width: 1.5;" x1="4676" x2="4874" y1="2215.5938" y2="2215.5938"/><ellipse cx="4686" cy="2227.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="4695" y="2229.7988">operator()(T&amp;&amp; t) : constexpr auto&amp;</text><!--class nuspell.sv_eq--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="52.8906" id="nuspell.sv_eq" style="stroke: #000000; stroke-width: 1.5;" width="391" x="2406.5" y="2891.0938"/><ellipse cx="2526.25" cy="2907.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2529.5938,2912.5156 Q2528.7344,2912.9844 2528.0156,2913.1563 Q2527.3125,2913.3281 2526.5156,2913.3281 Q2523.9531,2913.3281 2522.5469,2911.5469 Q2521.1563,2909.75 2521.1563,2906.5625 Q2521.1563,2903.4063 2522.5625,2901.5938 Q2523.9688,2899.7813 2526.5156,2899.7813 Q2527.3125,2899.7813 2528.0156,2899.9688 Q2528.7344,2900.1406 2529.5938,2900.6094 L2529.5938,2903.2656 Q2528.4688,2902.3281 2527.8125,2902.0938 Q2527.1563,2901.8438 2526.5156,2901.8438 Q2525.0625,2901.8438 2524.3281,2902.9844 Q2523.5938,2904.1094 2523.5938,2906.5625 Q2523.5938,2909.0156 2524.3281,2910.1563 Q2525.0625,2911.2813 2526.5156,2911.2813 Q2527.1719,2911.2813 2527.8125,2911.0469 Q2528.4688,2910.7969 2529.5938,2909.8594 L2529.5938,2912.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="30" x="2546.75" y="2911.1953">sv_eq</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="2689.5" y="2888.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="2690.5" y="2900.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2407.5" x2="2796.5" y1="2923.0938" y2="2923.0938"/><ellipse cx="2417.5" cy="2935.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="365" x="2426.5" y="2937.2988">operator()(my_string_view&lt;CharT&gt; l, my_string_view&lt;CharT&gt; r) : auto {query}</text><!--class nuspell.sv_hash--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="52.8906" id="nuspell.sv_hash" style="stroke: #000000; stroke-width: 1.5;" width="319" x="2832.5" y="2891.0938"/><ellipse cx="2911.25" cy="2907.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2914.5938,2912.5156 Q2913.7344,2912.9844 2913.0156,2913.1563 Q2912.3125,2913.3281 2911.5156,2913.3281 Q2908.9531,2913.3281 2907.5469,2911.5469 Q2906.1563,2909.75 2906.1563,2906.5625 Q2906.1563,2903.4063 2907.5625,2901.5938 Q2908.9688,2899.7813 2911.5156,2899.7813 Q2912.3125,2899.7813 2913.0156,2899.9688 Q2913.7344,2900.1406 2914.5938,2900.6094 L2914.5938,2903.2656 Q2913.4688,2902.3281 2912.8125,2902.0938 Q2912.1563,2901.8438 2911.5156,2901.8438 Q2910.0625,2901.8438 2909.3281,2902.9844 Q2908.5938,2904.1094 2908.5938,2906.5625 Q2908.5938,2909.0156 2909.3281,2910.1563 Q2910.0625,2911.2813 2911.5156,2911.2813 Q2912.1719,2911.2813 2912.8125,2911.0469 Q2913.4688,2910.7969 2914.5938,2909.8594 L2914.5938,2912.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="40" x="2931.75" y="2911.1953">sv_hash</text><rect fill="url(#gvhucfnqu5hcf0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="3043.5" y="2888.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="3044.5" y="2900.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2833.5" x2="3150.5" y1="2923.0938" y2="2923.0938"/><ellipse cx="2843.5" cy="2935.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="2852.5" y="2937.2988">operator()(boost::basic_string_view&lt;CharT&gt; s) : auto {query}</text><!--class nuspell.Affixing_Mode--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="91.5625" id="nuspell.Affixing_Mode" style="stroke: #000000; stroke-width: 1.5;" width="126" x="3187" y="2871.5938"/><ellipse cx="3211" cy="2887.5938" fill="#EB937F" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3207.1406,2880.5156 L3215.1719,2880.5156 L3215.1719,2882.6094 L3209.5,2882.6094 L3209.5,2885.5938 L3214.9219,2885.5938 L3214.9219,2887.6875 L3209.5,2887.6875 L3209.5,2891.5 L3215.3281,2891.5 L3215.3281,2893.5938 L3207.1406,2893.5938 L3207.1406,2880.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="74" x="3227" y="2891.6953">Affixing_Mode</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3188" x2="3312" y1="2903.5938" y2="2903.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3193" y="2917.7988">AT_COMPOUND_BEGIN</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="3193" y="2930.6895">AT_COMPOUND_END</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="3193" y="2943.5801">AT_COMPOUND_MIDDLE</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="3193" y="2956.4707">FULL_WORD</text><!--class nuspell.Flag_Type--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="91.5625" id="nuspell.Flag_Type" style="stroke: #000000; stroke-width: 1.5;" width="108" x="3348" y="2871.5938"/><ellipse cx="3372.9" cy="2887.5938" fill="#EB937F" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3369.0406,2880.5156 L3377.0719,2880.5156 L3377.0719,2882.6094 L3371.4,2882.6094 L3371.4,2885.5938 L3376.8219,2885.5938 L3376.8219,2887.6875 L3371.4,2887.6875 L3371.4,2891.5 L3377.2281,2891.5 L3377.2281,2893.5938 L3369.0406,2893.5938 L3369.0406,2880.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="54" x="3389.1" y="2891.6953">Flag_Type</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3349" x2="3455" y1="2903.5938" y2="2903.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="3354" y="2917.7988">FLAG_DOUBLE_CHAR</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="3354" y="2930.6895">FLAG_NUMBER</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="3354" y="2943.5801">FLAG_SINGLE_CHAR</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="50" x="3354" y="2956.4707">FLAG_UTF8</text><!--class nuspell.empty--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="32" id="nuspell.empty" style="stroke: #000000; stroke-width: 1.5;" width="63" x="3491.5" y="2901.5938"/><ellipse cx="3506.5" cy="2917.5938" fill="#EB937F" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3502.6406,2910.5156 L3510.6719,2910.5156 L3510.6719,2912.6094 L3505,2912.6094 L3505,2915.5938 L3510.4219,2915.5938 L3510.4219,2917.6875 L3505,2917.6875 L3505,2921.5 L3510.8281,2921.5 L3510.8281,2923.5938 L3502.6406,2923.5938 L3502.6406,2910.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="31" x="3520.5" y="2921.6953">empty</text><!--class nuspell::Phonetic_Table.Phonetic_Table::Phonet_Match_Result--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="125.3438" id="nuspell::Phonetic_Table.Phonetic_Table::Phonet_Match_Result" style="stroke: #000000; stroke-width: 1.5;" width="229" x="4899.5" y="380.0938"/><ellipse cx="4914.5" cy="396.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M4917.8438,401.5156 Q4916.9844,401.9844 4916.2656,402.1563 Q4915.5625,402.3281 4914.7656,402.3281 Q4912.2031,402.3281 4910.7969,400.5469 Q4909.4063,398.75 4909.4063,395.5625 Q4909.4063,392.4063 4910.8125,390.5938 Q4912.2188,388.7813 4914.7656,388.7813 Q4915.5625,388.7813 4916.2656,388.9688 Q4916.9844,389.1406 4917.8438,389.6094 L4917.8438,392.2656 Q4916.7188,391.3281 4916.0625,391.0938 Q4915.4063,390.8438 4914.7656,390.8438 Q4913.3125,390.8438 4912.5781,391.9844 Q4911.8438,393.1094 4911.8438,395.5625 Q4911.8438,398.0156 4912.5781,399.1563 Q4913.3125,400.2813 4914.7656,400.2813 Q4915.4219,400.2813 4916.0625,400.0469 Q4916.7188,399.7969 4917.8438,398.8594 L4917.8438,401.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="197" x="4928.5" y="400.1953">Phonetic_Table::Phonet_Match_Result</text><line style="stroke: #000000; stroke-width: 1.5;" x1="4900.5" x2="5127.5" y1="412.0938" y2="412.0938"/><ellipse cx="4910.5" cy="424.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="4919.5" y="426.2988">go_back_after_replace : bool</text><ellipse cx="4910.5" cy="436.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="4919.5" y="439.1895">treat_next_as_begin : bool</text><ellipse cx="4910.5" cy="449.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="4919.5" y="452.0801">count_matched : size_t</text><ellipse cx="4910.5" cy="462.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="4919.5" y="464.9707">go_back_before_replace : size_t</text><ellipse cx="4910.5" cy="475.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="4919.5" y="477.8613">priority : size_t</text><line style="stroke: #000000; stroke-width: 1.5;" x1="4900.5" x2="5127.5" y1="484.5469" y2="484.5469"/><ellipse cx="4910.5" cy="496.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="4919.5" y="498.752">operatorbool()</text><!--class nuspell::String_Set.String_Set::Char_Traits_Less_Than--><rect fill="#FFFFFF" filter="url(#fvhucfnqu5hcf)" height="52.8906" id="nuspell::String_Set.String_Set::Char_Traits_Less_Than" style="stroke: #000000; stroke-width: 1.5;" width="209" x="5163.5" y="416.0938"/><ellipse cx="5178.5" cy="432.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M5181.8438,437.5156 Q5180.9844,437.9844 5180.2656,438.1563 Q5179.5625,438.3281 5178.7656,438.3281 Q5176.2031,438.3281 5174.7969,436.5469 Q5173.4063,434.75 5173.4063,431.5625 Q5173.4063,428.4063 5174.8125,426.5938 Q5176.2188,424.7813 5178.7656,424.7813 Q5179.5625,424.7813 5180.2656,424.9688 Q5180.9844,425.1406 5181.8438,425.6094 L5181.8438,428.2656 Q5180.7188,427.3281 5180.0625,427.0938 Q5179.4063,426.8438 5178.7656,426.8438 Q5177.3125,426.8438 5176.5781,427.9844 Q5175.8438,429.1094 5175.8438,431.5625 Q5175.8438,434.0156 5176.5781,435.1563 Q5177.3125,436.2813 5178.7656,436.2813 Q5179.4219,436.2813 5180.0625,436.0469 Q5180.7188,435.7969 5181.8438,434.8594 L5181.8438,437.5156 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="177" x="5192.5" y="436.1953">String_Set::Char_Traits_Less_Than</text><line style="stroke: #000000; stroke-width: 1.5;" x1="5164.5" x2="5371.5" y1="448.0938" y2="448.0938"/><ellipse cx="5174.5" cy="460.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="5183.5" y="462.2988">operator()(CharT a, CharT b) : auto</text><!--link nuspell.Aff_Data to nuspell.Dict_Base--><path d="M1783.9168,839.8859 C1789.3958,853.5833 1794.8765,867.2851 1800.3332,880.9268 " fill="none" id="nuspell.Aff_Data-nuspell.Dict_Base" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="1777.3775,842.3854,1776.4489,821.2161,1790.3762,837.1858,1777.3775,842.3854" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Dict_Base to nuspell.Basic_Dictionary--><path d="M2005.7312,1624.1358 C2033.6349,1799.4399 2064.5254,1993.5083 2082.824,2108.4684 " fill="none" id="nuspell.Dict_Base-nuspell.Basic_Dictionary" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="1998.7939,1625.0827,2002.5629,1604.2309,2012.6199,1622.8819,1998.7939,1625.0827" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Data to nuspell.Aff_Structures--><path d="M1422.1105,582.5669 C1317.8957,661.5882 1194.2185,767.1928 1104,881.0938 C1040.123,961.7386 989.5045,1068.2236 957.8433,1144.7042 " fill="none" id="nuspell.Aff_Data-nuspell.Aff_Structures" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#gvhucfnqu5hcf0)" points="1432.7767,574.5201,1425.5779,574.9404,1423.197,581.7472,1430.3959,581.3269,1432.7767,574.5201" style="stroke: #000000; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="7" x="1418.1313" y="576.446">2</text><!--link nuspell.Aff_Data to nuspell.Compound_Rule_Table--><path d="M1469.0819,833.6109 C1422.5081,950.4104 1375.5269,1068.2316 1344.0331,1147.213 " fill="none" id="nuspell.Aff_Data-nuspell.Compound_Rule_Table" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#gvhucfnqu5hcf0)" points="1474.0243,821.2161,1468.0864,825.3077,1469.5796,832.3625,1475.5174,828.2709,1474.0243,821.2161" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Data to nuspell.Word_List--><path d="M1829.4107,518.718 C1996.982,590.101 2230.4335,711.3571 2382,881.0938 C2469.9328,979.5682 2515.0219,1134.6895 2531.9345,1205.33 " fill="none" id="nuspell.Aff_Data-nuspell.Word_List" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#gvhucfnqu5hcf0)" points="1817.209,513.5587,1821.1775,519.5795,1828.2616,518.2321,1824.2931,512.2112,1817.209,513.5587" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Break_Table--><path d="M743.8057,1310.2296 C592.2907,1377.2396 380.2287,1494.5062 260,1664.0938 C173.495,1786.1127 144.7179,1958.3091 135.5359,2076.5191 " fill="none" id="nuspell.Aff_Structures-nuspell.Break_Table" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#gvhucfnqu5hcf0)" points="755.9791,1304.896,748.8782,1303.6401,744.9878,1309.7117,752.0887,1310.9676,755.9791,1304.896" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Compound_Pattern--><path d="M804.2221,1349.6958 C723.9629,1429.2737 620.7642,1544.3657 557,1664.0938 C469.5896,1828.2217 429.988,2048.0741 415.2791,2151.5652 " fill="none" id="nuspell.Aff_Structures-nuspell.Compound_Pattern" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#gvhucfnqu5hcf0)" points="813.8919,1340.1693,806.8105,1341.5306,805.3435,1348.5909,812.4249,1347.2296,813.8919,1340.1693" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Phonetic_Table--><path d="M903.5222,1353.1154 C873.2479,1544.5556 811.5645,1934.6125 783.0606,2114.8579 " fill="none" id="nuspell.Aff_Structures-nuspell.Phonetic_Table" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#gvhucfnqu5hcf0)" points="905.5585,1340.2387,900.6704,1345.5402,903.6841,1352.0914,908.5722,1346.7898,905.5585,1340.2387" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Replacement_Table--><path d="M943.9462,1353.0437 C980.2556,1527.8169 1050.9827,1868.2567 1091.5139,2063.3508 " fill="none" id="nuspell.Aff_Structures-nuspell.Replacement_Table" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#gvhucfnqu5hcf0)" points="941.2859,1340.2387,938.59,1346.9269,943.7269,1351.9878,946.4228,1345.2995,941.2859,1340.2387" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Similarity_Group--><path d="M952.7376,1352.7684 C980.789,1432.321 1029.0798,1537.12 1104,1604.0938 C1160.9315,1654.9869 1214.374,1606.9246 1265,1664.0938 C1385.3679,1800.0187 1399.9311,2027.1672 1398.9314,2140.855 " fill="none" id="nuspell.Aff_Structures-nuspell.Similarity_Group" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#gvhucfnqu5hcf0)" points="948.4084,1340.2271,946.5852,1347.2039,952.3241,1351.5702,954.1473,1344.5934,948.4084,1340.2271" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Substr_Replacer--><path d="M947.2021,1352.7404 C972.8773,1435.4692 1020.6384,1544.3868 1104,1604.0938 C1258.3703,1714.6601 1386.3159,1536.5669 1527,1664.0938 C1651.24,1776.7144 1668.6049,1984.2261 1666.6013,2108.4468 " fill="none" id="nuspell.Aff_Structures-nuspell.Substr_Replacer" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#gvhucfnqu5hcf0)" points="943.4208,1340.217,941.3259,1347.117,946.8895,1351.7047,948.9844,1344.8046,943.4208,1340.217" style="stroke: #000000; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="7" x="937.7512" y="1359.6882">2</text><!--link nuspell.Basic_Dictionary to nuspell.Encoding_Details--><path d="M2099,2325.0389 C2099,2501.2156 2099,2825.6318 2099,2901.4504 " fill="none" id="nuspell.Basic_Dictionary-nuspell.Encoding_Details" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#gvhucfnqu5hcf0)" points="2099,2311.8378,2095,2317.8378,2099,2323.8378,2103,2317.8378,2099,2311.8378" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Compound_Pattern to nuspell.String_Pair--><path d="M408,2282.1734 C408,2408.7043 408,2671.0665 408,2815.9569 " fill="none" id="nuspell.Compound_Pattern-nuspell.String_Pair" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#gvhucfnqu5hcf0)" points="408,2268.8954,404,2274.8954,408,2280.8954,412,2274.8954,408,2268.8954" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Affix to nuspell.Affix_Table--><!--link nuspell.Affix_Table to nuspell.Affixing_Result--><!--link nuspell.Affixing_Result to nuspell.Casing--><!--link nuspell.Casing to nuspell.Compound_Check_Pattern--><!--link nuspell.Affix to nuspell.Compounding_Result--><!--link nuspell.Compounding_Result to nuspell.Condition--><!--link nuspell.Condition to nuspell.Encoding--><!--link nuspell.Encoding to nuspell.Finder--><!--link nuspell.Finder to nuspell.Hash_Multiset--><!--link nuspell.Compounding_Result to nuspell.List_Strings--><!--link nuspell.List_Strings to nuspell.Prefix--><!--link nuspell.Prefix to nuspell.String_Set--><!--link nuspell.String_Set to nuspell.Suffix--><!--link nuspell.Suffix to nuspell.identity--><!--link nuspell.List_Strings to nuspell.sv_eq--><!--link nuspell.sv_eq to nuspell.sv_hash--><!--link nuspell.sv_hash to nuspell.Affixing_Mode--><!--link nuspell.Affixing_Mode to nuspell.Flag_Type--><!--link nuspell.Flag_Type to nuspell.empty--><!--
@startuml
skinparam BackgroundColor White|White
skinparam ArrowColor Black
skinparam DefaultFontName Roboto Condensed
skinparam TitleFontStyle Bold

skinparam NoteBackgroundColor White
skinparam NoteBorderColor Black

skinparam UsecaseBackgroundColor White
skinparam ActorBackgroundColor White
skinparam UsecaseBorderColor Black
skinparam ActorBorderColor Black

skinparam usecase {
	BackgroundColor<<for now out of scope>> Gray
}

skinparam StateBackgroundColor White
skinparam StateBorderColor Black

skinparam ActivityBackgroundColor White
skinparam ActivityDiamondBackgroundColor White
skinparam ActivityBorderColor Black
skinparam ActivityDiamondBorderColor Black

skinparam ClassBackgroundColor White
skinparam ClassBorderColor Black
hide empty members

title Nuspell






namespace nuspell {
	class Aff_Data {
		+structures : Aff_Structures<char>
		+wide_structures : Aff_Structures<wchar_t>
		+compound_rules : Compound_Rule_Table
		+compound_syllable_num : Flag_Set
		+flag_type : Flag_Type
		+words : Word_List
		+get_structures() : auto {query}
		+parse_aff(istream& in) : auto
		+parse_aff_dic(std::istream& aff, std::istream& dic) : auto
		+parse_dic(istream& in) : auto
		+set_encoding_and_language(const string& enc, const string& lang) : auto
		+checksharps : bool
		+complex_prefixes : bool
		+compound_check_case : bool
		+compound_check_duplicate : bool
		+compound_check_rep : bool
		+compound_check_triple : bool
		+compound_more_suffixes : bool
		+compound_simplified_triple : bool
		+forbid_warn : bool
		+fullstrip : bool
		+no_split_suggestions : bool
		+only_max_diff : bool
		+suggest_with_dots : bool
		+circumfix_flag : char16_t
		+compound_begin_flag : char16_t
		+compound_flag : char16_t
		+compound_forbid_flag : char16_t
		+compound_force_uppercase : char16_t
		+compound_last_flag : char16_t
		+compound_middle_flag : char16_t
		+compound_onlyin_flag : char16_t
		+compound_permit_flag : char16_t
		+compound_root_flag : char16_t
		+forbiddenword_flag : char16_t
		+keepcase_flag : char16_t
		+need_affix_flag : char16_t
		+nosuggest_flag : char16_t
		+substandard_flag : char16_t
		+warn_flag : char16_t
		+internal_locale : std::locale
		+compound_syllable_vowels : string
		+wordchars : string
		+compound_max_word_count : unsigned short
		+compound_min_length : unsigned short
		+compound_syllable_max : unsigned short
		+max_compound_suggestions : unsigned short
		+max_diff_factor : unsigned short
		+max_ngram_suggestions : unsigned short
		+istream : using
		+pair : using
		+string : using
		+u16string : using
		+vector : using
		+flag_aliases : vector<Flag_Set>
	}
}


namespace nuspell {
	class Aff_Structures <template <class CharT>> {
		+break_table : Break_Table<CharT>
		+phonetic_table : Phonetic_Table<CharT>
		+prefixes : Prefix_Table<CharT>
		+replacements : Replacement_Table<CharT>
		+input_substr_replacer : Substr_Replacer<CharT>
		+output_substr_replacer : Substr_Replacer<CharT>
		+suffixes : Suffix_Table<CharT>
		+ignored_chars : std::basic_string<CharT>
		+keyboard_closeness : std::basic_string<CharT>
		+try_chars : std::basic_string<CharT>
		+compound_patterns : std::vector<Compound_Pattern<CharT> >
		+similarities : std::vector<Similarity_Group<CharT> >
	}
}


namespace nuspell {
	class Affix {
		+new_flags : Flag_Set
		+cross_product : bool
		+flag : char16_t
		+appending : string
		+condition : string
		+stripping : string
		+string : using
		+vector : using
		+morphological_fields : vector<string>
	}
}


namespace nuspell {
	class Affix_Table <template <class CharT, class AffixT>> {
		-all_cont_flags : Flag_Set
		+emplace(Args&& a) : auto
		+equal_range(my_string_view<CharT> appending) : auto {query}
		+has_continuation_flag(char16_t flag) : auto {query}
		+has_continuation_flags() : auto {query}
		+base : using
		+iterator : using
	}
}


namespace nuspell {
	class Affixing_Result <template <class... Affixes>> {
		+Affixing_Result()
		+Affixing_Result(Word_List::const_reference word_entry, const Affixes& affixes)
		+const_pointer() {query}
		+operator->() : auto {query}
		+operator*() : auto& {query}
		+base_type : using
	}
}


namespace nuspell {
	class Basic_Dictionary {
		+Basic_Dictionary()
		#Basic_Dictionary(std::istream& aff, std::istream& dic)
		#enc_details : Encoding_Details
		#external_to_internal_encoding(const std::string& in, std::wstring& wide_out, std::string& narrow_out) : auto {query}
		+imbue(const std::locale& loc) : auto
		#internal_to_external_encoding(std::string& in_out, std::wstring& wide_in_out) : auto {query}
		+{static} load_from_aff_dic(std::istream& aff, std::istream& dic) : auto
		+{static} load_from_aff_dic(const string& file_path_without_extension) : auto
		+spell(const std::string& word) : auto {query}
		+suggest(const std::string& word, List_Strings<char>& out) : auto {query}
		#List_Strings_Back_Inserter : friend struct
		#external_locale : std::locale
	}
}


namespace nuspell {
	class Break_Table <template <class CharT>> {
		+Break_Table()
		+Break_Table(const Table_Str& v)
		+Break_Table(Table_Str&& v)
		-table : Table_Str
		+end_word_breaks() : auto {query}
		+middle_word_breaks() : auto {query}
		-order_entries() : auto
		+start_word_breaks() : auto {query}
		+operator=(const Table_Str& v) : auto&
		+operator=(Table_Str&& v) : auto&
		+operator=(const Range& range) : auto&
		-end_word_breaks_last_idx : size_t
		-start_word_breaks_last_idx : size_t
		+StrT : using
		+Table_Str : using
		+const_iterator : using
		+iterator : using
	}
}


namespace nuspell {
	class Casing {
	}
}


namespace nuspell {
	class Compound_Check_Pattern {
		+first_word_flag : char16_t
		+second_word_flag : char16_t
		+first_word_end : string
		+replacement : string
		+second_word_begin : string
		+string : using
	}
}


namespace nuspell {
	class Compound_Pattern <template <class CharT>> {
		+replacement : StrT
		+begin_end_chars : String_Pair<CharT>
		+match_first_only_unaffixed_or_zero_affixed : bool
		+first_word_flag : char16_t
		+second_word_flag : char16_t
		+StrT : using
	}
}


namespace nuspell {
	class Compound_Rule_Table {
		+Compound_Rule_Table()
		+Compound_Rule_Table(const std::vector<std::u16string>& tbl)
		+Compound_Rule_Table(std::vector<std::u16string>&& tbl)
		-all_flags : Flag_Set
		+empty() : auto {query}
		-fill_all_flags() : auto
		+has_any_of_flags(const Flag_Set& f) : auto {query}
		+match_any_rule(const std::vector<const Flag_Set*> data) : auto {query}
		+operator=(const std::vector<std::u16string>& tbl) : auto
		+operator=(std::vector<std::u16string>&& tbl) : auto
		-rules : std::vector<std::u16string>
	}
}


namespace nuspell {
	class Compounding_Result {
		+const_pointer() {query}
		+operator->() : auto {query}
		+operator*() : auto& {query}
	}
}


namespace nuspell {
	class Condition <template <class CharT>> {
		+Condition()
		+Condition(const StrT& condition)
		+Condition(StrT&& condition)
		-cond : StrT
		-construct() : auto
		+match(const StrT& s, size_t pos, size_t len) : auto {query}
		+match_prefix(const StrT& s) : auto {query}
		+match_suffix(const StrT& s) : auto {query}
		-length : size_t
		+StrT : using
		+tuple : using
		+vector : using
		-spans : vector<tuple<size_t, size_t, Span_Type> >
	}
}


namespace nuspell {
	class Dict_Base {
		+Dict_Base()
		+add_sug_if_correct(std::basic_string<CharT>& word, List_Strings<CharT>& out) : auto {query}
		+affix_NOT_valid(const Prefix<CharT>& a) : auto {query}
		+affix_NOT_valid(const Suffix<CharT>& a) : auto {query}
		+bad_char_suggest(std::basic_string<CharT>& word, List_Strings<CharT>& out) : auto {query}
		+check_compound(std::basic_string<CharT>& word) : auto {query}
		+check_compound(std::basic_string<CharT>& word, size_t start_pos, size_t num_part, std::basic_string<CharT>& part) : auto {query}
		+check_compound_classic(std::basic_string<CharT>& word, size_t start_pos, size_t i, size_t num_part, std::basic_string<CharT>& part) : auto {query}
		+check_compound_with_pattern_replacements(std::basic_string<CharT>& word, size_t start_pos, size_t i, size_t num_part, std::basic_string<CharT>& part) : auto {query}
		+check_compound_with_rules(std::basic_string<CharT>& word, std::vector<const Flag_Set*>& words_data, size_t start_pos, std::basic_string<CharT>& part) : auto {query}
		+check_word(std::basic_string<CharT>& s) : auto {query}
		+check_word_in_compound(std::basic_string<CharT>& s) : auto {query}
		+extra_char_suggest(std::basic_string<CharT>& word, List_Strings<CharT>& out) : auto {query}
		+forgotten_char_suggest(std::basic_string<CharT>& word, List_Strings<CharT>& out) : auto {query}
		+is_circumfix(const AffixT& a) : auto {query}
		+is_valid_inside_compound(const Flag_Set& flags) : auto {query}
		+keyboard_suggest(std::basic_string<CharT>& word, List_Strings<CharT>& out) : auto {query}
		+map_suggest(std::basic_string<CharT>& word, List_Strings<CharT>& out, size_t i) : auto {query}
		+outer_affix_NOT_valid(const AffixT& a) : auto {query}
		+phonetic_suggest(std::basic_string<CharT>& word, List_Strings<CharT>& out) : auto {query}
		+rep_suggest(std::basic_string<CharT>& word, List_Strings<CharT>& out) : auto {query}
		+spell_break(std::basic_string<CharT>& s, size_t depth) : auto {query}
		+spell_casing(std::basic_string<CharT>& s) : auto {query}
		+spell_casing_title(std::basic_string<CharT>& s) : auto {query}
		+spell_casing_upper(std::basic_string<CharT>& s) : auto {query}
		+spell_priv(std::basic_string<CharT>& s) : auto {query}
		+spell_sharps(std::basic_string<CharT>& base, size_t n_pos, size_t n, size_t rep) : auto {query}
		+strip_2_pfx_sfx_3(const Prefix<CharT>& pe1, const Prefix<CharT>& pe2, std::basic_string<CharT>& word) : auto {query}
		+strip_2_prefixes_then_suffix(std::basic_string<CharT>& word) : auto {query}
		+strip_2_sfx_pfx_3(const Suffix<CharT>& se1, const Suffix<CharT>& se2, std::basic_string<CharT>& word) : auto {query}
		+strip_2_suffixes_then_prefix(std::basic_string<CharT>& s) : auto {query}
		+strip_p_s_p_3(const Prefix<CharT>& pe1, const Suffix<CharT>& se1, std::basic_string<CharT>& word) : auto {query}
		+strip_pfx_2_sfx_3(const Prefix<CharT>& pe1, const Suffix<CharT>& se1, std::basic_string<CharT>& s) : auto {query}
		+strip_pfx_then_pfx_2(const Prefix<CharT>& pe1, std::basic_string<CharT>& s) : auto {query}
		+strip_pfx_then_sfx_2(const Prefix<CharT>& pe, std::basic_string<CharT>& s) : auto {query}
		+strip_pfx_then_sfx_comm_2(const Prefix<CharT>& pe, std::basic_string<CharT>& word) : auto {query}
		+strip_prefix_only(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_suffix_prefix(std::basic_string<CharT>& word) : auto {query}
		+strip_prefix_then_2_suffixes(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_then_prefix(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_then_suffix(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_then_suffix_commutative(std::basic_string<CharT>& word) : auto {query}
		+strip_s_p_s_3(const Suffix<CharT>& se1, const Prefix<CharT>& pe1, std::basic_string<CharT>& word) : auto {query}
		+strip_sfx_2_pfx_3(const Suffix<CharT>& se1, const Prefix<CharT>& pe1, std::basic_string<CharT>& s) : auto {query}
		+strip_sfx_then_pfx_2(const Suffix<CharT>& se, std::basic_string<CharT>& s) : auto {query}
		+strip_sfx_then_sfx_2(const Suffix<CharT>& se1, std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_only(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_prefix_suffix(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_then_2_prefixes(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_then_prefix(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_then_suffix(std::basic_string<CharT>& s) : auto {query}
		+suggest_priv(std::basic_string<CharT>& word, List_Strings<CharT>& out) : auto {query}
		+try_rep_suggestion(std::basic_string<CharT>& word, List_Strings<CharT>& out) : auto {query}
	}
}


namespace nuspell {
	class Encoding {
		+Encoding()
		+Encoding(const std::string& e)
		+Encoding(std::string&& e)
		+Encoding(const char* e)
		+operatorEnc_Type() {query}
		+string&() {query}
		+empty() : auto {query}
		+is_utf8() : auto {query}
		-normalize_name() : auto
		+value_or_default() : auto
		+operator=(const std::string& e) : auto&
		+operator=(std::string&& e) : auto&
		+operator=(const char* e) : auto&
		+value() : auto& {query}
		-name : std::string
	}
}


namespace nuspell {
	class Encoding_Details {
	}
}


namespace nuspell {
	class Finder {
		-dictionaries : Dict_List
		+add_apacheopenoffice_paths() : auto
		+add_default_paths() : auto
		+add_libreoffice_paths() : auto
		+add_mozilla_paths() : auto
		+begin() : auto {query}
		+end() : auto {query}
		+equal_range(const std::string& dict) : auto {query}
		+find(const std::string& dict) : auto {query}
		+get_dictionary(const std::string& dict) : auto {query}
		+search_dictionaries() : auto
		+{static} search_dictionaries_in_all_paths() : auto
		+get_all_dictionaries() : auto& {query}
		+get_all_paths() : auto& {query}
		-paths : std::vector<std::string>
		-Dict_List : using
		+const_iterator : using
	}
}


namespace nuspell {
	class Hash_Multiset <template <class Value, class Key = Value, class KeyExtract = identity, class Hash = std::hash<Key>, class KeyEqual = std::equal_to<Key>>> {
		+Hash_Multiset()
		+emplace(Args&& a) : auto
		+empty() : auto {query}
		+equal_range(const CompatibleKey& key) : auto {query}
		+equal_range_nonconst_unsafe(const CompatibleKey& key) : auto
		+insert(const_reference value) : auto
		+rehash(size_t count) : auto
		+reserve(size_t count) : auto
		+size() : auto {query}
		-max_load_factor_capacity : size_t
		-sz : size_t
		-{static} max_load_fact : static constexpr float
		-data : std::vector<bucket_type>
		-bucket_type : using
		+const_pointer : using
		+const_reference : using
		+difference_type : using
		+hasher : using
		+key_type : using
		+local_const_iterator : using
		+local_iterator : using
		+pointer : using
		+reference : using
		+size_type : using
		+value_type : using
	}
}


namespace nuspell {
	class List_Strings <template <class CharT>> {
		+List_Strings()
		+List_Strings(size_type n)
		+List_Strings(size_type n, const_reference value)
		+List_Strings(InputIterator first, InputIterator last)
		+List_Strings(std::initializer_list<value_type> il)
		+List_Strings(const List_Strings& other)
		+List_Strings(List_Strings&& other)
		-d : VecT
		+assign(InputIterator first, InputIterator last) : auto
		+begin() : auto
		+begin() : auto {query}
		+capacity() : auto {query}
		+cbegin() : auto {query}
		+cend() : auto {query}
		+clear() : auto
		+crbegin() : auto {query}
		+crend() : auto {query}
		+data() : auto
		+data() : auto {query}
		+emplace(const_iterator pos, Args&& args) : auto
		+empty() : auto {query}
		+end() : auto
		+end() : auto {query}
		+erase(const_iterator position) : auto
		+erase(const_iterator first, const_iterator last) : auto
		+get_allocator() : auto {query}
		+insert(const_iterator pos, const_reference x) : auto
		+insert(const_iterator pos, value_type&& x) : auto
		+insert(const_iterator pos, size_type n, const_reference x) : auto
		+insert(const_iterator pos, InputIterator first, InputIterator last) : auto
		+insert(const_iterator pos, std::initializer_list<value_type> il) : auto
		-insert_priv(const_iterator pos, U&& val) : auto
		+max_size() : auto {query}
		+operator!=(const List_Strings& other) : auto {query}
		+operator<(const List_Strings& other) : auto {query}
		+operator<=(const List_Strings& other) : auto {query}
		+operator==(const List_Strings& other) : auto {query}
		+operator>(const List_Strings& other) : auto {query}
		+operator>=(const List_Strings& other) : auto {query}
		+pop_back() : auto
		+push_back(const_reference x) : auto
		+push_back(value_type&& x) : auto
		+rbegin() : auto
		+rbegin() : auto {query}
		+rend() : auto
		+rend() : auto {query}
		+resize(size_type new_sz) : auto
		+resize(size_type new_sz, const_reference c) : auto
		+size() : auto {query}
		+swap(List_Strings& other) : auto
		+at(size_type n) : auto&
		+at(size_type n) : auto& {query}
		+back() : auto&
		+back() : auto& {query}
		+emplace_back(Args&& args) : auto&
		+emplace_back() : auto&
		+front() : auto&
		+front() : auto& {query}
		+operator=(const List_Strings& other) : auto&
		+operator=(List_Strings&& other) : auto&
		+operator=(std::initializer_list<value_type> il) : auto&
		+operator[](size_type n) : auto&
		+operator[](size_type n) : auto& {query}
		-sz : size_t
		-VecT : using
		+allocator_type : using
		+const_iterator : using
		+const_pointer : using
		+const_reference : using
		+const_reverse_iterator : using
		+difference_type : using
		+iterator : using
		+pointer : using
		+reference : using
		+reverse_iterator : using
		+size_type : using
		+value_type : using
		+assign(size_type n, const_reference value) : void
		+assign(std::initializer_list<value_type> il) : void
		+reserve(size_type n) : void
		+shrink_to_fit() : void
	}
}


namespace nuspell {
	class Phonetic_Table <template <class CharT>> {
		+Phonetic_Table()
		+Phonetic_Table(const std::vector<std::pair<StrT, StrT> >& v)
		+Phonetic_Table(std::vector<std::pair<StrT, StrT> >&& v)
		-{static} match(const StrT& data, size_t i, const StrT& pattern, bool at_begin) : auto
		-order() : auto
		+replace(StrT& word) : auto {query}
		+operator=(const std::vector<std::pair<StrT, StrT> >& v) : auto&
		+operator=(std::vector<std::pair<StrT, StrT> >&& v) : auto&
		+operator=(const Range& range) : auto&
		-table : std::vector<std::pair<StrT, StrT> >
		-StrT : using
	}
}


namespace nuspell::Phonetic_Table {
	class Phonetic_Table::Phonet_Match_Result {
		+operatorbool()
		+go_back_after_replace : bool
		+treat_next_as_begin : bool
		+count_matched : size_t
		+go_back_before_replace : size_t
		+priority : size_t
	}
}


namespace nuspell {
	class Prefix <template <class CharT>> {
		+Prefix()
		+Prefix(char16_t flag, bool cross_product, const StrT& strip, const StrT& append, const Flag_Set& cont_flags, const StrT& condition)
		+condition : CondT
		+cont_flags : Flag_Set
		+appending : StrT
		+stripping : StrT
		+check_condition(const StrT& word) : auto {query}
		+to_derived(StrT& word) : auto {query}
		+to_derived_copy(StrT word) : auto {query}
		+to_root(StrT& word) : auto {query}
		+to_root_copy(StrT word) : auto {query}
		+cross_product : bool
		+flag : char16_t
		+CondT : using
		+StrT : using
	}
}


namespace nuspell {
	class Replacement_Table <template <class CharT>> {
		+Replacement_Table()
		+Replacement_Table(const Table_Str& v)
		+Replacement_Table(Table_Str&& v)
		-table : Table_Str
		+any_place_replacements() : auto {query}
		+end_word_replacements() : auto {query}
		-order_entries() : auto
		+start_word_replacements() : auto {query}
		+whole_word_replacements() : auto {query}
		+operator=(const Table_Str& v) : auto&
		+operator=(Table_Str&& v) : auto&
		+operator=(const Range& range) : auto&
		-end_word_reps_last_idx : size_t
		-start_word_reps_last_idx : size_t
		-whole_word_reps_last_idx : size_t
		+StrT : using
		+Table_Str : using
		+const_iterator : using
		+iterator : using
	}
}


namespace nuspell {
	class Similarity_Group <template <class CharT>> {
		+Similarity_Group()
		+Similarity_Group(const StrT& s)
		+chars : StrT
		+parse(const StrT& s) : auto
		+operator=(const StrT& s) : auto&
		+strings : std::vector<StrT>
		+StrT : using
	}
}


namespace nuspell {
	class String_Pair <template <class CharT>> {
		+String_Pair()
		+String_Pair(Str1&& str, size_t i)
		+String_Pair(Str1&& first, Str2&& second)
		-s : StrT
		+first() : auto {query}
		+first(my_string_view<CharT> x) : auto
		+idx() : auto {query}
		+second() : auto {query}
		+second(my_string_view<CharT> x) : auto
		+str() : auto& {query}
		-i : size_t
		-StrT : using
	}
}


namespace nuspell {
	class String_Set <template <class CharT>> {
		+String_Set()
		+String_Set(const StrT& s)
		+String_Set(StrT&& s)
		+String_Set(InputIterator first, InputIterator last)
		+String_Set(std::initializer_list<value_type> il)
		+operatorconstStrT&() {query}
		+insert(const StrT& s) : auto
		-lookup(const key_type& x) : auto {query}
		+operator+=(const StrT& s) : auto
		-sort_uniq() : auto
		+data() : auto& {query}
		+operator=(const StrT& s) : auto&
		+operator=(StrT&& s) : auto&
		+operator=(std::initializer_list<value_type> il) : auto&
		+contains(const key_type& x) : bool {query}
		+empty() : bool {query}
		+operator!=(const String_Set& rhs) : bool {query}
		+operator<(const String_Set& rhs) : bool {query}
		+operator<=(const String_Set& rhs) : bool {query}
		+operator==(const String_Set& rhs) : bool {query}
		+operator>(const String_Set& rhs) : bool {query}
		+operator>=(const String_Set& rhs) : bool {query}
		+begin() : const_iterator {query}
		+cbegin() : const_iterator {query}
		+cend() : const_iterator {query}
		+end() : const_iterator {query}
		+find(const key_type& x) : const_iterator {query}
		+lower_bound(const key_type& x) : const_iterator {query}
		+upper_bound(const key_type& x) : const_iterator {query}
		+crbegin() : const_reverse_iterator {query}
		+crend() : const_reverse_iterator {query}
		+rbegin() : const_reverse_iterator {query}
		+rend() : const_reverse_iterator {query}
		+begin() : iterator
		+emplace_hint(iterator hint, Args&& args) : iterator
		+end() : iterator
		+erase(iterator position) : iterator
		+erase(iterator first, iterator last) : iterator
		+find(const key_type& x) : iterator
		+insert(iterator hint, const value_type& x) : iterator
		+lower_bound(const key_type& x) : iterator
		+upper_bound(const key_type& x) : iterator
		+key_comp() : key_compare {query}
		+rbegin() : reverse_iterator
		+rend() : reverse_iterator
		+count(const key_type& x) : size_type {query}
		+erase(const key_type& x) : size_type
		+max_size() : size_type {query}
		+size() : size_type {query}
		-d : std::basic_string<CharT>
		+equal_range(const key_type& x) : std::pair<const_iterator , const_iterator> {query}
		+emplace(Args&& args) : std::pair<iterator , bool>
		+insert(const value_type& x) : std::pair<iterator , bool>
		+equal_range(const key_type& x) : std::pair<iterator , iterator>
		+StrT : using
		+allocator_type : using
		+const_iterator : using
		+const_pointer : using
		+const_reference : using
		+const_reverse_iterator : using
		+difference_type : using
		+iterator : using
		+key_compare : using
		+key_type : using
		+pointer : using
		+reference : using
		+reverse_iterator : using
		+size_type : using
		+traits_type : using
		+value_compare : using
		+value_type : using
		+value_comp() : value_compare {query}
		+clear() : void
		+insert(InputIterator first, InputIterator last) : void
		+insert(std::initializer_list<value_type> il) : void
		+swap(String_Set& s) : void
	}
}


namespace nuspell::String_Set {
	class String_Set::Char_Traits_Less_Than {
		+operator()(CharT a, CharT b) : auto
	}
}


namespace nuspell {
	class Substr_Replacer <template <class CharT>> {
		+Substr_Replacer()
		+Substr_Replacer(const Table_Pairs& v)
		+Substr_Replacer(const Table_Pairs&& v)
		-table : Table_Pairs
		+replace(StrT& s) : auto {query}
		+replace_copy(StrT s) : auto {query}
		+operator=(const Table_Pairs& v) : auto&
		+operator=(const Table_Pairs&& v) : auto&
		+operator=(const Range& range) : auto&
		+StrT : using
		+Table_Pairs : using
		-sort_uniq() : void
	}
}


namespace nuspell {
	class Suffix <template <class CharT>> {
		+Suffix()
		+Suffix(char16_t flag, bool cross_product, const StrT& strip, const StrT& append, const Flag_Set& cont_flags, const StrT& condition)
		+condition : CondT
		+cont_flags : Flag_Set
		+appending : StrT
		+stripping : StrT
		+check_condition(const StrT& word) : auto {query}
		+to_derived(StrT& word) : auto {query}
		+to_derived_copy(StrT word) : auto {query}
		+to_root(StrT& word) : auto {query}
		+to_root_copy(StrT word) : auto {query}
		+cross_product : bool
		+flag : char16_t
		+CondT : using
		+StrT : using
	}
}


namespace nuspell {
	class Word_List {
		+equal_range(const std::wstring& word) : auto {query}
		+equal_range : using Word_List_Base::
	}
}


namespace nuspell {
	class identity {
		+operator()(T&& t) : constexpr auto&
	}
}


namespace nuspell {
	class sv_eq <template <class CharT>> {
		+operator()(my_string_view<CharT> l, my_string_view<CharT> r) : auto {query}
	}
}


namespace nuspell {
	class sv_hash <template <class CharT>> {
		+operator()(boost::basic_string_view<CharT> s) : auto {query}
	}
}


namespace nuspell {
	enum Affixing_Mode {
		AT_COMPOUND_BEGIN
		AT_COMPOUND_END
		AT_COMPOUND_MIDDLE
		FULL_WORD
	}
}


namespace nuspell {
	enum Flag_Type {
		FLAG_DOUBLE_CHAR
		FLAG_NUMBER
		FLAG_SINGLE_CHAR
		FLAG_UTF8
	}
}


namespace nuspell {
	enum empty {
	}
}






namespace nuspell {
	Aff_Data <|- - Dict_Base
}


namespace nuspell {
	Dict_Base <|- - Basic_Dictionary
}






namespace nuspell {
	Aff_Data "2" o- - Aff_Structures
}


namespace nuspell {
	Aff_Data o- - Compound_Rule_Table
}


namespace nuspell {
	Aff_Data o- - Word_List
}


namespace nuspell {
	Aff_Structures o- - Break_Table
}


namespace nuspell {
	Aff_Structures o- - Compound_Pattern
}


namespace nuspell {
	Aff_Structures o- - Phonetic_Table
}


namespace nuspell {
	Aff_Structures o- - Replacement_Table
}


namespace nuspell {
	Aff_Structures o- - Similarity_Group
}


namespace nuspell {
	Aff_Structures "2" o- - Substr_Replacer
}


namespace nuspell {
	Basic_Dictionary o- - Encoding_Details
}


namespace nuspell {
	Compound_Pattern o- - String_Pair
}




@enduml

PlantUML version 1.2018.14(Fri Dec 21 17:33:16 CET 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.1+13-Ubuntu-2ubuntu1
Operating System: Linux
OS Version: 4.18.0-13-generic
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>