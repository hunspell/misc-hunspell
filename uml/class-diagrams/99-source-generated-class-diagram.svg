<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="3060px" preserveAspectRatio="none" style="width:5403px;height:3060px;" version="1.1" viewBox="0 0 5403 3060" width="5403px" zoomAndPan="magnify"><defs><linearGradient id="g1dvwyytvziotb0" x1="0%" x2="100%" y1="50%" y2="50%"><stop offset="0%" stop-color="#FFFFFF"/><stop offset="100%" stop-color="#FFFFFF"/></linearGradient><filter height="300%" id="f1dvwyytvziotb" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><rect fill="url(#g1dvwyytvziotb0)" height="3060" style="stroke: none; stroke-width: 1.0;" width="5403" x="0" y="0"/><text fill="#000000" font-family="Roboto Condensed" font-size="18" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="59" x="2674" y="16.6992">Nuspell</text><!--cluster nuspell--><polygon fill="url(#g1dvwyytvziotb0)" filter="url(#f1dvwyytvziotb)" points="14,37.0938,67,37.0938,74,59.5,4883,59.5,4883,3048.0938,14,3048.0938,14,37.0938" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="14" x2="74" y1="59.5" y2="59.5"/><text fill="#000000" font-family="Roboto Condensed" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="47" x="18" y="52.082">nuspell</text><!--cluster nuspell::Phonetic_Table--><polygon fill="url(#g1dvwyytvziotb0)" filter="url(#f1dvwyytvziotb)" points="4891,353.0938,5054,353.0938,5061,375.5,5137,375.5,5137,513.0938,4891,513.0938,4891,353.0938" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="4891" x2="5061" y1="375.5" y2="375.5"/><text fill="#000000" font-family="Roboto Condensed" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="157" x="4895" y="368.082">nuspell::Phonetic_Table</text><!--cluster nuspell::String_Set--><polygon fill="url(#g1dvwyytvziotb0)" filter="url(#f1dvwyytvziotb)" points="5155,385.0938,5286,385.0938,5293,407.5,5381,407.5,5381,481.0938,5155,481.0938,5155,385.0938" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="5155" x2="5293" y1="407.5" y2="407.5"/><text fill="#000000" font-family="Roboto Condensed" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="125" x="5159" y="400.082">nuspell::String_Set</text><!--class nuspell.Aff_Data--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="756.9844" id="nuspell.Aff_Data" style="stroke: #000000; stroke-width: 1.5;" width="384" x="1433" y="64.0938"/><ellipse cx="1599.75" cy="80.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1602.7188,85.7344 Q1602.1406,86.0313 1601.5,86.1719 Q1600.8594,86.3281 1600.1563,86.3281 Q1597.6563,86.3281 1596.3281,84.6875 Q1595.0156,83.0313 1595.0156,79.9063 Q1595.0156,76.7813 1596.3281,75.125 Q1597.6563,73.4688 1600.1563,73.4688 Q1600.8594,73.4688 1601.5,73.625 Q1602.1563,73.7813 1602.7188,74.0781 L1602.7188,76.7969 Q1602.0938,76.2188 1601.5,75.9531 Q1600.9063,75.6719 1600.2813,75.6719 Q1598.9375,75.6719 1598.25,76.75 Q1597.5625,77.8125 1597.5625,79.9063 Q1597.5625,82 1598.25,83.0781 Q1598.9375,84.1406 1600.2813,84.1406 Q1600.9063,84.1406 1601.5,83.875 Q1602.0938,83.5938 1602.7188,83.0156 L1602.7188,85.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="42" x="1620.25" y="84.1953">Aff_Data</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1434" x2="1816" y1="96.0938" y2="96.0938"/><ellipse cx="1444" cy="108.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="1453" y="110.2988">structures : Aff_Structures&lt;char&gt;</text><ellipse cx="1444" cy="120.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="1453" y="123.1895">wide_structures : Aff_Structures&lt;wchar_t&gt;</text><ellipse cx="1444" cy="133.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="1453" y="136.0801">compound_rules : Compound_Rule_Table</text><ellipse cx="1444" cy="146.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="1453" y="148.9707">compound_syllable_num : Flag_Set</text><ellipse cx="1444" cy="159.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="1453" y="161.8613">flag_type : Flag_Type</text><ellipse cx="1444" cy="172.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="1453" y="174.752">words : Word_List</text><ellipse cx="1444" cy="185.3828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="1453" y="187.6426">checksharps : bool</text><ellipse cx="1444" cy="198.2734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="1453" y="200.5332">complex_prefixes : bool</text><ellipse cx="1444" cy="211.1641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="1453" y="213.4238">compound_check_case : bool</text><ellipse cx="1444" cy="224.0547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="1453" y="226.3145">compound_check_duplicate : bool</text><ellipse cx="1444" cy="236.9453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="1453" y="239.2051">compound_check_rep : bool</text><ellipse cx="1444" cy="249.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1453" y="252.0957">compound_check_triple : bool</text><ellipse cx="1444" cy="262.7266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="1453" y="264.9863">compound_more_suffixes : bool</text><ellipse cx="1444" cy="275.6172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="1453" y="277.877">compound_simplified_triple : bool</text><ellipse cx="1444" cy="288.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1453" y="290.7676">forbid_warn : bool</text><ellipse cx="1444" cy="301.3984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="1453" y="303.6582">fullstrip : bool</text><ellipse cx="1444" cy="314.2891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="1453" y="316.5488">no_split_suggestions : bool</text><ellipse cx="1444" cy="327.1797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="1453" y="329.4395">only_max_diff : bool</text><ellipse cx="1444" cy="340.0703" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="1453" y="342.3301">suggest_with_dots : bool</text><ellipse cx="1444" cy="352.9609" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="1453" y="355.2207">circumfix_flag : char16_t</text><ellipse cx="1444" cy="365.8516" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="1453" y="368.1113">compound_begin_flag : char16_t</text><ellipse cx="1444" cy="378.7422" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="1453" y="381.002">compound_flag : char16_t</text><ellipse cx="1444" cy="391.6328" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="1453" y="393.8926">compound_forbid_flag : char16_t</text><ellipse cx="1444" cy="404.5234" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="1453" y="406.7832">compound_force_uppercase : char16_t</text><ellipse cx="1444" cy="417.4141" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1453" y="419.6738">compound_last_flag : char16_t</text><ellipse cx="1444" cy="430.3047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="1453" y="432.5645">compound_middle_flag : char16_t</text><ellipse cx="1444" cy="443.1953" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="1453" y="445.4551">compound_onlyin_flag : char16_t</text><ellipse cx="1444" cy="456.0859" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="1453" y="458.3457">compound_permit_flag : char16_t</text><ellipse cx="1444" cy="468.9766" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="1453" y="471.2363">compound_root_flag : char16_t</text><ellipse cx="1444" cy="481.8672" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1453" y="484.127">forbiddenword_flag : char16_t</text><ellipse cx="1444" cy="494.7578" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="1453" y="497.0176">keepcase_flag : char16_t</text><ellipse cx="1444" cy="507.6484" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="1453" y="509.9082">need_affix_flag : char16_t</text><ellipse cx="1444" cy="520.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="1453" y="522.7988">nosuggest_flag : char16_t</text><ellipse cx="1444" cy="533.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1453" y="535.6895">substandard_flag : char16_t</text><ellipse cx="1444" cy="546.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="1453" y="548.5801">warn_flag : char16_t</text><ellipse cx="1444" cy="559.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1453" y="561.4707">internal_locale : std::locale</text><ellipse cx="1444" cy="572.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="1453" y="574.3613">compound_syllable_vowels : string</text><ellipse cx="1444" cy="584.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1453" y="587.252">wordchars : string</text><ellipse cx="1444" cy="597.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="1453" y="600.1426">compound_max_word_count : unsigned short</text><ellipse cx="1444" cy="610.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1453" y="613.0332">compound_min_length : unsigned short</text><ellipse cx="1444" cy="623.6641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="1453" y="625.9238">compound_syllable_max : unsigned short</text><ellipse cx="1444" cy="636.5547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="1453" y="638.8145">max_compound_suggestions : unsigned short</text><ellipse cx="1444" cy="649.4453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1453" y="651.7051">max_diff_factor : unsigned short</text><ellipse cx="1444" cy="662.3359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1453" y="664.5957">max_ngram_suggestions : unsigned short</text><ellipse cx="1444" cy="675.2266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="1453" y="677.4863">istream : using</text><ellipse cx="1444" cy="688.1172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1453" y="690.377">pair : using</text><ellipse cx="1444" cy="701.0078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="1453" y="703.2676">string : using</text><ellipse cx="1444" cy="713.8984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="1453" y="716.1582">u16string : using</text><ellipse cx="1444" cy="726.7891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1453" y="729.0488">vector : using</text><ellipse cx="1444" cy="739.6797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="1453" y="741.9395">flag_aliases : vector&lt;Flag_Set&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1434" x2="1816" y1="748.625" y2="748.625"/><ellipse cx="1444" cy="760.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="1453" y="762.8301">get_structures() : auto {query}</text><ellipse cx="1444" cy="773.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1453" y="775.7207">parse_aff(istream&amp; in) : auto</text><ellipse cx="1444" cy="786.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="1453" y="788.6113">parse_aff_dic(std::istream&amp; aff, std::istream&amp; dic) : auto</text><ellipse cx="1444" cy="799.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="1453" y="801.502">parse_dic(istream&amp; in) : auto</text><ellipse cx="1444" cy="812.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="1453" y="814.3926">set_encoding_and_language(const string&amp; enc, const string&amp; lang) : auto</text><!--class nuspell.Aff_Structures--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="202.6875" id="nuspell.Aff_Structures" style="stroke: #000000; stroke-width: 1.5;" width="330" x="756" y="1151.5938"/><ellipse cx="823.75" cy="1167.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M826.7188,1173.2344 Q826.1406,1173.5313 825.5,1173.6719 Q824.8594,1173.8281 824.1563,1173.8281 Q821.6563,1173.8281 820.3281,1172.1875 Q819.0156,1170.5313 819.0156,1167.4063 Q819.0156,1164.2813 820.3281,1162.625 Q821.6563,1160.9688 824.1563,1160.9688 Q824.8594,1160.9688 825.5,1161.125 Q826.1563,1161.2813 826.7188,1161.5781 L826.7188,1164.2969 Q826.0938,1163.7188 825.5,1163.4531 Q824.9063,1163.1719 824.2813,1163.1719 Q822.9375,1163.1719 822.25,1164.25 Q821.5625,1165.3125 821.5625,1167.4063 Q821.5625,1169.5 822.25,1170.5781 Q822.9375,1171.6406 824.2813,1171.6406 Q824.9063,1171.6406 825.5,1171.375 Q826.0938,1171.0938 826.7188,1170.5156 L826.7188,1173.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="73" x="844.25" y="1171.6953">Aff_Structures</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="978" y="1148.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="979" y="1160.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="757" x2="1085" y1="1183.5938" y2="1183.5938"/><ellipse cx="767" cy="1195.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="776" y="1197.7988">break_table : Break_Table&lt;CharT&gt;</text><ellipse cx="767" cy="1208.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="776" y="1210.6895">phonetic_table : Phonetic_Table&lt;CharT&gt;</text><ellipse cx="767" cy="1221.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="776" y="1223.5801">prefixes : Prefix_Table&lt;CharT&gt;</text><ellipse cx="767" cy="1234.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="776" y="1236.4707">replacements : Replacement_Table&lt;CharT&gt;</text><ellipse cx="767" cy="1247.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="776" y="1249.3613">input_substr_replacer : Substr_Replacer&lt;CharT&gt;</text><ellipse cx="767" cy="1259.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="776" y="1262.252">output_substr_replacer : Substr_Replacer&lt;CharT&gt;</text><ellipse cx="767" cy="1272.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="776" y="1275.1426">suffixes : Suffix_Table&lt;CharT&gt;</text><ellipse cx="767" cy="1285.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="776" y="1288.0332">ignored_chars : std::basic_string&lt;CharT&gt;</text><ellipse cx="767" cy="1298.6641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="776" y="1300.9238">keyboard_closeness : std::basic_string&lt;CharT&gt;</text><ellipse cx="767" cy="1311.5547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="776" y="1313.8145">try_chars : std::basic_string&lt;CharT&gt;</text><ellipse cx="767" cy="1324.4453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="776" y="1326.7051">compound_patterns : std::vector&lt;Compound_Pattern&lt;CharT&gt; &gt;</text><ellipse cx="767" cy="1337.3359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="776" y="1339.5957">similarities : std::vector&lt;Similarity_Group&lt;CharT&gt; &gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="757" x2="1085" y1="1346.2813" y2="1346.2813"/><!--class nuspell.Affix--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="164.0156" id="nuspell.Affix" style="stroke: #000000; stroke-width: 1.5;" width="209" x="2689.5" y="360.5938"/><ellipse cx="2778.25" cy="376.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2781.2188,382.2344 Q2780.6406,382.5313 2780,382.6719 Q2779.3594,382.8281 2778.6563,382.8281 Q2776.1563,382.8281 2774.8281,381.1875 Q2773.5156,379.5313 2773.5156,376.4063 Q2773.5156,373.2813 2774.8281,371.625 Q2776.1563,369.9688 2778.6563,369.9688 Q2779.3594,369.9688 2780,370.125 Q2780.6563,370.2813 2781.2188,370.5781 L2781.2188,373.2969 Q2780.5938,372.7188 2780,372.4531 Q2779.4063,372.1719 2778.7813,372.1719 Q2777.4375,372.1719 2776.75,373.25 Q2776.0625,374.3125 2776.0625,376.4063 Q2776.0625,378.5 2776.75,379.5781 Q2777.4375,380.6406 2778.7813,380.6406 Q2779.4063,380.6406 2780,380.375 Q2780.5938,380.0938 2781.2188,379.5156 L2781.2188,382.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="23" x="2798.75" y="380.6953">Affix</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2690.5" x2="2897.5" y1="392.5938" y2="392.5938"/><ellipse cx="2700.5" cy="404.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2709.5" y="406.7988">new_flags : Flag_Set</text><ellipse cx="2700.5" cy="417.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2709.5" y="419.6895">cross_product : bool</text><ellipse cx="2700.5" cy="430.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2709.5" y="432.5801">flag : char16_t</text><ellipse cx="2700.5" cy="443.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="2709.5" y="445.4707">appending : string</text><ellipse cx="2700.5" cy="456.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="2709.5" y="458.3613">condition : string</text><ellipse cx="2700.5" cy="468.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="2709.5" y="471.252">stripping : string</text><ellipse cx="2700.5" cy="481.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="2709.5" y="484.1426">string : using</text><ellipse cx="2700.5" cy="494.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2709.5" y="497.0332">vector : using</text><ellipse cx="2700.5" cy="507.6641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="2709.5" y="509.9238">morphological_fields : vector&lt;string&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2690.5" x2="2897.5" y1="516.6094" y2="516.6094"/><!--class nuspell.Affix_Table--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="138.2344" id="nuspell.Affix_Table" style="stroke: #000000; stroke-width: 1.5;" width="324" x="2934" y="373.5938"/><ellipse cx="2975.55" cy="389.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2978.5188,395.2344 Q2977.9406,395.5313 2977.3,395.6719 Q2976.6594,395.8281 2975.9563,395.8281 Q2973.4563,395.8281 2972.1281,394.1875 Q2970.8156,392.5313 2970.8156,389.4063 Q2970.8156,386.2813 2972.1281,384.625 Q2973.4563,382.9688 2975.9563,382.9688 Q2976.6594,382.9688 2977.3,383.125 Q2977.9563,383.2813 2978.5188,383.5781 L2978.5188,386.2969 Q2977.8938,385.7188 2977.3,385.4531 Q2976.7063,385.1719 2976.0813,385.1719 Q2974.7375,385.1719 2974.05,386.25 Q2973.3625,387.3125 2973.3625,389.4063 Q2973.3625,391.5 2974.05,392.5781 Q2974.7375,393.6406 2976.0813,393.6406 Q2976.7063,393.6406 2977.3,393.375 Q2977.8938,393.0938 2978.5188,392.5156 L2978.5188,395.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="2995.45" y="393.6953">Affix_Table</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="172" x="3089" y="370.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="170" x="3090" y="382.7266">template &lt;class CharT, class AffixT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2935" x2="3257" y1="405.5938" y2="405.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2942" y="414.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2954" y="419.7988">all_cont_flags : Flag_Set</text><ellipse cx="2945" cy="430.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="2954" y="432.6895">base : using</text><ellipse cx="2945" cy="443.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2954" y="445.5801">iterator : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2935" x2="3257" y1="452.2656" y2="452.2656"/><ellipse cx="2945" cy="464.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2954" y="466.4707">emplace(Args&amp;&amp; a) : auto</text><ellipse cx="2945" cy="477.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="2954" y="479.3613">equal_range(my_string_view&lt;CharT&gt; appending) : auto {query}</text><ellipse cx="2945" cy="489.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="2954" y="492.252">has_continuation_flag(char16_t flag) : auto {query}</text><ellipse cx="2945" cy="502.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="2954" y="505.1426">has_continuation_flags() : auto {query}</text><!--class nuspell.Affixing_Result--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="125.3438" id="nuspell.Affixing_Result" style="stroke: #000000; stroke-width: 1.5;" width="401" x="3293.5" y="380.0938"/><ellipse cx="3388.75" cy="396.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3391.7188,401.7344 Q3391.1406,402.0313 3390.5,402.1719 Q3389.8594,402.3281 3389.1563,402.3281 Q3386.6563,402.3281 3385.3281,400.6875 Q3384.0156,399.0313 3384.0156,395.9063 Q3384.0156,392.7813 3385.3281,391.125 Q3386.6563,389.4688 3389.1563,389.4688 Q3389.8594,389.4688 3390.5,389.625 Q3391.1563,389.7813 3391.7188,390.0781 L3391.7188,392.7969 Q3391.0938,392.2188 3390.5,391.9531 Q3389.9063,391.6719 3389.2813,391.6719 Q3387.9375,391.6719 3387.25,392.75 Q3386.5625,393.8125 3386.5625,395.9063 Q3386.5625,398 3387.25,399.0781 Q3387.9375,400.1406 3389.2813,400.1406 Q3389.9063,400.1406 3390.5,399.875 Q3391.0938,399.5938 3391.7188,399.0156 L3391.7188,401.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="3409.25" y="400.1953">Affixing_Result</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="124" x="3573.5" y="377.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="122" x="3574.5" y="389.2266">template &lt;class... Affixes&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3294.5" x2="3693.5" y1="412.0938" y2="412.0938"/><ellipse cx="3304.5" cy="424.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="3313.5" y="426.2988">base_type : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3294.5" x2="3693.5" y1="432.9844" y2="432.9844"/><ellipse cx="3304.5" cy="444.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="3313.5" y="447.1895">Affixing_Result()</text><ellipse cx="3304.5" cy="457.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="375" x="3313.5" y="460.0801">Affixing_Result(Word_List::const_reference word_entry, const Affixes&amp; affixes)</text><ellipse cx="3304.5" cy="470.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="3313.5" y="472.9707">const_pointer() {query}</text><ellipse cx="3304.5" cy="483.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="3313.5" y="485.8613">operator-&gt;() : auto {query}</text><ellipse cx="3304.5" cy="496.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="3313.5" y="498.752">operator*() : auto&amp; {query}</text><!--class nuspell.Basic_Dictionary--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="202.6875" id="nuspell.Basic_Dictionary" style="stroke: #000000; stroke-width: 1.5;" width="577" x="1810.5" y="2129.5938"/><ellipse cx="2052.25" cy="2145.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2055.2188,2151.2344 Q2054.6406,2151.5313 2054,2151.6719 Q2053.3594,2151.8281 2052.6563,2151.8281 Q2050.1563,2151.8281 2048.8281,2150.1875 Q2047.5156,2148.5313 2047.5156,2145.4063 Q2047.5156,2142.2813 2048.8281,2140.625 Q2050.1563,2138.9688 2052.6563,2138.9688 Q2053.3594,2138.9688 2054,2139.125 Q2054.6563,2139.2813 2055.2188,2139.5781 L2055.2188,2142.2969 Q2054.5938,2141.7188 2054,2141.4531 Q2053.4063,2141.1719 2052.7813,2141.1719 Q2051.4375,2141.1719 2050.75,2142.25 Q2050.0625,2143.3125 2050.0625,2145.4063 Q2050.0625,2147.5 2050.75,2148.5781 Q2051.4375,2149.6406 2052.7813,2149.6406 Q2053.4063,2149.6406 2054,2149.375 Q2054.5938,2149.0938 2055.2188,2148.5156 L2055.2188,2151.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="85" x="2072.75" y="2149.6953">Basic_Dictionary</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1811.5" x2="2386.5" y1="2161.5938" y2="2161.5938"/><polygon fill="none" points="1821.5,2168.5391,1825.5,2172.5391,1821.5,2176.5391,1817.5,2172.5391" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="1830.5" y="2175.7988">enc_details : Encoding_Details</text><polygon fill="none" points="1821.5,2181.4297,1825.5,2185.4297,1821.5,2189.4297,1817.5,2185.4297" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="1830.5" y="2188.6895">List_Strings_Back_Inserter : friend struct</text><polygon fill="none" points="1821.5,2194.3203,1825.5,2198.3203,1821.5,2202.3203,1817.5,2198.3203" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="1830.5" y="2201.5801">external_locale : std::locale</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1811.5" x2="2386.5" y1="2208.2656" y2="2208.2656"/><ellipse cx="1821.5" cy="2220.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1830.5" y="2222.4707">Basic_Dictionary()</text><polygon fill="#FFFF44" points="1821.5,2228.1016,1825.5,2232.1016,1821.5,2236.1016,1817.5,2232.1016" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="1830.5" y="2235.3613">Basic_Dictionary(std::istream&amp; aff, std::istream&amp; dic)</text><polygon fill="#FFFF44" points="1821.5,2240.9922,1825.5,2244.9922,1821.5,2248.9922,1817.5,2244.9922" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="551" x="1830.5" y="2248.252">external_to_internal_encoding(const std::string&amp; in, std::wstring&amp; wide_out, std::string&amp; narrow_out) : auto {query}</text><ellipse cx="1821.5" cy="2258.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="1830.5" y="2261.1426">imbue(const std::locale&amp; loc) : auto</text><polygon fill="#FFFF44" points="1821.5,2266.7734,1825.5,2270.7734,1821.5,2274.7734,1817.5,2270.7734" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="434" x="1830.5" y="2274.0332">internal_to_external_encoding(std::string&amp; in_out, std::wstring&amp; wide_in_out) : auto {query}</text><ellipse cx="1821.5" cy="2284.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="292" x="1830.5" y="2286.9238">load_from_aff_dic(std::istream&amp; aff, std::istream&amp; dic) : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1830.5" x2="2122.5" y1="2288.9238" y2="2288.9238"/><ellipse cx="1821.5" cy="2297.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="323" x="1830.5" y="2299.8145">load_from_aff_dic(const string&amp; file_path_without_extension) : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1830.5" x2="2153.5" y1="2301.8145" y2="2301.8145"/><ellipse cx="1821.5" cy="2310.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="1830.5" y="2312.7051">spell(const std::string&amp; word) : auto {query}</text><ellipse cx="1821.5" cy="2323.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="1830.5" y="2325.5957">suggest(const std::string&amp; word, List_Strings&lt;char&gt;&amp; out) : auto {query}</text><!--class nuspell.Break_Table--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="267.1406" id="nuspell.Break_Table" style="stroke: #000000; stroke-width: 1.5;" width="220" x="22" y="2097.5938"/><ellipse cx="41.05" cy="2113.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M44.0188,2119.2344 Q43.4406,2119.5313 42.8,2119.6719 Q42.1594,2119.8281 41.4563,2119.8281 Q38.9563,2119.8281 37.6281,2118.1875 Q36.3156,2116.5313 36.3156,2113.4063 Q36.3156,2110.2813 37.6281,2108.625 Q38.9563,2106.9688 41.4563,2106.9688 Q42.1594,2106.9688 42.8,2107.125 Q43.4563,2107.2813 44.0188,2107.5781 L44.0188,2110.2969 Q43.3938,2109.7188 42.8,2109.4531 Q42.2063,2109.1719 41.5813,2109.1719 Q40.2375,2109.1719 39.55,2110.25 Q38.8625,2111.3125 38.8625,2113.4063 Q38.8625,2115.5 39.55,2116.5781 Q40.2375,2117.6406 41.5813,2117.6406 Q42.2063,2117.6406 42.8,2117.375 Q43.3938,2117.0938 44.0188,2116.5156 L44.0188,2119.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="66" x="55.95" y="2117.6953">Break_Table</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="134" y="2094.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="135" y="2106.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="23" x2="241" y1="2129.5938" y2="2129.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2138.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="42" y="2143.7988">table : Table_Str</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2151.4297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="42" y="2156.6895">end_word_breaks_last_idx : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2164.3203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="42" y="2169.5801">start_word_breaks_last_idx : size_t</text><ellipse cx="33" cy="2180.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="42" y="2182.4707">StrT : using</text><ellipse cx="33" cy="2193.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="42" y="2195.3613">Table_Str : using</text><ellipse cx="33" cy="2205.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="42" y="2208.252">const_iterator : using</text><ellipse cx="33" cy="2218.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="42" y="2221.1426">iterator : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="23" x2="241" y1="2227.8281" y2="2227.8281"/><ellipse cx="33" cy="2239.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="42" y="2242.0332">Break_Table()</text><ellipse cx="33" cy="2252.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="42" y="2254.9238">Break_Table(const Table_Str&amp; v)</text><ellipse cx="33" cy="2265.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="42" y="2267.8145">Break_Table(Table_Str&amp;&amp; v)</text><ellipse cx="33" cy="2278.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="42" y="2280.7051">end_word_breaks() : auto {query}</text><ellipse cx="33" cy="2291.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="42" y="2293.5957">middle_word_breaks() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2301.2266"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="42" y="2306.4863">order_entries() : auto</text><ellipse cx="33" cy="2317.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="42" y="2319.377">start_word_breaks() : auto {query}</text><ellipse cx="33" cy="2330.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="42" y="2332.2676">operator=(const Table_Str&amp; v) : auto&amp;</text><ellipse cx="33" cy="2342.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="42" y="2345.1582">operator=(Table_Str&amp;&amp; v) : auto&amp;</text><ellipse cx="33" cy="2355.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="42" y="2358.0488">operator=(const Range&amp; range) : auto&amp;</text><!--class nuspell.Casing--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="48" id="nuspell.Casing" style="stroke: #000000; stroke-width: 1.5;" width="67" x="3729.5" y="418.5938"/><ellipse cx="3744.5" cy="434.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3747.4688,440.2344 Q3746.8906,440.5313 3746.25,440.6719 Q3745.6094,440.8281 3744.9063,440.8281 Q3742.4063,440.8281 3741.0781,439.1875 Q3739.7656,437.5313 3739.7656,434.4063 Q3739.7656,431.2813 3741.0781,429.625 Q3742.4063,427.9688 3744.9063,427.9688 Q3745.6094,427.9688 3746.25,428.125 Q3746.9063,428.2813 3747.4688,428.5781 L3747.4688,431.2969 Q3746.8438,430.7188 3746.25,430.4531 Q3745.6563,430.1719 3745.0313,430.1719 Q3743.6875,430.1719 3743,431.25 Q3742.3125,432.3125 3742.3125,434.4063 Q3742.3125,436.5 3743,437.5781 Q3743.6875,438.6406 3745.0313,438.6406 Q3745.6563,438.6406 3746.25,438.375 Q3746.8438,438.0938 3747.4688,437.5156 L3747.4688,440.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="35" x="3758.5" y="438.6953">Casing</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3730.5" x2="3795.5" y1="450.5938" y2="450.5938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="3730.5" x2="3795.5" y1="458.5938" y2="458.5938"/><!--class nuspell.Compound_Check_Pattern--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="125.3438" id="nuspell.Compound_Check_Pattern" style="stroke: #000000; stroke-width: 1.5;" width="167" x="3831.5" y="380.0938"/><ellipse cx="3846.5" cy="396.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3849.4688,401.7344 Q3848.8906,402.0313 3848.25,402.1719 Q3847.6094,402.3281 3846.9063,402.3281 Q3844.4063,402.3281 3843.0781,400.6875 Q3841.7656,399.0313 3841.7656,395.9063 Q3841.7656,392.7813 3843.0781,391.125 Q3844.4063,389.4688 3846.9063,389.4688 Q3847.6094,389.4688 3848.25,389.625 Q3848.9063,389.7813 3849.4688,390.0781 L3849.4688,392.7969 Q3848.8438,392.2188 3848.25,391.9531 Q3847.6563,391.6719 3847.0313,391.6719 Q3845.6875,391.6719 3845,392.75 Q3844.3125,393.8125 3844.3125,395.9063 Q3844.3125,398 3845,399.0781 Q3845.6875,400.1406 3847.0313,400.1406 Q3847.6563,400.1406 3848.25,399.875 Q3848.8438,399.5938 3849.4688,399.0156 L3849.4688,401.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="135" x="3860.5" y="400.1953">Compound_Check_Pattern</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3832.5" x2="3997.5" y1="412.0938" y2="412.0938"/><ellipse cx="3842.5" cy="424.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="3851.5" y="426.2988">first_word_flag : char16_t</text><ellipse cx="3842.5" cy="436.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="3851.5" y="439.1895">second_word_flag : char16_t</text><ellipse cx="3842.5" cy="449.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3851.5" y="452.0801">first_word_end : string</text><ellipse cx="3842.5" cy="462.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="3851.5" y="464.9707">replacement : string</text><ellipse cx="3842.5" cy="475.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="3851.5" y="477.8613">second_word_begin : string</text><ellipse cx="3842.5" cy="488.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="3851.5" y="490.752">string : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3832.5" x2="3997.5" y1="497.4375" y2="497.4375"/><!--class nuspell.Compound_Pattern--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="125.3438" id="nuspell.Compound_Pattern" style="stroke: #000000; stroke-width: 1.5;" width="262" x="277" y="2168.5938"/><ellipse cx="301" cy="2184.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M303.9688,2190.2344 Q303.3906,2190.5313 302.75,2190.6719 Q302.1094,2190.8281 301.4063,2190.8281 Q298.9063,2190.8281 297.5781,2189.1875 Q296.2656,2187.5313 296.2656,2184.4063 Q296.2656,2181.2813 297.5781,2179.625 Q298.9063,2177.9688 301.4063,2177.9688 Q302.1094,2177.9688 302.75,2178.125 Q303.4063,2178.2813 303.9688,2178.5781 L303.9688,2181.2969 Q303.3438,2180.7188 302.75,2180.4531 Q302.1563,2180.1719 301.5313,2180.1719 Q300.1875,2180.1719 299.5,2181.25 Q298.8125,2182.3125 298.8125,2184.4063 Q298.8125,2186.5 299.5,2187.5781 Q300.1875,2188.6406 301.5313,2188.6406 Q302.1563,2188.6406 302.75,2188.375 Q303.3438,2188.0938 303.9688,2187.5156 L303.9688,2190.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="97" x="317" y="2188.6953">Compound_Pattern</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="431" y="2165.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="432" y="2177.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="278" x2="538" y1="2200.5938" y2="2200.5938"/><ellipse cx="288" cy="2212.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="297" y="2214.7988">replacement : StrT</text><ellipse cx="288" cy="2225.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="297" y="2227.6895">begin_end_chars : String_Pair&lt;CharT&gt;</text><ellipse cx="288" cy="2238.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="297" y="2240.5801">match_first_only_unaffixed_or_zero_affixed : bool</text><ellipse cx="288" cy="2251.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="297" y="2253.4707">first_word_flag : char16_t</text><ellipse cx="288" cy="2264.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="297" y="2266.3613">second_word_flag : char16_t</text><ellipse cx="288" cy="2276.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="297" y="2279.252">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="278" x2="538" y1="2285.9375" y2="2285.9375"/><!--class nuspell.Compound_Rule_Table--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="189.7969" id="nuspell.Compound_Rule_Table" style="stroke: #000000; stroke-width: 1.5;" width="369" x="1121.5" y="1158.0938"/><ellipse cx="1241.75" cy="1174.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1244.7188,1179.7344 Q1244.1406,1180.0313 1243.5,1180.1719 Q1242.8594,1180.3281 1242.1563,1180.3281 Q1239.6563,1180.3281 1238.3281,1178.6875 Q1237.0156,1177.0313 1237.0156,1173.9063 Q1237.0156,1170.7813 1238.3281,1169.125 Q1239.6563,1167.4688 1242.1563,1167.4688 Q1242.8594,1167.4688 1243.5,1167.625 Q1244.1563,1167.7813 1244.7188,1168.0781 L1244.7188,1170.7969 Q1244.0938,1170.2188 1243.5,1169.9531 Q1242.9063,1169.6719 1242.2813,1169.6719 Q1240.9375,1169.6719 1240.25,1170.75 Q1239.5625,1171.8125 1239.5625,1173.9063 Q1239.5625,1176 1240.25,1177.0781 Q1240.9375,1178.1406 1242.2813,1178.1406 Q1242.9063,1178.1406 1243.5,1177.875 Q1244.0938,1177.5938 1244.7188,1177.0156 L1244.7188,1179.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="120" x="1262.25" y="1178.1953">Compound_Rule_Table</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1122.5" x2="1489.5" y1="1190.0938" y2="1190.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1129.5" y="1199.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1141.5" y="1204.2988">all_flags : Flag_Set</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1129.5" y="1211.9297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1141.5" y="1217.1895">rules : std::vector&lt;std::u16string&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1122.5" x2="1489.5" y1="1223.875" y2="1223.875"/><ellipse cx="1132.5" cy="1235.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1141.5" y="1238.0801">Compound_Rule_Table()</text><ellipse cx="1132.5" cy="1248.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="1141.5" y="1250.9707">Compound_Rule_Table(const std::vector&lt;std::u16string&gt;&amp; tbl)</text><ellipse cx="1132.5" cy="1261.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="1141.5" y="1263.8613">Compound_Rule_Table(std::vector&lt;std::u16string&gt;&amp;&amp; tbl)</text><ellipse cx="1132.5" cy="1274.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1141.5" y="1276.752">empty() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1129.5" y="1284.3828"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="1141.5" y="1289.6426">fill_all_flags() : auto</text><ellipse cx="1132.5" cy="1300.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="1141.5" y="1302.5332">has_any_of_flags(const Flag_Set&amp; f) : auto {query}</text><ellipse cx="1132.5" cy="1313.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="1141.5" y="1315.4238">match_any_rule(const std::vector&lt;const Flag_Set*&gt; data) : auto {query}</text><ellipse cx="1132.5" cy="1326.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="1141.5" y="1328.3145">operator=(const std::vector&lt;std::u16string&gt;&amp; tbl) : auto</text><ellipse cx="1132.5" cy="1338.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="1141.5" y="1341.2051">operator=(std::vector&lt;std::u16string&gt;&amp;&amp; tbl) : auto</text><!--class nuspell.Compounding_Result--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="86.6719" id="nuspell.Compounding_Result" style="stroke: #000000; stroke-width: 1.5;" width="156" x="2716" y="1209.5938"/><ellipse cx="2737.75" cy="1225.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2740.7188,1231.2344 Q2740.1406,1231.5313 2739.5,1231.6719 Q2738.8594,1231.8281 2738.1563,1231.8281 Q2735.6563,1231.8281 2734.3281,1230.1875 Q2733.0156,1228.5313 2733.0156,1225.4063 Q2733.0156,1222.2813 2734.3281,1220.625 Q2735.6563,1218.9688 2738.1563,1218.9688 Q2738.8594,1218.9688 2739.5,1219.125 Q2740.1563,1219.2813 2740.7188,1219.5781 L2740.7188,1222.2969 Q2740.0938,1221.7188 2739.5,1221.4531 Q2738.9063,1221.1719 2738.2813,1221.1719 Q2736.9375,1221.1719 2736.25,1222.25 Q2735.5625,1223.3125 2735.5625,1225.4063 Q2735.5625,1227.5 2736.25,1228.5781 Q2736.9375,1229.6406 2738.2813,1229.6406 Q2738.9063,1229.6406 2739.5,1229.375 Q2740.0938,1229.0938 2740.7188,1228.5156 L2740.7188,1231.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="109" x="2753.25" y="1229.6953">Compounding_Result</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2717" x2="2871" y1="1241.5938" y2="1241.5938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="2717" x2="2871" y1="1249.5938" y2="1249.5938"/><ellipse cx="2727" cy="1261.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="2736" y="1263.7988">const_pointer() {query}</text><ellipse cx="2727" cy="1274.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="2736" y="1276.6895">operator-&gt;() : auto {query}</text><ellipse cx="2727" cy="1287.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="2736" y="1289.5801">operator*() : auto&amp; {query}</text><!--class nuspell.Condition--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="215.5781" id="nuspell.Condition" style="stroke: #000000; stroke-width: 1.5;" width="305" x="2907.5" y="1145.0938"/><ellipse cx="2974.75" cy="1161.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2977.7188,1166.7344 Q2977.1406,1167.0313 2976.5,1167.1719 Q2975.8594,1167.3281 2975.1563,1167.3281 Q2972.6563,1167.3281 2971.3281,1165.6875 Q2970.0156,1164.0313 2970.0156,1160.9063 Q2970.0156,1157.7813 2971.3281,1156.125 Q2972.6563,1154.4688 2975.1563,1154.4688 Q2975.8594,1154.4688 2976.5,1154.625 Q2977.1563,1154.7813 2977.7188,1155.0781 L2977.7188,1157.7969 Q2977.0938,1157.2188 2976.5,1156.9531 Q2975.9063,1156.6719 2975.2813,1156.6719 Q2973.9375,1156.6719 2973.25,1157.75 Q2972.5625,1158.8125 2972.5625,1160.9063 Q2972.5625,1163 2973.25,1164.0781 Q2973.9375,1165.1406 2975.2813,1165.1406 Q2975.9063,1165.1406 2976.5,1164.875 Q2977.0938,1164.5938 2977.7188,1164.0156 L2977.7188,1166.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="49" x="2995.25" y="1165.1953">Condition</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="3104.5" y="1142.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="3105.5" y="1154.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2908.5" x2="3211.5" y1="1177.0938" y2="1177.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2915.5" y="1186.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53" x="2927.5" y="1191.2988">cond : StrT</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2915.5" y="1198.9297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2927.5" y="1204.1895">length : size_t</text><ellipse cx="2918.5" cy="1214.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="2927.5" y="1217.0801">StrT : using</text><ellipse cx="2918.5" cy="1227.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="2927.5" y="1229.9707">tuple : using</text><ellipse cx="2918.5" cy="1240.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2927.5" y="1242.8613">vector : using</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2915.5" y="1250.4922"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="2927.5" y="1255.752">spans : vector&lt;tuple&lt;size_t, size_t, Span_Type&gt; &gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2908.5" x2="3211.5" y1="1262.4375" y2="1262.4375"/><ellipse cx="2918.5" cy="1274.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="2927.5" y="1276.6426">Condition()</text><ellipse cx="2918.5" cy="1287.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="2927.5" y="1289.5332">Condition(const StrT&amp; condition)</text><ellipse cx="2918.5" cy="1300.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2927.5" y="1302.4238">Condition(StrT&amp;&amp; condition)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2915.5" y="1310.0547"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2927.5" y="1315.3145">construct() : auto</text><ellipse cx="2918.5" cy="1325.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="2927.5" y="1328.2051">match(const StrT&amp; s, size_t pos, size_t len) : auto {query}</text><ellipse cx="2918.5" cy="1338.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="2927.5" y="1341.0957">match_prefix(const StrT&amp; s) : auto {query}</text><ellipse cx="2918.5" cy="1351.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="2927.5" y="1353.9863">match_suffix(const StrT&amp; s) : auto {query}</text><!--class nuspell.Dict_Base--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="744.0938" id="nuspell.Dict_Base" style="stroke: #000000; stroke-width: 1.5;" width="838" x="1526" y="881.0938"/><ellipse cx="1915.25" cy="897.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1918.2188,902.7344 Q1917.6406,903.0313 1917,903.1719 Q1916.3594,903.3281 1915.6563,903.3281 Q1913.1563,903.3281 1911.8281,901.6875 Q1910.5156,900.0313 1910.5156,896.9063 Q1910.5156,893.7813 1911.8281,892.125 Q1913.1563,890.4688 1915.6563,890.4688 Q1916.3594,890.4688 1917,890.625 Q1917.6563,890.7813 1918.2188,891.0781 L1918.2188,893.7969 Q1917.5938,893.2188 1917,892.9531 Q1916.4063,892.6719 1915.7813,892.6719 Q1914.4375,892.6719 1913.75,893.75 Q1913.0625,894.8125 1913.0625,896.9063 Q1913.0625,899 1913.75,900.0781 Q1914.4375,901.1406 1915.7813,901.1406 Q1916.4063,901.1406 1917,900.875 Q1917.5938,900.5938 1918.2188,900.0156 L1918.2188,902.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="51" x="1935.75" y="901.1953">Dict_Base</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1527" x2="2363" y1="913.0938" y2="913.0938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="1527" x2="2363" y1="921.0938" y2="921.0938"/><ellipse cx="1537" cy="933.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1546" y="935.2988">Dict_Base()</text><ellipse cx="1537" cy="945.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="382" x="1546" y="948.1895">add_sug_if_correct(std::basic_string&lt;CharT&gt;&amp; word, OutIter&amp; out) : auto {query}</text><ellipse cx="1537" cy="958.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="1546" y="961.0801">affix_NOT_valid(const Prefix&lt;CharT&gt;&amp; a) : auto {query}</text><ellipse cx="1537" cy="971.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="1546" y="973.9707">affix_NOT_valid(const Suffix&lt;CharT&gt;&amp; a) : auto {query}</text><ellipse cx="1537" cy="984.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="1546" y="986.8613">bad_char_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1537" cy="997.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="1546" y="999.752">check_compound(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1010.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="631" x="1546" y="1012.6426">check_compound(std::basic_string&lt;CharT&gt;&amp; word, size_t start_pos, size_t num_part, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1537" cy="1023.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="711" x="1546" y="1025.5332">check_compound_classic(std::basic_string&lt;CharT&gt;&amp; word, size_t start_pos, size_t i, size_t num_part, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1537" cy="1036.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="803" x="1546" y="1038.4238">check_compound_with_pattern_replacements(std::basic_string&lt;CharT&gt;&amp; word, size_t start_pos, size_t i, size_t num_part, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1537" cy="1049.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="812" x="1546" y="1051.3145">check_compound_with_rules(std::basic_string&lt;CharT&gt;&amp; word, std::vector&lt;const Flag_Set*&gt;&amp; words_data, size_t start_pos, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1537" cy="1061.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="1546" y="1064.2051">check_word(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1074.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="1546" y="1077.0957">check_word_in_compound(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1087.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="378" x="1546" y="1089.9863">extra_char_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1537" cy="1100.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="399" x="1546" y="1102.877">forgotten_char_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1537" cy="1113.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="1546" y="1115.7676">is_circumfix(const AffixT&amp; a) : auto {query}</text><ellipse cx="1537" cy="1126.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="1546" y="1128.6582">is_valid_inside_compound(const Flag_Set&amp; flags) : auto {query}</text><ellipse cx="1537" cy="1139.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="373" x="1546" y="1141.5488">keyboard_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1537" cy="1152.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="1546" y="1154.4395">map_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out, size_t i) : auto {query}</text><ellipse cx="1537" cy="1165.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="1546" y="1167.3301">outer_affix_NOT_valid(const AffixT&amp; a) : auto {query}</text><ellipse cx="1537" cy="1177.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="1546" y="1180.2207">phonetic_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1537" cy="1190.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="344" x="1546" y="1193.1113">rep_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1537" cy="1203.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="329" x="1546" y="1206.002">spell_break(std::basic_string&lt;CharT&gt;&amp; s, size_t depth) : auto {query}</text><ellipse cx="1537" cy="1216.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="1546" y="1218.8926">spell_casing(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1229.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="1546" y="1231.7832">spell_casing_title(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1242.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="1546" y="1244.6738">spell_casing_upper(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1255.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="1546" y="1257.5645">spell_priv(const std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1268.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="1546" y="1270.4551">spell_priv(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1281.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="452" x="1546" y="1283.3457">spell_sharps(std::basic_string&lt;CharT&gt;&amp; base, size_t n_pos, size_t n, size_t rep) : auto {query}</text><ellipse cx="1537" cy="1293.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="570" x="1546" y="1296.2363">strip_2_pfx_sfx_3(const Prefix&lt;CharT&gt;&amp; pe1, const Prefix&lt;CharT&gt;&amp; pe2, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1306.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="1546" y="1309.127">strip_2_prefixes_then_suffix(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1319.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="568" x="1546" y="1322.0176">strip_2_sfx_pfx_3(const Suffix&lt;CharT&gt;&amp; se1, const Suffix&lt;CharT&gt;&amp; se2, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1332.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="1546" y="1334.9082">strip_2_suffixes_then_prefix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1345.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="553" x="1546" y="1347.7988">strip_p_s_p_3(const Prefix&lt;CharT&gt;&amp; pe1, const Suffix&lt;CharT&gt;&amp; se1, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1358.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="551" x="1546" y="1360.6895">strip_pfx_2_sfx_3(const Prefix&lt;CharT&gt;&amp; pe1, const Suffix&lt;CharT&gt;&amp; se1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1371.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="435" x="1546" y="1373.5801">strip_pfx_then_pfx_2(const Prefix&lt;CharT&gt;&amp; pe1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1384.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="429" x="1546" y="1386.4707">strip_pfx_then_sfx_2(const Prefix&lt;CharT&gt;&amp; pe, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1397.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="1546" y="1399.3613">strip_pfx_then_sfx_comm_2(const Prefix&lt;CharT&gt;&amp; pe, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1409.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="1546" y="1412.252">strip_prefix_only(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1422.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="1546" y="1425.1426">strip_prefix_suffix_prefix(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1435.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="1546" y="1438.0332">strip_prefix_then_2_suffixes(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1448.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="1546" y="1450.9238">strip_prefix_then_prefix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1461.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="1546" y="1463.8145">strip_prefix_then_suffix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1474.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="403" x="1546" y="1476.7051">strip_prefix_then_suffix_commutative(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1487.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="553" x="1546" y="1489.5957">strip_s_p_s_3(const Suffix&lt;CharT&gt;&amp; se1, const Prefix&lt;CharT&gt;&amp; pe1, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1537" cy="1500.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="551" x="1546" y="1502.4863">strip_sfx_2_pfx_3(const Suffix&lt;CharT&gt;&amp; se1, const Prefix&lt;CharT&gt;&amp; pe1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1513.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="428" x="1546" y="1515.377">strip_sfx_then_pfx_2(const Suffix&lt;CharT&gt;&amp; se, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1526.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="434" x="1546" y="1528.2676">strip_sfx_then_sfx_2(const Suffix&lt;CharT&gt;&amp; se1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1538.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="287" x="1546" y="1541.1582">strip_suffix_only(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1551.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="323" x="1546" y="1554.0488">strip_suffix_prefix_suffix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1564.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="1546" y="1566.9395">strip_suffix_then_2_prefixes(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1577.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="1546" y="1579.8301">strip_suffix_then_prefix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1590.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="1546" y="1592.7207">strip_suffix_then_suffix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1537" cy="1603.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="346" x="1546" y="1605.6113">suggest_priv(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1537" cy="1616.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="376" x="1546" y="1618.502">try_rep_suggestion(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><!--class nuspell.Encoding--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="241.3594" id="nuspell.Encoding" style="stroke: #000000; stroke-width: 1.5;" width="216" x="3248" y="1132.5938"/><ellipse cx="3327.25" cy="1148.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3330.2188,1154.2344 Q3329.6406,1154.5313 3329,1154.6719 Q3328.3594,1154.8281 3327.6563,1154.8281 Q3325.1563,1154.8281 3323.8281,1153.1875 Q3322.5156,1151.5313 3322.5156,1148.4063 Q3322.5156,1145.2813 3323.8281,1143.625 Q3325.1563,1141.9688 3327.6563,1141.9688 Q3328.3594,1141.9688 3329,1142.125 Q3329.6563,1142.2813 3330.2188,1142.5781 L3330.2188,1145.2969 Q3329.5938,1144.7188 3329,1144.4531 Q3328.4063,1144.1719 3327.7813,1144.1719 Q3326.4375,1144.1719 3325.75,1145.25 Q3325.0625,1146.3125 3325.0625,1148.4063 Q3325.0625,1150.5 3325.75,1151.5781 Q3326.4375,1152.6406 3327.7813,1152.6406 Q3328.4063,1152.6406 3329,1152.375 Q3329.5938,1152.0938 3330.2188,1151.5156 L3330.2188,1154.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="49" x="3347.75" y="1152.6953">Encoding</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3249" x2="3463" y1="1164.5938" y2="1164.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3256" y="1173.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="3268" y="1178.7988">name : std::string</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3249" x2="3463" y1="1185.4844" y2="1185.4844"/><ellipse cx="3259" cy="1197.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="54" x="3268" y="1199.6895">Encoding()</text><ellipse cx="3259" cy="1210.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="3268" y="1212.5801">Encoding(const std::string&amp; e)</text><ellipse cx="3259" cy="1223.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3268" y="1225.4707">Encoding(std::string&amp;&amp; e)</text><ellipse cx="3259" cy="1236.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="3268" y="1238.3613">Encoding(const char* e)</text><ellipse cx="3259" cy="1248.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="3268" y="1251.252">operatorEnc_Type() {query}</text><ellipse cx="3259" cy="1261.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="3268" y="1264.1426">string&amp;() {query}</text><ellipse cx="3259" cy="1274.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3268" y="1277.0332">empty() : auto {query}</text><ellipse cx="3259" cy="1287.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3268" y="1289.9238">is_utf8() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3256" y="1297.5547"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="3268" y="1302.8145">normalize_name() : auto</text><ellipse cx="3259" cy="1313.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="3268" y="1315.7051">value_or_default() : auto</text><ellipse cx="3259" cy="1326.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3268" y="1328.5957">operator=(const std::string&amp; e) : auto&amp;</text><ellipse cx="3259" cy="1339.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="3268" y="1341.4863">operator=(std::string&amp;&amp; e) : auto&amp;</text><ellipse cx="3259" cy="1352.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="3268" y="1354.377">operator=(const char* e) : auto&amp;</text><ellipse cx="3259" cy="1365.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="3268" y="1367.2676">value() : auto&amp; {query}</text><!--class nuspell.Encoding_Details--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="48" id="nuspell.Encoding_Details" style="stroke: #000000; stroke-width: 1.5;" width="121" x="2038.5" y="2914.5938"/><ellipse cx="2053.5" cy="2930.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2056.4688,2936.2344 Q2055.8906,2936.5313 2055.25,2936.6719 Q2054.6094,2936.8281 2053.9063,2936.8281 Q2051.4063,2936.8281 2050.0781,2935.1875 Q2048.7656,2933.5313 2048.7656,2930.4063 Q2048.7656,2927.2813 2050.0781,2925.625 Q2051.4063,2923.9688 2053.9063,2923.9688 Q2054.6094,2923.9688 2055.25,2924.125 Q2055.9063,2924.2813 2056.4688,2924.5781 L2056.4688,2927.2969 Q2055.8438,2926.7188 2055.25,2926.4531 Q2054.6563,2926.1719 2054.0313,2926.1719 Q2052.6875,2926.1719 2052,2927.25 Q2051.3125,2928.3125 2051.3125,2930.4063 Q2051.3125,2932.5 2052,2933.5781 Q2052.6875,2934.6406 2054.0313,2934.6406 Q2054.6563,2934.6406 2055.25,2934.375 Q2055.8438,2934.0938 2056.4688,2933.5156 L2056.4688,2936.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="89" x="2067.5" y="2934.6953">Encoding_Details</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2039.5" x2="2158.5" y1="2946.5938" y2="2946.5938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="2039.5" x2="2158.5" y1="2954.5938" y2="2954.5938"/><!--class nuspell.Finder--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="267.1406" id="nuspell.Finder" style="stroke: #000000; stroke-width: 1.5;" width="277" x="3499.5" y="1119.5938"/><ellipse cx="3617.25" cy="1135.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3620.2188,1141.2344 Q3619.6406,1141.5313 3619,1141.6719 Q3618.3594,1141.8281 3617.6563,1141.8281 Q3615.1563,1141.8281 3613.8281,1140.1875 Q3612.5156,1138.5313 3612.5156,1135.4063 Q3612.5156,1132.2813 3613.8281,1130.625 Q3615.1563,1128.9688 3617.6563,1128.9688 Q3618.3594,1128.9688 3619,1129.125 Q3619.6563,1129.2813 3620.2188,1129.5781 L3620.2188,1132.2969 Q3619.5938,1131.7188 3619,1131.4531 Q3618.4063,1131.1719 3617.7813,1131.1719 Q3616.4375,1131.1719 3615.75,1132.25 Q3615.0625,1133.3125 3615.0625,1135.4063 Q3615.0625,1137.5 3615.75,1138.5781 Q3616.4375,1139.6406 3617.7813,1139.6406 Q3618.4063,1139.6406 3619,1139.375 Q3619.5938,1139.0938 3620.2188,1138.5156 L3620.2188,1141.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="33" x="3637.75" y="1139.6953">Finder</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3500.5" x2="3775.5" y1="1151.5938" y2="1151.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3507.5" y="1160.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="3519.5" y="1165.7988">dictionaries : Dict_List</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3507.5" y="1173.4297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3519.5" y="1178.6895">paths : std::vector&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3507.5" y="1186.3203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3519.5" y="1191.5801">Dict_List : using</text><ellipse cx="3510.5" cy="1202.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3519.5" y="1204.4707">const_iterator : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3500.5" x2="3775.5" y1="1211.1563" y2="1211.1563"/><ellipse cx="3510.5" cy="1223.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="3519.5" y="1225.3613">add_apacheopenoffice_paths() : auto</text><ellipse cx="3510.5" cy="1235.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="3519.5" y="1238.252">add_default_paths() : auto</text><ellipse cx="3510.5" cy="1248.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="3519.5" y="1251.1426">add_libreoffice_paths() : auto</text><ellipse cx="3510.5" cy="1261.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="3519.5" y="1264.0332">add_mozilla_paths() : auto</text><ellipse cx="3510.5" cy="1274.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="3519.5" y="1276.9238">begin() : auto {query}</text><ellipse cx="3510.5" cy="1287.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="3519.5" y="1289.8145">end() : auto {query}</text><ellipse cx="3510.5" cy="1300.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="3519.5" y="1302.7051">equal_range(const std::string&amp; dict) : auto {query}</text><ellipse cx="3510.5" cy="1313.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="3519.5" y="1315.5957">find(const std::string&amp; dict) : auto {query}</text><ellipse cx="3510.5" cy="1326.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="3519.5" y="1328.4863">get_dictionary(const std::string&amp; dict) : auto {query}</text><ellipse cx="3510.5" cy="1339.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="3519.5" y="1341.377">search_dictionaries() : auto</text><ellipse cx="3510.5" cy="1352.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="196" x="3519.5" y="1354.2676">search_dictionaries_in_all_paths() : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="3519.5" x2="3715.5" y1="1356.2676" y2="1356.2676"/><ellipse cx="3510.5" cy="1364.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="3519.5" y="1367.1582">get_all_dictionaries() : auto&amp; {query}</text><ellipse cx="3510.5" cy="1377.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="3519.5" y="1380.0488">get_all_paths() : auto&amp; {query}</text><!--class nuspell.Hash_Multiset--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="370.2656" id="nuspell.Hash_Multiset" style="stroke: #000000; stroke-width: 1.5;" width="737" x="3811.5" y="1068.0938"/><ellipse cx="3826.5" cy="1084.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3829.4688,1089.7344 Q3828.8906,1090.0313 3828.25,1090.1719 Q3827.6094,1090.3281 3826.9063,1090.3281 Q3824.4063,1090.3281 3823.0781,1088.6875 Q3821.7656,1087.0313 3821.7656,1083.9063 Q3821.7656,1080.7813 3823.0781,1079.125 Q3824.4063,1077.4688 3826.9063,1077.4688 Q3827.6094,1077.4688 3828.25,1077.625 Q3828.9063,1077.7813 3829.4688,1078.0781 L3829.4688,1080.7969 Q3828.8438,1080.2188 3828.25,1079.9531 Q3827.6563,1079.6719 3827.0313,1079.6719 Q3825.6875,1079.6719 3825,1080.75 Q3824.3125,1081.8125 3824.3125,1083.9063 Q3824.3125,1086 3825,1087.0781 Q3825.6875,1088.1406 3827.0313,1088.1406 Q3827.6563,1088.1406 3828.25,1087.875 Q3828.8438,1087.5938 3829.4688,1087.0156 L3829.4688,1089.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="71" x="3840.5" y="1088.1953">Hash_Multiset</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="632" x="3919.5" y="1065.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="630" x="3920.5" y="1077.2266">template &lt;class Value, class Key = Value, class KeyExtract = identity, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3812.5" x2="4547.5" y1="1100.0938" y2="1100.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3819.5" y="1109.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="3831.5" y="1114.2988">max_load_factor_capacity : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3819.5" y="1121.9297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="3831.5" y="1127.1895">sz : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3819.5" y="1134.8203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="181" x="3831.5" y="1140.0801">max_load_fact : static constexpr float</text><line style="stroke: #000000; stroke-width: 1.0;" x1="3831.5" x2="4012.5" y1="1142.0801" y2="1142.0801"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3819.5" y="1147.7109"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="3831.5" y="1152.9707">data : std::vector&lt;bucket_type&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3819.5" y="1160.6016"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="3831.5" y="1165.8613">bucket_type : using</text><ellipse cx="3822.5" cy="1176.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3831.5" y="1178.752">const_pointer : using</text><ellipse cx="3822.5" cy="1189.3828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="3831.5" y="1191.6426">const_reference : using</text><ellipse cx="3822.5" cy="1202.2734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3831.5" y="1204.5332">difference_type : using</text><ellipse cx="3822.5" cy="1215.1641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="3831.5" y="1217.4238">hasher : using</text><ellipse cx="3822.5" cy="1228.0547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3831.5" y="1230.3145">key_type : using</text><ellipse cx="3822.5" cy="1240.9453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="3831.5" y="1243.2051">local_const_iterator : using</text><ellipse cx="3822.5" cy="1253.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="3831.5" y="1256.0957">local_iterator : using</text><ellipse cx="3822.5" cy="1266.7266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3831.5" y="1268.9863">pointer : using</text><ellipse cx="3822.5" cy="1279.6172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="3831.5" y="1281.877">reference : using</text><ellipse cx="3822.5" cy="1292.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3831.5" y="1294.7676">size_type : using</text><ellipse cx="3822.5" cy="1305.3984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="3831.5" y="1307.6582">value_type : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3812.5" x2="4547.5" y1="1314.3438" y2="1314.3438"/><ellipse cx="3822.5" cy="1326.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3831.5" y="1328.5488">Hash_Multiset()</text><ellipse cx="3822.5" cy="1339.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3831.5" y="1341.4395">emplace(Args&amp;&amp; a) : auto</text><ellipse cx="3822.5" cy="1352.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3831.5" y="1354.3301">empty() : auto {query}</text><ellipse cx="3822.5" cy="1364.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="3831.5" y="1367.2207">equal_range(const CompatibleKey&amp; key) : auto {query}</text><ellipse cx="3822.5" cy="1377.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="3831.5" y="1380.1113">equal_range_nonconst_unsafe(const CompatibleKey&amp; key) : auto</text><ellipse cx="3822.5" cy="1390.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="3831.5" y="1393.002">insert(const_reference value) : auto</text><ellipse cx="3822.5" cy="1403.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="3831.5" y="1405.8926">rehash(size_t count) : auto</text><ellipse cx="3822.5" cy="1416.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="3831.5" y="1418.7832">reserve(size_t count) : auto</text><ellipse cx="3822.5" cy="1429.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="3831.5" y="1431.6738">size() : auto {query}</text><!--class nuspell.List_Strings--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="1092.1406" id="nuspell.List_Strings" style="stroke: #000000; stroke-width: 1.5;" width="358" x="2423" y="1685.0938"/><ellipse cx="2511.75" cy="1701.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2514.7188,1706.7344 Q2514.1406,1707.0313 2513.5,1707.1719 Q2512.8594,1707.3281 2512.1563,1707.3281 Q2509.6563,1707.3281 2508.3281,1705.6875 Q2507.0156,1704.0313 2507.0156,1700.9063 Q2507.0156,1697.7813 2508.3281,1696.125 Q2509.6563,1694.4688 2512.1563,1694.4688 Q2512.8594,1694.4688 2513.5,1694.625 Q2514.1563,1694.7813 2514.7188,1695.0781 L2514.7188,1697.7969 Q2514.0938,1697.2188 2513.5,1696.9531 Q2512.9063,1696.6719 2512.2813,1696.6719 Q2510.9375,1696.6719 2510.25,1697.75 Q2509.5625,1698.8125 2509.5625,1700.9063 Q2509.5625,1703 2510.25,1704.0781 Q2510.9375,1705.1406 2512.2813,1705.1406 Q2512.9063,1705.1406 2513.5,1704.875 Q2514.0938,1704.5938 2514.7188,1704.0156 L2514.7188,1706.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="2532.25" y="1705.1953">List_Strings</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="2673" y="1682.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="2674" y="1694.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2424" x2="2780" y1="1717.0938" y2="1717.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2431" y="1726.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="38" x="2443" y="1731.2988">d : VecT</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2431" y="1738.9297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="49" x="2443" y="1744.1895">sz : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2431" y="1751.8203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="2443" y="1757.0801">VecT : using</text><ellipse cx="2434" cy="1767.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2443" y="1769.9707">allocator_type : using</text><ellipse cx="2434" cy="1780.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2443" y="1782.8613">const_iterator : using</text><ellipse cx="2434" cy="1793.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2443" y="1795.752">const_pointer : using</text><ellipse cx="2434" cy="1806.3828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2443" y="1808.6426">const_reference : using</text><ellipse cx="2434" cy="1819.2734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="2443" y="1821.5332">const_reverse_iterator : using</text><ellipse cx="2434" cy="1832.1641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2443" y="1834.4238">difference_type : using</text><ellipse cx="2434" cy="1845.0547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2443" y="1847.3145">iterator : using</text><ellipse cx="2434" cy="1857.9453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2443" y="1860.2051">pointer : using</text><ellipse cx="2434" cy="1870.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2443" y="1873.0957">reference : using</text><ellipse cx="2434" cy="1883.7266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="2443" y="1885.9863">reverse_iterator : using</text><ellipse cx="2434" cy="1896.6172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2443" y="1898.877">size_type : using</text><ellipse cx="2434" cy="1909.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2443" y="1911.7676">value_type : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2424" x2="2780" y1="1918.4531" y2="1918.4531"/><ellipse cx="2434" cy="1930.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="2443" y="1932.6582">List_Strings()</text><ellipse cx="2434" cy="1943.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2443" y="1945.5488">List_Strings(size_type n)</text><ellipse cx="2434" cy="1956.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="2443" y="1958.4395">List_Strings(size_type n, const_reference value)</text><ellipse cx="2434" cy="1969.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="2443" y="1971.3301">List_Strings(InputIterator first, InputIterator last)</text><ellipse cx="2434" cy="1981.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="2443" y="1984.2207">List_Strings(std::initializer_list&lt;value_type&gt; il)</text><ellipse cx="2434" cy="1994.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="2443" y="1997.1113">List_Strings(const List_Strings&amp; other)</text><ellipse cx="2434" cy="2007.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="2443" y="2010.002">List_Strings(List_Strings&amp;&amp; other)</text><ellipse cx="2434" cy="2020.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="2443" y="2022.8926">assign(InputIterator first, InputIterator last) : auto</text><ellipse cx="2434" cy="2033.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="2443" y="2035.7832">begin() : auto</text><ellipse cx="2434" cy="2046.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="2443" y="2048.6738">begin() : auto {query}</text><ellipse cx="2434" cy="2059.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="2443" y="2061.5645">capacity() : auto {query}</text><ellipse cx="2434" cy="2072.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="2443" y="2074.4551">cbegin() : auto {query}</text><ellipse cx="2434" cy="2085.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2443" y="2087.3457">cend() : auto {query}</text><ellipse cx="2434" cy="2097.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="2443" y="2100.2363">clear() : auto</text><ellipse cx="2434" cy="2110.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="2443" y="2113.127">crbegin() : auto {query}</text><ellipse cx="2434" cy="2123.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2443" y="2126.0176">crend() : auto {query}</text><ellipse cx="2434" cy="2136.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="2443" y="2138.9082">data() : auto</text><ellipse cx="2434" cy="2149.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2443" y="2151.7988">data() : auto {query}</text><ellipse cx="2434" cy="2162.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="2443" y="2164.6895">emplace(const_iterator pos, Args&amp;&amp; args) : auto</text><ellipse cx="2434" cy="2175.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2443" y="2177.5801">empty() : auto {query}</text><ellipse cx="2434" cy="2188.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="2443" y="2190.4707">end() : auto</text><ellipse cx="2434" cy="2201.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="2443" y="2203.3613">end() : auto {query}</text><ellipse cx="2434" cy="2213.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="2443" y="2216.252">erase(const_iterator position) : auto</text><ellipse cx="2434" cy="2226.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="2443" y="2229.1426">erase(const_iterator first, const_iterator last) : auto</text><ellipse cx="2434" cy="2239.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2443" y="2242.0332">get_allocator() : auto {query}</text><ellipse cx="2434" cy="2252.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="2443" y="2254.9238">insert(const_iterator pos, const_reference x) : auto</text><ellipse cx="2434" cy="2265.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="2443" y="2267.8145">insert(const_iterator pos, value_type&amp;&amp; x) : auto</text><ellipse cx="2434" cy="2278.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="2443" y="2280.7051">insert(const_iterator pos, size_type n, const_reference x) : auto</text><ellipse cx="2434" cy="2291.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="2443" y="2293.5957">insert(const_iterator pos, InputIterator first, InputIterator last) : auto</text><ellipse cx="2434" cy="2304.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="2443" y="2306.4863">insert(const_iterator pos, std::initializer_list&lt;value_type&gt; il) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2431" y="2314.1172"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="2443" y="2319.377">insert_priv(const_iterator pos, U&amp;&amp; val) : auto</text><ellipse cx="2434" cy="2330.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="2443" y="2332.2676">max_size() : auto {query}</text><ellipse cx="2434" cy="2342.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="2443" y="2345.1582">operator!=(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2434" cy="2355.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="2443" y="2358.0488">operator&lt;(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2434" cy="2368.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="2443" y="2370.9395">operator&lt;=(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2434" cy="2381.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="2443" y="2383.8301">operator==(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2434" cy="2394.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="2443" y="2396.7207">operator&gt;(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2434" cy="2407.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="2443" y="2409.6113">operator&gt;=(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2434" cy="2420.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="2443" y="2422.502">pop_back() : auto</text><ellipse cx="2434" cy="2433.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="2443" y="2435.3926">push_back(const_reference x) : auto</text><ellipse cx="2434" cy="2446.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="2443" y="2448.2832">push_back(value_type&amp;&amp; x) : auto</text><ellipse cx="2434" cy="2458.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="2443" y="2461.1738">rbegin() : auto</text><ellipse cx="2434" cy="2471.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2443" y="2474.0645">rbegin() : auto {query}</text><ellipse cx="2434" cy="2484.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="2443" y="2486.9551">rend() : auto</text><ellipse cx="2434" cy="2497.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="2443" y="2499.8457">rend() : auto {query}</text><ellipse cx="2434" cy="2510.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="2443" y="2512.7363">resize(size_type new_sz) : auto</text><ellipse cx="2434" cy="2523.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="2443" y="2525.627">resize(size_type new_sz, const_reference c) : auto</text><ellipse cx="2434" cy="2536.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2443" y="2538.5176">size() : auto {query}</text><ellipse cx="2434" cy="2549.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="2443" y="2551.4082">swap(List_Strings&amp; other) : auto</text><ellipse cx="2434" cy="2562.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2443" y="2564.2988">at(size_type n) : auto&amp;</text><ellipse cx="2434" cy="2574.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="2443" y="2577.1895">at(size_type n) : auto&amp; {query}</text><ellipse cx="2434" cy="2587.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="2443" y="2590.0801">back() : auto&amp;</text><ellipse cx="2434" cy="2600.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2443" y="2602.9707">back() : auto&amp; {query}</text><ellipse cx="2434" cy="2613.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="2443" y="2615.8613">emplace_back(Args&amp;&amp; args) : auto&amp;</text><ellipse cx="2434" cy="2626.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="2443" y="2628.752">emplace_back() : auto&amp;</text><ellipse cx="2434" cy="2639.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="2443" y="2641.6426">front() : auto&amp;</text><ellipse cx="2434" cy="2652.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2443" y="2654.5332">front() : auto&amp; {query}</text><ellipse cx="2434" cy="2665.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="2443" y="2667.4238">operator=(const List_Strings&amp; other) : auto&amp;</text><ellipse cx="2434" cy="2678.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="2443" y="2680.3145">operator=(List_Strings&amp;&amp; other) : auto&amp;</text><ellipse cx="2434" cy="2690.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="2443" y="2693.2051">operator=(std::initializer_list&lt;value_type&gt; il) : auto&amp;</text><ellipse cx="2434" cy="2703.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="2443" y="2706.0957">operator[](size_type n) : auto&amp;</text><ellipse cx="2434" cy="2716.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="2443" y="2718.9863">operator[](size_type n) : auto&amp; {query}</text><ellipse cx="2434" cy="2729.6172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="2443" y="2731.877">assign(size_type n, const_reference value) : void</text><ellipse cx="2434" cy="2742.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="2443" y="2744.7676">assign(std::initializer_list&lt;value_type&gt; il) : void</text><ellipse cx="2434" cy="2755.3984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="2443" y="2757.6582">reserve(size_type n) : void</text><ellipse cx="2434" cy="2768.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="2443" y="2770.5488">shrink_to_fit() : void</text><!--class nuspell.Phonetic_Table--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="189.7969" id="nuspell.Phonetic_Table" style="stroke: #000000; stroke-width: 1.5;" width="388" x="574" y="2136.0938"/><ellipse cx="666.25" cy="2152.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M669.2188,2157.7344 Q668.6406,2158.0313 668,2158.1719 Q667.3594,2158.3281 666.6563,2158.3281 Q664.1563,2158.3281 662.8281,2156.6875 Q661.5156,2155.0313 661.5156,2151.9063 Q661.5156,2148.7813 662.8281,2147.125 Q664.1563,2145.4688 666.6563,2145.4688 Q667.3594,2145.4688 668,2145.625 Q668.6563,2145.7813 669.2188,2146.0781 L669.2188,2148.7969 Q668.5938,2148.2188 668,2147.9531 Q667.4063,2147.6719 666.7813,2147.6719 Q665.4375,2147.6719 664.75,2148.75 Q664.0625,2149.8125 664.0625,2151.9063 Q664.0625,2154 664.75,2155.0781 Q665.4375,2156.1406 666.7813,2156.1406 Q667.4063,2156.1406 668,2155.875 Q668.5938,2155.5938 669.2188,2155.0156 L669.2188,2157.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="82" x="686.75" y="2156.1953">Phonetic_Table</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="854" y="2133.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="855" y="2145.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="575" x2="961" y1="2168.0938" y2="2168.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="582" y="2177.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="594" y="2182.2988">table : std::vector&lt;std::pair&lt;StrT, StrT&gt; &gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="582" y="2189.9297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="594" y="2195.1895">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="575" x2="961" y1="2201.875" y2="2201.875"/><ellipse cx="585" cy="2213.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="594" y="2216.0801">Phonetic_Table()</text><ellipse cx="585" cy="2226.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="594" y="2228.9707">Phonetic_Table(const std::vector&lt;std::pair&lt;StrT, StrT&gt; &gt;&amp; v)</text><ellipse cx="585" cy="2239.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="594" y="2241.8613">Phonetic_Table(std::vector&lt;std::pair&lt;StrT, StrT&gt; &gt;&amp;&amp; v)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="582" y="2249.4922"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="362" x="594" y="2254.752">match(const StrT&amp; data, size_t i, const StrT&amp; pattern, bool at_begin) : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="594" x2="956" y1="2256.752" y2="2256.752"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="582" y="2262.3828"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="594" y="2267.6426">order() : auto</text><ellipse cx="585" cy="2278.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="594" y="2280.5332">replace(StrT&amp; word) : auto {query}</text><ellipse cx="585" cy="2291.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="594" y="2293.4238">operator=(const std::vector&lt;std::pair&lt;StrT, StrT&gt; &gt;&amp; v) : auto&amp;</text><ellipse cx="585" cy="2304.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="594" y="2306.3145">operator=(std::vector&lt;std::pair&lt;StrT, StrT&gt; &gt;&amp;&amp; v) : auto&amp;</text><ellipse cx="585" cy="2316.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="594" y="2319.2051">operator=(const Range&amp; range) : auto&amp;</text><!--class nuspell.Prefix--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="241.3594" id="nuspell.Prefix" style="stroke: #000000; stroke-width: 1.5;" width="667" x="2816.5" y="2110.5938"/><ellipse cx="3074.25" cy="2126.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3077.2188,2132.2344 Q3076.6406,2132.5313 3076,2132.6719 Q3075.3594,2132.8281 3074.6563,2132.8281 Q3072.1563,2132.8281 3070.8281,2131.1875 Q3069.5156,2129.5313 3069.5156,2126.4063 Q3069.5156,2123.2813 3070.8281,2121.625 Q3072.1563,2119.9688 3074.6563,2119.9688 Q3075.3594,2119.9688 3076,2120.125 Q3076.6563,2120.2813 3077.2188,2120.5781 L3077.2188,2123.2969 Q3076.5938,2122.7188 3076,2122.4531 Q3075.4063,2122.1719 3074.7813,2122.1719 Q3073.4375,2122.1719 3072.75,2123.25 Q3072.0625,2124.3125 3072.0625,2126.4063 Q3072.0625,2128.5 3072.75,2129.5781 Q3073.4375,2130.6406 3074.7813,2130.6406 Q3075.4063,2130.6406 3076,2130.375 Q3076.5938,2130.0938 3077.2188,2129.5156 L3077.2188,2132.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="30" x="3094.75" y="2130.6953">Prefix</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="3375.5" y="2107.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="3376.5" y="2119.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2817.5" x2="3482.5" y1="2142.5938" y2="2142.5938"/><ellipse cx="2827.5" cy="2154.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="2836.5" y="2156.7988">condition : CondT</text><ellipse cx="2827.5" cy="2167.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2836.5" y="2169.6895">cont_flags : Flag_Set</text><ellipse cx="2827.5" cy="2180.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="2836.5" y="2182.5801">appending : StrT</text><ellipse cx="2827.5" cy="2193.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2836.5" y="2195.4707">stripping : StrT</text><ellipse cx="2827.5" cy="2206.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2836.5" y="2208.3613">cross_product : bool</text><ellipse cx="2827.5" cy="2218.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2836.5" y="2221.252">flag : char16_t</text><ellipse cx="2827.5" cy="2231.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2836.5" y="2234.1426">CondT : using</text><ellipse cx="2827.5" cy="2244.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="2836.5" y="2247.0332">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2817.5" x2="3482.5" y1="2253.7188" y2="2253.7188"/><ellipse cx="2827.5" cy="2265.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="36" x="2836.5" y="2267.9238">Prefix()</text><ellipse cx="2827.5" cy="2278.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="2836.5" y="2280.8145">Prefix(char16_t flag, bool cross_product, const StrT&amp; strip, const StrT&amp; append, const Flag_Set&amp; cont_flags, const StrT&amp; condition)</text><ellipse cx="2827.5" cy="2291.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="2836.5" y="2293.7051">check_condition(const StrT&amp; word) : auto {query}</text><ellipse cx="2827.5" cy="2304.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="2836.5" y="2306.5957">to_derived(StrT&amp; word) : auto {query}</text><ellipse cx="2827.5" cy="2317.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="2836.5" y="2319.4863">to_derived_copy(StrT word) : auto {query}</text><ellipse cx="2827.5" cy="2330.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="2836.5" y="2332.377">to_root(StrT&amp; word) : auto {query}</text><ellipse cx="2827.5" cy="2343.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="2836.5" y="2345.2676">to_root_copy(StrT word) : auto {query}</text><!--class nuspell.Replacement_Table--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="292.9219" id="nuspell.Replacement_Table" style="stroke: #000000; stroke-width: 1.5;" width="250" x="997" y="2084.5938"/><ellipse cx="1012" cy="2100.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1014.9688,2106.2344 Q1014.3906,2106.5313 1013.75,2106.6719 Q1013.1094,2106.8281 1012.4063,2106.8281 Q1009.9063,2106.8281 1008.5781,2105.1875 Q1007.2656,2103.5313 1007.2656,2100.4063 Q1007.2656,2097.2813 1008.5781,2095.625 Q1009.9063,2093.9688 1012.4063,2093.9688 Q1013.1094,2093.9688 1013.75,2094.125 Q1014.4063,2094.2813 1014.9688,2094.5781 L1014.9688,2097.2969 Q1014.3438,2096.7188 1013.75,2096.4531 Q1013.1563,2096.1719 1012.5313,2096.1719 Q1011.1875,2096.1719 1010.5,2097.25 Q1009.8125,2098.3125 1009.8125,2100.4063 Q1009.8125,2102.5 1010.5,2103.5781 Q1011.1875,2104.6406 1012.5313,2104.6406 Q1013.1563,2104.6406 1013.75,2104.375 Q1014.3438,2104.0938 1014.9688,2103.5156 L1014.9688,2106.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="105" x="1026" y="2104.6953">Replacement_Table</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="1139" y="2081.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="1140" y="2093.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="998" x2="1246" y1="2116.5938" y2="2116.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1005" y="2125.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="1017" y="2130.7988">table : Table_Str</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1005" y="2138.4297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="1017" y="2143.6895">end_word_reps_last_idx : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1005" y="2151.3203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1017" y="2156.5801">start_word_reps_last_idx : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1005" y="2164.2109"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="1017" y="2169.4707">whole_word_reps_last_idx : size_t</text><ellipse cx="1008" cy="2180.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1017" y="2182.3613">StrT : using</text><ellipse cx="1008" cy="2192.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="1017" y="2195.252">Table_Str : using</text><ellipse cx="1008" cy="2205.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1017" y="2208.1426">const_iterator : using</text><ellipse cx="1008" cy="2218.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="1017" y="2221.0332">iterator : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="998" x2="1246" y1="2227.7188" y2="2227.7188"/><ellipse cx="1008" cy="2239.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="1017" y="2241.9238">Replacement_Table()</text><ellipse cx="1008" cy="2252.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1017" y="2254.8145">Replacement_Table(const Table_Str&amp; v)</text><ellipse cx="1008" cy="2265.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="1017" y="2267.7051">Replacement_Table(Table_Str&amp;&amp; v)</text><ellipse cx="1008" cy="2278.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="1017" y="2280.5957">any_place_replacements() : auto {query}</text><ellipse cx="1008" cy="2291.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="1017" y="2293.4863">end_word_replacements() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1005" y="2301.1172"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1017" y="2306.377">order_entries() : auto</text><ellipse cx="1008" cy="2317.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="1017" y="2319.2676">start_word_replacements() : auto {query}</text><ellipse cx="1008" cy="2329.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1017" y="2332.1582">whole_word_replacements() : auto {query}</text><ellipse cx="1008" cy="2342.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="1017" y="2345.0488">operator=(const Table_Str&amp; v) : auto&amp;</text><ellipse cx="1008" cy="2355.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="1017" y="2357.9395">operator=(Table_Str&amp;&amp; v) : auto&amp;</text><ellipse cx="1008" cy="2368.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="1017" y="2370.8301">operator=(const Range&amp; range) : auto&amp;</text><!--class nuspell.Similarity_Group--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="138.2344" id="nuspell.Similarity_Group" style="stroke: #000000; stroke-width: 1.5;" width="227" x="1282.5" y="2162.0938"/><ellipse cx="1297.5" cy="2178.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1300.4688,2183.7344 Q1299.8906,2184.0313 1299.25,2184.1719 Q1298.6094,2184.3281 1297.9063,2184.3281 Q1295.4063,2184.3281 1294.0781,2182.6875 Q1292.7656,2181.0313 1292.7656,2177.9063 Q1292.7656,2174.7813 1294.0781,2173.125 Q1295.4063,2171.4688 1297.9063,2171.4688 Q1298.6094,2171.4688 1299.25,2171.625 Q1299.9063,2171.7813 1300.4688,2172.0781 L1300.4688,2174.7969 Q1299.8438,2174.2188 1299.25,2173.9531 Q1298.6563,2173.6719 1298.0313,2173.6719 Q1296.6875,2173.6719 1296,2174.75 Q1295.3125,2175.8125 1295.3125,2177.9063 Q1295.3125,2180 1296,2181.0781 Q1296.6875,2182.1406 1298.0313,2182.1406 Q1298.6563,2182.1406 1299.25,2181.875 Q1299.8438,2181.5938 1300.4688,2181.0156 L1300.4688,2183.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="82" x="1311.5" y="2182.1953">Similarity_Group</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="1401.5" y="2159.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="1402.5" y="2171.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1283.5" x2="1508.5" y1="2194.0938" y2="2194.0938"/><ellipse cx="1293.5" cy="2206.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="1302.5" y="2208.2988">chars : StrT</text><ellipse cx="1293.5" cy="2218.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="1302.5" y="2221.1895">strings : std::vector&lt;StrT&gt;</text><ellipse cx="1293.5" cy="2231.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1302.5" y="2234.0801">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1283.5" x2="1508.5" y1="2240.7656" y2="2240.7656"/><ellipse cx="1293.5" cy="2252.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1302.5" y="2254.9707">Similarity_Group()</text><ellipse cx="1293.5" cy="2265.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="1302.5" y="2267.8613">Similarity_Group(const StrT&amp; s)</text><ellipse cx="1293.5" cy="2278.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1302.5" y="2280.752">parse(const StrT&amp; s) : auto</text><ellipse cx="1293.5" cy="2291.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="1302.5" y="2293.6426">operator=(const StrT&amp; s) : auto&amp;</text><!--class nuspell.String_Pair--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="202.6875" id="nuspell.String_Pair" style="stroke: #000000; stroke-width: 1.5;" width="223" x="296.5" y="2837.0938"/><ellipse cx="321.85" cy="2853.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M324.8188,2858.7344 Q324.2406,2859.0313 323.6,2859.1719 Q322.9594,2859.3281 322.2563,2859.3281 Q319.7563,2859.3281 318.4281,2857.6875 Q317.1156,2856.0313 317.1156,2852.9063 Q317.1156,2849.7813 318.4281,2848.125 Q319.7563,2846.4688 322.2563,2846.4688 Q322.9594,2846.4688 323.6,2846.625 Q324.2563,2846.7813 324.8188,2847.0781 L324.8188,2849.7969 Q324.1938,2849.2188 323.6,2848.9531 Q323.0063,2848.6719 322.3813,2848.6719 Q321.0375,2848.6719 320.35,2849.75 Q319.6625,2850.8125 319.6625,2852.9063 Q319.6625,2855 320.35,2856.0781 Q321.0375,2857.1406 322.3813,2857.1406 Q323.0063,2857.1406 323.6,2856.875 Q324.1938,2856.5938 324.8188,2856.0156 L324.8188,2858.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="55" x="338.15" y="2857.1953">String_Pair</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="411.5" y="2834.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="412.5" y="2846.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="297.5" x2="518.5" y1="2869.0938" y2="2869.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="304.5" y="2878.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="34" x="316.5" y="2883.2988">s : StrT</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="304.5" y="2890.9297"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="40" x="316.5" y="2896.1895">i : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="304.5" y="2903.8203"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="316.5" y="2909.0801">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="297.5" x2="518.5" y1="2915.7656" y2="2915.7656"/><ellipse cx="307.5" cy="2927.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="316.5" y="2929.9707">String_Pair()</text><ellipse cx="307.5" cy="2940.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="316.5" y="2942.8613">String_Pair(Str1&amp;&amp; str, size_t i)</text><ellipse cx="307.5" cy="2953.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="316.5" y="2955.752">String_Pair(Str1&amp;&amp; first, Str2&amp;&amp; second)</text><ellipse cx="307.5" cy="2966.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="316.5" y="2968.6426">first() : auto {query}</text><ellipse cx="307.5" cy="2979.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="316.5" y="2981.5332">first(my_string_view&lt;CharT&gt; x) : auto</text><ellipse cx="307.5" cy="2992.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="316.5" y="2994.4238">idx() : auto {query}</text><ellipse cx="307.5" cy="3005.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="316.5" y="3007.3145">second() : auto {query}</text><ellipse cx="307.5" cy="3017.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="316.5" y="3020.2051">second(my_string_view&lt;CharT&gt; x) : auto</text><ellipse cx="307.5" cy="3030.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="316.5" y="3033.0957">str() : auto&amp; {query}</text><!--class nuspell.String_Set--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="1027.6875" id="nuspell.String_Set" style="stroke: #000000; stroke-width: 1.5;" width="420" x="3519" y="1717.0938"/><ellipse cx="3642.25" cy="1733.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3645.2188,1738.7344 Q3644.6406,1739.0313 3644,1739.1719 Q3643.3594,1739.3281 3642.6563,1739.3281 Q3640.1563,1739.3281 3638.8281,1737.6875 Q3637.5156,1736.0313 3637.5156,1732.9063 Q3637.5156,1729.7813 3638.8281,1728.125 Q3640.1563,1726.4688 3642.6563,1726.4688 Q3643.3594,1726.4688 3644,1726.625 Q3644.6563,1726.7813 3645.2188,1727.0781 L3645.2188,1729.7969 Q3644.5938,1729.2188 3644,1728.9531 Q3643.4063,1728.6719 3642.7813,1728.6719 Q3641.4375,1728.6719 3640.75,1729.75 Q3640.0625,1730.8125 3640.0625,1732.9063 Q3640.0625,1735 3640.75,1736.0781 Q3641.4375,1737.1406 3642.7813,1737.1406 Q3643.4063,1737.1406 3644,1736.875 Q3644.5938,1736.5938 3645.2188,1736.0156 L3645.2188,1738.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="52" x="3662.75" y="1737.1953">String_Set</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="3831" y="1714.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="3832" y="1726.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3520" x2="3938" y1="1749.0938" y2="1749.0938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3527" y="1758.0391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="3539" y="1763.2988">d : std::basic_string&lt;CharT&gt;</text><ellipse cx="3530" cy="1773.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="3539" y="1776.1895">StrT : using</text><ellipse cx="3530" cy="1786.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="3539" y="1789.0801">allocator_type : using</text><ellipse cx="3530" cy="1799.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="3539" y="1801.9707">const_iterator : using</text><ellipse cx="3530" cy="1812.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3539" y="1814.8613">const_pointer : using</text><ellipse cx="3530" cy="1825.4922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="3539" y="1827.752">const_reference : using</text><ellipse cx="3530" cy="1838.3828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="3539" y="1840.6426">const_reverse_iterator : using</text><ellipse cx="3530" cy="1851.2734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3539" y="1853.5332">difference_type : using</text><ellipse cx="3530" cy="1864.1641" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="3539" y="1866.4238">iterator : using</text><ellipse cx="3530" cy="1877.0547" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="3539" y="1879.3145">key_compare : using</text><ellipse cx="3530" cy="1889.9453" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3539" y="1892.2051">key_type : using</text><ellipse cx="3530" cy="1902.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3539" y="1905.0957">pointer : using</text><ellipse cx="3530" cy="1915.7266" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="3539" y="1917.9863">reference : using</text><ellipse cx="3530" cy="1928.6172" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="3539" y="1930.877">reverse_iterator : using</text><ellipse cx="3530" cy="1941.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3539" y="1943.7676">size_type : using</text><ellipse cx="3530" cy="1954.3984" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="3539" y="1956.6582">traits_type : using</text><ellipse cx="3530" cy="1967.2891" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="3539" y="1969.5488">value_compare : using</text><ellipse cx="3530" cy="1980.1797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="3539" y="1982.4395">value_type : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3520" x2="3938" y1="1989.125" y2="1989.125"/><ellipse cx="3530" cy="2001.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="3539" y="2003.3301">String_Set()</text><ellipse cx="3530" cy="2013.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="3539" y="2016.2207">String_Set(const StrT&amp; s)</text><ellipse cx="3530" cy="2026.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="3539" y="2029.1113">String_Set(StrT&amp;&amp; s)</text><ellipse cx="3530" cy="2039.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="3539" y="2042.002">String_Set(InputIterator first, InputIterator last)</text><ellipse cx="3530" cy="2052.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="3539" y="2054.8926">String_Set(std::initializer_list&lt;value_type&gt; il)</text><ellipse cx="3530" cy="2065.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3539" y="2067.7832">operatorconstStrT&amp;() {query}</text><ellipse cx="3530" cy="2078.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="3539" y="2080.6738">insert(const StrT&amp; s) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3527" y="2088.3047"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="3539" y="2093.5645">lookup(const key_type&amp; x) : auto {query}</text><ellipse cx="3530" cy="2104.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="3539" y="2106.4551">operator+=(const StrT&amp; s) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3527" y="2114.0859"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="3539" y="2119.3457">sort_uniq() : auto</text><ellipse cx="3530" cy="2129.9766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3539" y="2132.2363">data() : auto&amp; {query}</text><ellipse cx="3530" cy="2142.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="3539" y="2145.127">operator=(const StrT&amp; s) : auto&amp;</text><ellipse cx="3530" cy="2155.7578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="3539" y="2158.0176">operator=(StrT&amp;&amp; s) : auto&amp;</text><ellipse cx="3530" cy="2168.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="3539" y="2170.9082">operator=(std::initializer_list&lt;value_type&gt; il) : auto&amp;</text><ellipse cx="3530" cy="2181.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="3539" y="2183.7988">contains(const key_type&amp; x) : bool {query}</text><ellipse cx="3530" cy="2194.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="3539" y="2196.6895">empty() : bool {query}</text><ellipse cx="3530" cy="2207.3203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="3539" y="2209.5801">operator!=(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3530" cy="2220.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="3539" y="2222.4707">operator&lt;(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3530" cy="2233.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="3539" y="2235.3613">operator&lt;=(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3530" cy="2245.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="3539" y="2248.252">operator==(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3530" cy="2258.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="3539" y="2261.1426">operator&gt;(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3530" cy="2271.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="3539" y="2274.0332">operator&gt;=(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3530" cy="2284.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3539" y="2286.9238">begin() : const_iterator {query}</text><ellipse cx="3530" cy="2297.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="3539" y="2299.8145">cbegin() : const_iterator {query}</text><ellipse cx="3530" cy="2310.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="3539" y="2312.7051">cend() : const_iterator {query}</text><ellipse cx="3530" cy="2323.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="3539" y="2325.5957">end() : const_iterator {query}</text><ellipse cx="3530" cy="2336.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="3539" y="2338.4863">find(const key_type&amp; x) : const_iterator {query}</text><ellipse cx="3530" cy="2349.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="3539" y="2351.377">lower_bound(const key_type&amp; x) : const_iterator {query}</text><ellipse cx="3530" cy="2362.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="3539" y="2364.2676">upper_bound(const key_type&amp; x) : const_iterator {query}</text><ellipse cx="3530" cy="2374.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="3539" y="2377.1582">crbegin() : const_reverse_iterator {query}</text><ellipse cx="3530" cy="2387.7891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3539" y="2390.0488">crend() : const_reverse_iterator {query}</text><ellipse cx="3530" cy="2400.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="3539" y="2402.9395">rbegin() : const_reverse_iterator {query}</text><ellipse cx="3530" cy="2413.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="3539" y="2415.8301">rend() : const_reverse_iterator {query}</text><ellipse cx="3530" cy="2426.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="3539" y="2428.7207">begin() : iterator</text><ellipse cx="3530" cy="2439.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="3539" y="2441.6113">emplace_hint(iterator hint, Args&amp;&amp; args) : iterator</text><ellipse cx="3530" cy="2452.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3539" y="2454.502">end() : iterator</text><ellipse cx="3530" cy="2465.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="3539" y="2467.3926">erase(iterator position) : iterator</text><ellipse cx="3530" cy="2478.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="3539" y="2480.2832">erase(iterator first, iterator last) : iterator</text><ellipse cx="3530" cy="2490.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="3539" y="2493.1738">find(const key_type&amp; x) : iterator</text><ellipse cx="3530" cy="2503.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="3539" y="2506.0645">insert(iterator hint, const value_type&amp; x) : iterator</text><ellipse cx="3530" cy="2516.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="3539" y="2518.9551">lower_bound(const key_type&amp; x) : iterator</text><ellipse cx="3530" cy="2529.5859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="3539" y="2531.8457">upper_bound(const key_type&amp; x) : iterator</text><ellipse cx="3530" cy="2542.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="3539" y="2544.7363">key_comp() : key_compare {query}</text><ellipse cx="3530" cy="2555.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="3539" y="2557.627">rbegin() : reverse_iterator</text><ellipse cx="3530" cy="2568.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="3539" y="2570.5176">rend() : reverse_iterator</text><ellipse cx="3530" cy="2581.1484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="3539" y="2583.4082">count(const key_type&amp; x) : size_type {query}</text><ellipse cx="3530" cy="2594.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="3539" y="2596.2988">erase(const key_type&amp; x) : size_type</text><ellipse cx="3530" cy="2606.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="3539" y="2609.1895">max_size() : size_type {query}</text><ellipse cx="3530" cy="2619.8203" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="3539" y="2622.0801">size() : size_type {query}</text><ellipse cx="3530" cy="2632.7109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="394" x="3539" y="2634.9707">equal_range(const key_type&amp; x) : std::pair&lt;const_iterator , const_iterator&gt; {query}</text><ellipse cx="3530" cy="2645.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="3539" y="2647.8613">emplace(Args&amp;&amp; args) : std::pair&lt;iterator , bool&gt;</text><ellipse cx="3530" cy="2658.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="3539" y="2660.752">insert(const value_type&amp; x) : std::pair&lt;iterator , bool&gt;</text><ellipse cx="3530" cy="2671.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="3539" y="2673.6426">equal_range(const key_type&amp; x) : std::pair&lt;iterator , iterator&gt;</text><ellipse cx="3530" cy="2684.2734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="3539" y="2686.5332">value_comp() : value_compare {query}</text><ellipse cx="3530" cy="2697.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="3539" y="2699.4238">clear() : void</text><ellipse cx="3530" cy="2710.0547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="3539" y="2712.3145">insert(InputIterator first, InputIterator last) : void</text><ellipse cx="3530" cy="2722.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="3539" y="2725.2051">insert(std::initializer_list&lt;value_type&gt; il) : void</text><ellipse cx="3530" cy="2735.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="3539" y="2738.0957">swap(String_Set&amp; s) : void</text><!--class nuspell.Substr_Replacer--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="202.6875" id="nuspell.Substr_Replacer" style="stroke: #000000; stroke-width: 1.5;" width="231" x="1544.5" y="2129.5938"/><ellipse cx="1559.5" cy="2145.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M1562.4688,2151.2344 Q1561.8906,2151.5313 1561.25,2151.6719 Q1560.6094,2151.8281 1559.9063,2151.8281 Q1557.4063,2151.8281 1556.0781,2150.1875 Q1554.7656,2148.5313 1554.7656,2145.4063 Q1554.7656,2142.2813 1556.0781,2140.625 Q1557.4063,2138.9688 1559.9063,2138.9688 Q1560.6094,2138.9688 1561.25,2139.125 Q1561.9063,2139.2813 1562.4688,2139.5781 L1562.4688,2142.2969 Q1561.8438,2141.7188 1561.25,2141.4531 Q1560.6563,2141.1719 1560.0313,2141.1719 Q1558.6875,2141.1719 1558,2142.25 Q1557.3125,2143.3125 1557.3125,2145.4063 Q1557.3125,2147.5 1558,2148.5781 Q1558.6875,2149.6406 1560.0313,2149.6406 Q1560.6563,2149.6406 1561.25,2149.375 Q1561.8438,2149.0938 1562.4688,2148.5156 L1562.4688,2151.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="86" x="1573.5" y="2149.6953">Substr_Replacer</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="1667.5" y="2126.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="1668.5" y="2138.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1545.5" x2="1774.5" y1="2161.5938" y2="2161.5938"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1552.5" y="2170.5391"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1564.5" y="2175.7988">table : Table_Pairs</text><ellipse cx="1555.5" cy="2186.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1564.5" y="2188.6895">StrT : using</text><ellipse cx="1555.5" cy="2199.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="1564.5" y="2201.5801">Table_Pairs : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="1545.5" x2="1774.5" y1="2208.2656" y2="2208.2656"/><ellipse cx="1555.5" cy="2220.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="1564.5" y="2222.4707">Substr_Replacer()</text><ellipse cx="1555.5" cy="2233.1016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="1564.5" y="2235.3613">Substr_Replacer(const Table_Pairs&amp; v)</text><ellipse cx="1555.5" cy="2245.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="1564.5" y="2248.252">Substr_Replacer(const Table_Pairs&amp;&amp; v)</text><ellipse cx="1555.5" cy="2258.8828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1564.5" y="2261.1426">replace(StrT&amp; s) : auto {query}</text><ellipse cx="1555.5" cy="2271.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="1564.5" y="2274.0332">replace_copy(StrT s) : auto {query}</text><ellipse cx="1555.5" cy="2284.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="1564.5" y="2286.9238">operator=(const Table_Pairs&amp; v) : auto&amp;</text><ellipse cx="1555.5" cy="2297.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="1564.5" y="2299.8145">operator=(const Table_Pairs&amp;&amp; v) : auto&amp;</text><ellipse cx="1555.5" cy="2310.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="1564.5" y="2312.7051">operator=(const Range&amp; range) : auto&amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1552.5" y="2320.3359"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="1564.5" y="2325.5957">sort_uniq() : void</text><!--class nuspell.Suffix--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="241.3594" id="nuspell.Suffix" style="stroke: #000000; stroke-width: 1.5;" width="666" x="3974" y="2110.5938"/><ellipse cx="4231.75" cy="2126.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M4234.7188,2132.2344 Q4234.1406,2132.5313 4233.5,2132.6719 Q4232.8594,2132.8281 4232.1563,2132.8281 Q4229.6563,2132.8281 4228.3281,2131.1875 Q4227.0156,2129.5313 4227.0156,2126.4063 Q4227.0156,2123.2813 4228.3281,2121.625 Q4229.6563,2119.9688 4232.1563,2119.9688 Q4232.8594,2119.9688 4233.5,2120.125 Q4234.1563,2120.2813 4234.7188,2120.5781 L4234.7188,2123.2969 Q4234.0938,2122.7188 4233.5,2122.4531 Q4232.9063,2122.1719 4232.2813,2122.1719 Q4230.9375,2122.1719 4230.25,2123.25 Q4229.5625,2124.3125 4229.5625,2126.4063 Q4229.5625,2128.5 4230.25,2129.5781 Q4230.9375,2130.6406 4232.2813,2130.6406 Q4232.9063,2130.6406 4233.5,2130.375 Q4234.0938,2130.0938 4234.7188,2129.5156 L4234.7188,2132.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="29" x="4252.25" y="2130.6953">Suffix</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="4532" y="2107.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="4533" y="2119.7266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3975" x2="4639" y1="2142.5938" y2="2142.5938"/><ellipse cx="3985" cy="2154.5391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="3994" y="2156.7988">condition : CondT</text><ellipse cx="3985" cy="2167.4297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="3994" y="2169.6895">cont_flags : Flag_Set</text><ellipse cx="3985" cy="2180.3203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="3994" y="2182.5801">appending : StrT</text><ellipse cx="3985" cy="2193.2109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3994" y="2195.4707">stripping : StrT</text><ellipse cx="3985" cy="2206.1016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3994" y="2208.3613">cross_product : bool</text><ellipse cx="3985" cy="2218.9922" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3994" y="2221.252">flag : char16_t</text><ellipse cx="3985" cy="2231.8828" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="3994" y="2234.1426">CondT : using</text><ellipse cx="3985" cy="2244.7734" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="3994" y="2247.0332">StrT : using</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3975" x2="4639" y1="2253.7188" y2="2253.7188"/><ellipse cx="3985" cy="2265.6641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="35" x="3994" y="2267.9238">Suffix()</text><ellipse cx="3985" cy="2278.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="640" x="3994" y="2280.8145">Suffix(char16_t flag, bool cross_product, const StrT&amp; strip, const StrT&amp; append, const Flag_Set&amp; cont_flags, const StrT&amp; condition)</text><ellipse cx="3985" cy="2291.4453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="3994" y="2293.7051">check_condition(const StrT&amp; word) : auto {query}</text><ellipse cx="3985" cy="2304.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="3994" y="2306.5957">to_derived(StrT&amp; word) : auto {query}</text><ellipse cx="3985" cy="2317.2266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="3994" y="2319.4863">to_derived_copy(StrT word) : auto {query}</text><ellipse cx="3985" cy="2330.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="3994" y="2332.377">to_root(StrT&amp; word) : auto {query}</text><ellipse cx="3985" cy="2343.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="3994" y="2345.2676">to_root_copy(StrT word) : auto {query}</text><!--class nuspell.Word_List--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="73.7813" id="nuspell.Word_List" style="stroke: #000000; stroke-width: 1.5;" width="281" x="2399.5" y="1216.0938"/><ellipse cx="2510.75" cy="1232.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2513.7188,1237.7344 Q2513.1406,1238.0313 2512.5,1238.1719 Q2511.8594,1238.3281 2511.1563,1238.3281 Q2508.6563,1238.3281 2507.3281,1236.6875 Q2506.0156,1235.0313 2506.0156,1231.9063 Q2506.0156,1228.7813 2507.3281,1227.125 Q2508.6563,1225.4688 2511.1563,1225.4688 Q2511.8594,1225.4688 2512.5,1225.625 Q2513.1563,1225.7813 2513.7188,1226.0781 L2513.7188,1228.7969 Q2513.0938,1228.2188 2512.5,1227.9531 Q2511.9063,1227.6719 2511.2813,1227.6719 Q2509.9375,1227.6719 2509.25,1228.75 Q2508.5625,1229.8125 2508.5625,1231.9063 Q2508.5625,1234 2509.25,1235.0781 Q2509.9375,1236.1406 2511.2813,1236.1406 Q2511.9063,1236.1406 2512.5,1235.875 Q2513.0938,1235.5938 2513.7188,1235.0156 L2513.7188,1237.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="50" x="2531.25" y="1236.1953">Word_List</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2400.5" x2="2679.5" y1="1248.0938" y2="1248.0938"/><ellipse cx="2410.5" cy="1260.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="2419.5" y="1262.2988">equal_range : using Word_List_Base::</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2400.5" x2="2679.5" y1="1268.9844" y2="1268.9844"/><ellipse cx="2410.5" cy="1280.9297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="2419.5" y="1283.1895">equal_range(const std::wstring&amp; word) : auto {query}</text><!--class nuspell.identity--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="60.8906" id="nuspell.identity" style="stroke: #000000; stroke-width: 1.5;" width="200" x="4675" y="2200.5938"/><ellipse cx="4752.25" cy="2216.5938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M4755.2188,2222.2344 Q4754.6406,2222.5313 4754,2222.6719 Q4753.3594,2222.8281 4752.6563,2222.8281 Q4750.1563,2222.8281 4748.8281,2221.1875 Q4747.5156,2219.5313 4747.5156,2216.4063 Q4747.5156,2213.2813 4748.8281,2211.625 Q4750.1563,2209.9688 4752.6563,2209.9688 Q4753.3594,2209.9688 4754,2210.125 Q4754.6563,2210.2813 4755.2188,2210.5781 L4755.2188,2213.2969 Q4754.5938,2212.7188 4754,2212.4531 Q4753.4063,2212.1719 4752.7813,2212.1719 Q4751.4375,2212.1719 4750.75,2213.25 Q4750.0625,2214.3125 4750.0625,2216.4063 Q4750.0625,2218.5 4750.75,2219.5781 Q4751.4375,2220.6406 4752.7813,2220.6406 Q4753.4063,2220.6406 4754,2220.375 Q4754.5938,2220.0938 4755.2188,2219.5156 L4755.2188,2222.2344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="37" x="4772.75" y="2220.6953">identity</text><line style="stroke: #000000; stroke-width: 1.5;" x1="4676" x2="4874" y1="2232.5938" y2="2232.5938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="4676" x2="4874" y1="2240.5938" y2="2240.5938"/><ellipse cx="4686" cy="2252.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="4695" y="2254.7988">operator()(T&amp;&amp; t) : constexpr auto&amp;</text><!--class nuspell.sv_eq--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="60.8906" id="nuspell.sv_eq" style="stroke: #000000; stroke-width: 1.5;" width="391" x="2406.5" y="2908.0938"/><ellipse cx="2526.25" cy="2924.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2529.2188,2929.7344 Q2528.6406,2930.0313 2528,2930.1719 Q2527.3594,2930.3281 2526.6563,2930.3281 Q2524.1563,2930.3281 2522.8281,2928.6875 Q2521.5156,2927.0313 2521.5156,2923.9063 Q2521.5156,2920.7813 2522.8281,2919.125 Q2524.1563,2917.4688 2526.6563,2917.4688 Q2527.3594,2917.4688 2528,2917.625 Q2528.6563,2917.7813 2529.2188,2918.0781 L2529.2188,2920.7969 Q2528.5938,2920.2188 2528,2919.9531 Q2527.4063,2919.6719 2526.7813,2919.6719 Q2525.4375,2919.6719 2524.75,2920.75 Q2524.0625,2921.8125 2524.0625,2923.9063 Q2524.0625,2926 2524.75,2927.0781 Q2525.4375,2928.1406 2526.7813,2928.1406 Q2527.4063,2928.1406 2528,2927.875 Q2528.5938,2927.5938 2529.2188,2927.0156 L2529.2188,2929.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="30" x="2546.75" y="2928.1953">sv_eq</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="2689.5" y="2905.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="2690.5" y="2917.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2407.5" x2="2796.5" y1="2940.0938" y2="2940.0938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="2407.5" x2="2796.5" y1="2948.0938" y2="2948.0938"/><ellipse cx="2417.5" cy="2960.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="365" x="2426.5" y="2962.2988">operator()(my_string_view&lt;CharT&gt; l, my_string_view&lt;CharT&gt; r) : auto {query}</text><!--class nuspell.sv_hash--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="60.8906" id="nuspell.sv_hash" style="stroke: #000000; stroke-width: 1.5;" width="319" x="2832.5" y="2908.0938"/><ellipse cx="2911.25" cy="2924.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M2914.2188,2929.7344 Q2913.6406,2930.0313 2913,2930.1719 Q2912.3594,2930.3281 2911.6563,2930.3281 Q2909.1563,2930.3281 2907.8281,2928.6875 Q2906.5156,2927.0313 2906.5156,2923.9063 Q2906.5156,2920.7813 2907.8281,2919.125 Q2909.1563,2917.4688 2911.6563,2917.4688 Q2912.3594,2917.4688 2913,2917.625 Q2913.6563,2917.7813 2914.2188,2918.0781 L2914.2188,2920.7969 Q2913.5938,2920.2188 2913,2919.9531 Q2912.4063,2919.6719 2911.7813,2919.6719 Q2910.4375,2919.6719 2909.75,2920.75 Q2909.0625,2921.8125 2909.0625,2923.9063 Q2909.0625,2926 2909.75,2927.0781 Q2910.4375,2928.1406 2911.7813,2928.1406 Q2912.4063,2928.1406 2913,2927.875 Q2913.5938,2927.5938 2914.2188,2927.0156 L2914.2188,2929.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="40" x="2931.75" y="2928.1953">sv_hash</text><rect fill="url(#g1dvwyytvziotb0)" height="16.0625" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="111" x="3043.5" y="2905.0938"/><text fill="#000000" font-family="Roboto Condensed" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="109" x="3044.5" y="2917.2266">template &lt;class CharT&gt;</text><line style="stroke: #000000; stroke-width: 1.5;" x1="2833.5" x2="3150.5" y1="2940.0938" y2="2940.0938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="2833.5" x2="3150.5" y1="2948.0938" y2="2948.0938"/><ellipse cx="2843.5" cy="2960.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="2852.5" y="2962.2988">operator()(boost::basic_string_view&lt;CharT&gt; s) : auto {query}</text><!--class nuspell.Affixing_Mode--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="99.5625" id="nuspell.Affixing_Mode" style="stroke: #000000; stroke-width: 1.5;" width="126" x="3187" y="2888.5938"/><ellipse cx="3211" cy="2904.5938" fill="#EB937F" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3215.1094,2910.5938 L3207.3906,2910.5938 L3207.3906,2898.2031 L3215.1094,2898.2031 L3215.1094,2900.3594 L3209.8438,2900.3594 L3209.8438,2903.0313 L3214.6094,2903.0313 L3214.6094,2905.1875 L3209.8438,2905.1875 L3209.8438,2908.4375 L3215.1094,2908.4375 L3215.1094,2910.5938 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="74" x="3227" y="2908.6953">Affixing_Mode</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3188" x2="3312" y1="2920.5938" y2="2920.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3193" y="2934.7988">AT_COMPOUND_BEGIN</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="3193" y="2947.6895">AT_COMPOUND_END</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="3193" y="2960.5801">AT_COMPOUND_MIDDLE</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="3193" y="2973.4707">FULL_WORD</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3188" x2="3312" y1="2980.1563" y2="2980.1563"/><!--class nuspell.Flag_Type--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="99.5625" id="nuspell.Flag_Type" style="stroke: #000000; stroke-width: 1.5;" width="108" x="3348" y="2888.5938"/><ellipse cx="3372.9" cy="2904.5938" fill="#EB937F" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3377.0094,2910.5938 L3369.2906,2910.5938 L3369.2906,2898.2031 L3377.0094,2898.2031 L3377.0094,2900.3594 L3371.7438,2900.3594 L3371.7438,2903.0313 L3376.5094,2903.0313 L3376.5094,2905.1875 L3371.7438,2905.1875 L3371.7438,2908.4375 L3377.0094,2908.4375 L3377.0094,2910.5938 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="54" x="3389.1" y="2908.6953">Flag_Type</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3349" x2="3455" y1="2920.5938" y2="2920.5938"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="3354" y="2934.7988">FLAG_DOUBLE_CHAR</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="3354" y="2947.6895">FLAG_NUMBER</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="3354" y="2960.5801">FLAG_SINGLE_CHAR</text><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="50" x="3354" y="2973.4707">FLAG_UTF8</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3349" x2="3455" y1="2980.1563" y2="2980.1563"/><!--class nuspell.empty--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="48" id="nuspell.empty" style="stroke: #000000; stroke-width: 1.5;" width="63" x="3491.5" y="2914.5938"/><ellipse cx="3506.5" cy="2930.5938" fill="#EB937F" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M3510.6094,2936.5938 L3502.8906,2936.5938 L3502.8906,2924.2031 L3510.6094,2924.2031 L3510.6094,2926.3594 L3505.3438,2926.3594 L3505.3438,2929.0313 L3510.1094,2929.0313 L3510.1094,2931.1875 L3505.3438,2931.1875 L3505.3438,2934.4375 L3510.6094,2934.4375 L3510.6094,2936.5938 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="31" x="3520.5" y="2934.6953">empty</text><line style="stroke: #000000; stroke-width: 1.5;" x1="3492.5" x2="3553.5" y1="2946.5938" y2="2946.5938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="3492.5" x2="3553.5" y1="2954.5938" y2="2954.5938"/><!--class nuspell::Phonetic_Table.Phonetic_Table::Phonet_Match_Result--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="125.3438" id="nuspell::Phonetic_Table.Phonetic_Table::Phonet_Match_Result" style="stroke: #000000; stroke-width: 1.5;" width="229" x="4899.5" y="380.0938"/><ellipse cx="4914.5" cy="396.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M4917.4688,401.7344 Q4916.8906,402.0313 4916.25,402.1719 Q4915.6094,402.3281 4914.9063,402.3281 Q4912.4063,402.3281 4911.0781,400.6875 Q4909.7656,399.0313 4909.7656,395.9063 Q4909.7656,392.7813 4911.0781,391.125 Q4912.4063,389.4688 4914.9063,389.4688 Q4915.6094,389.4688 4916.25,389.625 Q4916.9063,389.7813 4917.4688,390.0781 L4917.4688,392.7969 Q4916.8438,392.2188 4916.25,391.9531 Q4915.6563,391.6719 4915.0313,391.6719 Q4913.6875,391.6719 4913,392.75 Q4912.3125,393.8125 4912.3125,395.9063 Q4912.3125,398 4913,399.0781 Q4913.6875,400.1406 4915.0313,400.1406 Q4915.6563,400.1406 4916.25,399.875 Q4916.8438,399.5938 4917.4688,399.0156 L4917.4688,401.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="197" x="4928.5" y="400.1953">Phonetic_Table::Phonet_Match_Result</text><line style="stroke: #000000; stroke-width: 1.5;" x1="4900.5" x2="5127.5" y1="412.0938" y2="412.0938"/><ellipse cx="4910.5" cy="424.0391" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="4919.5" y="426.2988">go_back_after_replace : bool</text><ellipse cx="4910.5" cy="436.9297" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="4919.5" y="439.1895">treat_next_as_begin : bool</text><ellipse cx="4910.5" cy="449.8203" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="4919.5" y="452.0801">count_matched : size_t</text><ellipse cx="4910.5" cy="462.7109" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="4919.5" y="464.9707">go_back_before_replace : size_t</text><ellipse cx="4910.5" cy="475.6016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="4919.5" y="477.8613">priority : size_t</text><line style="stroke: #000000; stroke-width: 1.5;" x1="4900.5" x2="5127.5" y1="484.5469" y2="484.5469"/><ellipse cx="4910.5" cy="496.4922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="4919.5" y="498.752">operatorbool()</text><!--class nuspell::String_Set.String_Set::Char_Traits_Less_Than--><rect fill="#FFFFFF" filter="url(#f1dvwyytvziotb)" height="60.8906" id="nuspell::String_Set.String_Set::Char_Traits_Less_Than" style="stroke: #000000; stroke-width: 1.5;" width="209" x="5163.5" y="412.0938"/><ellipse cx="5178.5" cy="428.0938" fill="#ADD1B2" rx="11" ry="11" style="stroke: #000000; stroke-width: 1.0;"/><path d="M5181.4688,433.7344 Q5180.8906,434.0313 5180.25,434.1719 Q5179.6094,434.3281 5178.9063,434.3281 Q5176.4063,434.3281 5175.0781,432.6875 Q5173.7656,431.0313 5173.7656,427.9063 Q5173.7656,424.7813 5175.0781,423.125 Q5176.4063,421.4688 5178.9063,421.4688 Q5179.6094,421.4688 5180.25,421.625 Q5180.9063,421.7813 5181.4688,422.0781 L5181.4688,424.7969 Q5180.8438,424.2188 5180.25,423.9531 Q5179.6563,423.6719 5179.0313,423.6719 Q5177.6875,423.6719 5177,424.75 Q5176.3125,425.8125 5176.3125,427.9063 Q5176.3125,430 5177,431.0781 Q5177.6875,432.1406 5179.0313,432.1406 Q5179.6563,432.1406 5180.25,431.875 Q5180.8438,431.5938 5181.4688,431.0156 L5181.4688,433.7344 Z "/><text fill="#000000" font-family="Roboto Condensed" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="177" x="5192.5" y="432.1953">String_Set::Char_Traits_Less_Than</text><line style="stroke: #000000; stroke-width: 1.5;" x1="5164.5" x2="5371.5" y1="444.0938" y2="444.0938"/><line style="stroke: #000000; stroke-width: 1.5;" x1="5164.5" x2="5371.5" y1="452.0938" y2="452.0938"/><ellipse cx="5174.5" cy="464.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="5183.5" y="466.2988">operator()(CharT a, CharT b) : auto</text><!--link nuspell.Aff_Data to nuspell.Dict_Base--><path d="M1781.8318,839.8193 C1787.2417,853.5215 1792.6565,867.2362 1798.0513,880.9003 " fill="none" id="nuspell.Aff_Data-nuspell.Dict_Base" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="1775.2937,842.3209,1774.4599,821.1476,1788.3155,837.1797,1775.2937,842.3209" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Dict_Base to nuspell.Basic_Dictionary--><path d="M2006.7526,1645.2629 C2034.4636,1821.246 2064.9193,2014.659 2082.9762,2129.3325 " fill="none" id="nuspell.Dict_Base-nuspell.Basic_Dictionary" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="none" points="1999.8014,1646.1201,2003.6052,1625.2747,2013.631,1643.9424,1999.8014,1646.1201" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Data to nuspell.Aff_Structures--><path d="M1422.1965,581.6847 C1317.7032,660.6382 1193.7417,766.4536 1104,881.0938 C1039.3367,963.6977 988.9854,1072.8242 957.6097,1151.4972 " fill="none" id="nuspell.Aff_Data-nuspell.Aff_Structures" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#g1dvwyytvziotb0)" points="1432.8914,573.646,1425.6918,574.0535,1423.299,580.8561,1430.4986,580.4485,1432.8914,573.646" style="stroke: #000000; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="7" x="1418.2504" y="575.5376">2</text><!--link nuspell.Aff_Data to nuspell.Compound_Rule_Table--><path d="M1471.1132,833.5819 C1423.5841,954.3416 1375.3895,1076.7922 1343.4392,1157.97 " fill="none" id="nuspell.Aff_Data-nuspell.Compound_Rule_Table" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#g1dvwyytvziotb0)" points="1476.0071,821.1476,1470.0876,825.2658,1471.6122,832.3139,1477.5317,828.1957,1476.0071,821.1476" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Data to nuspell.Word_List--><path d="M1829.4575,518.1386 C1997.3357,589.2516 2231.1958,710.432 2382,881.0938 C2472.0207,982.9682 2516.2821,1143.7201 2532.4849,1215.8745 " fill="none" id="nuspell.Aff_Data-nuspell.Word_List" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#g1dvwyytvziotb0)" points="1817.2334,512.9994,1821.2142,519.0122,1828.2955,517.6502,1824.3147,511.6374,1817.2334,512.9994" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Break_Table--><path d="M743.7637,1323.5451 C592.2212,1392.9625 380.1426,1513.598 260,1685.0938 C174.2502,1807.496 145.3132,1979.4154 135.8877,2097.4625 " fill="none" id="nuspell.Aff_Structures-nuspell.Break_Table" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#g1dvwyytvziotb0)" points="755.9393,1318.0181,748.8225,1316.8558,745.0124,1322.9782,752.1293,1324.1404,755.9393,1318.0181" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Compound_Pattern--><path d="M803.5796,1364.1653 C723.4794,1445.95 620.7408,1563.6371 557,1685.0938 C471.7296,1847.5745 431.5757,2063.5571 416.0915,2168.5177 " fill="none" id="nuspell.Aff_Structures-nuspell.Compound_Pattern" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#g1dvwyytvziotb0)" points="812.7363,1354.8713,805.6759,1356.338,804.3144,1363.4194,811.3747,1361.9526,812.7363,1354.8713" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Phonetic_Table--><path d="M903.0053,1368.1186 C872.4884,1563.1874 811.1518,1955.2609 782.8862,2135.9386 " fill="none" id="nuspell.Aff_Structures-nuspell.Phonetic_Table" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#g1dvwyytvziotb0)" points="905.0593,1354.9892,900.1799,1360.2988,903.2044,1366.8449,908.0838,1361.5353,905.0593,1354.9892" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Replacement_Table--><path d="M944.5703,1367.7791 C981.1578,1545.8017 1051.5868,1888.4865 1091.8346,2084.3188 " fill="none" id="nuspell.Aff_Structures-nuspell.Replacement_Table" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#g1dvwyytvziotb0)" points="941.9417,1354.9892,939.2315,1361.6716,944.3575,1366.7435,947.0677,1360.061,941.9417,1354.9892" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Similarity_Group--><path d="M952.1941,1367.1637 C979.8838,1448.9248 1027.9597,1556.3322 1104,1625.0938 C1160.6395,1676.3117 1214.374,1627.9246 1265,1685.0938 C1385.3679,1821.0187 1399.9311,2048.1672 1398.9314,2161.855 " fill="none" id="nuspell.Aff_Structures-nuspell.Similarity_Group" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#g1dvwyytvziotb0)" points="948.09,1354.7837,946.1812,1361.7375,951.8661,1366.1741,953.7748,1359.2202,948.09,1354.7837" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Substr_Replacer--><path d="M946.6157,1367.3531 C971.8835,1452.3204 1019.3852,1563.754 1104,1625.0938 C1257.7354,1736.5413 1386.3159,1557.5669 1527,1685.0938 C1651.24,1797.7144 1668.6049,2005.2261 1666.6013,2129.4468 " fill="none" id="nuspell.Aff_Structures-nuspell.Substr_Replacer" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#g1dvwyytvziotb0)" points="942.9727,1354.7529,940.7966,1361.6278,946.3057,1366.2807,948.4818,1359.4058,942.9727,1354.7529" style="stroke: #000000; stroke-width: 1.0;"/><text fill="#000000" font-family="Roboto Condensed" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="7" x="937.2716" y="1374.5079">2</text><!--link nuspell.Basic_Dictionary to nuspell.Encoding_Details--><path d="M2099,2345.8768 C2099,2516.4171 2099,2826.1212 2099,2914.476 " fill="none" id="nuspell.Basic_Dictionary-nuspell.Encoding_Details" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#g1dvwyytvziotb0)" points="2099,2332.8378,2095,2338.8378,2099,2344.8378,2103,2338.8378,2099,2332.8378" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Compound_Pattern to nuspell.String_Pair--><path d="M408,2306.9542 C408,2434.83 408,2693.3536 408,2836.8395 " fill="none" id="nuspell.Compound_Pattern-nuspell.String_Pair" style="stroke: #000000; stroke-width: 1.0;"/><polygon fill="url(#g1dvwyytvziotb0)" points="408,2293.8797,404,2299.8797,408,2305.8797,412,2299.8797,408,2293.8797" style="stroke: #000000; stroke-width: 1.0;"/><!--link nuspell.Affix to nuspell.Affix_Table--><!--link nuspell.Affix_Table to nuspell.Affixing_Result--><!--link nuspell.Affixing_Result to nuspell.Casing--><!--link nuspell.Casing to nuspell.Compound_Check_Pattern--><!--link nuspell.Affix to nuspell.Compounding_Result--><!--link nuspell.Compounding_Result to nuspell.Condition--><!--link nuspell.Condition to nuspell.Encoding--><!--link nuspell.Encoding to nuspell.Finder--><!--link nuspell.Finder to nuspell.Hash_Multiset--><!--link nuspell.Compounding_Result to nuspell.List_Strings--><!--link nuspell.List_Strings to nuspell.Prefix--><!--link nuspell.Prefix to nuspell.String_Set--><!--link nuspell.String_Set to nuspell.Suffix--><!--link nuspell.Suffix to nuspell.identity--><!--link nuspell.List_Strings to nuspell.sv_eq--><!--link nuspell.sv_eq to nuspell.sv_hash--><!--link nuspell.sv_hash to nuspell.Affixing_Mode--><!--link nuspell.Affixing_Mode to nuspell.Flag_Type--><!--link nuspell.Flag_Type to nuspell.empty--><!--
@startuml
skinparam BackgroundColor White|White
skinparam ArrowColor Black
skinparam DefaultFontName Roboto Condensed
skinparam TitleFontStyle Bold

skinparam NoteBackgroundColor White
skinparam NoteBorderColor Black

skinparam UsecaseBackgroundColor White
skinparam ActorBackgroundColor White
skinparam UsecaseBorderColor Black
skinparam ActorBorderColor Black

skinparam usecase {
	BackgroundColor<<for now out of scope>> Gray
}

skinparam StateBackgroundColor White
skinparam StateBorderColor Black

skinparam ActivityBackgroundColor White
skinparam ActivityDiamondBackgroundColor White
skinparam ActivityBorderColor Black
skinparam ActivityDiamondBorderColor Black

skinparam ClassBackgroundColor White
skinparam ClassBorderColor Black

title Nuspell
namespace nuspell {
	class Aff_Data {
		+structures : Aff_Structures<char>
		+wide_structures : Aff_Structures<wchar_t>
		+compound_rules : Compound_Rule_Table
		+compound_syllable_num : Flag_Set
		+flag_type : Flag_Type
		+words : Word_List
		+get_structures() : auto {query}
		+parse_aff(istream& in) : auto
		+parse_aff_dic(std::istream& aff, std::istream& dic) : auto
		+parse_dic(istream& in) : auto
		+set_encoding_and_language(const string& enc, const string& lang) : auto
		+checksharps : bool
		+complex_prefixes : bool
		+compound_check_case : bool
		+compound_check_duplicate : bool
		+compound_check_rep : bool
		+compound_check_triple : bool
		+compound_more_suffixes : bool
		+compound_simplified_triple : bool
		+forbid_warn : bool
		+fullstrip : bool
		+no_split_suggestions : bool
		+only_max_diff : bool
		+suggest_with_dots : bool
		+circumfix_flag : char16_t
		+compound_begin_flag : char16_t
		+compound_flag : char16_t
		+compound_forbid_flag : char16_t
		+compound_force_uppercase : char16_t
		+compound_last_flag : char16_t
		+compound_middle_flag : char16_t
		+compound_onlyin_flag : char16_t
		+compound_permit_flag : char16_t
		+compound_root_flag : char16_t
		+forbiddenword_flag : char16_t
		+keepcase_flag : char16_t
		+need_affix_flag : char16_t
		+nosuggest_flag : char16_t
		+substandard_flag : char16_t
		+warn_flag : char16_t
		+internal_locale : std::locale
		+compound_syllable_vowels : string
		+wordchars : string
		+compound_max_word_count : unsigned short
		+compound_min_length : unsigned short
		+compound_syllable_max : unsigned short
		+max_compound_suggestions : unsigned short
		+max_diff_factor : unsigned short
		+max_ngram_suggestions : unsigned short
		+istream : using
		+pair : using
		+string : using
		+u16string : using
		+vector : using
		+flag_aliases : vector<Flag_Set>
	}
}

namespace nuspell {
	class Aff_Structures <template <class CharT>> {
		+break_table : Break_Table<CharT>
		+phonetic_table : Phonetic_Table<CharT>
		+prefixes : Prefix_Table<CharT>
		+replacements : Replacement_Table<CharT>
		+input_substr_replacer : Substr_Replacer<CharT>
		+output_substr_replacer : Substr_Replacer<CharT>
		+suffixes : Suffix_Table<CharT>
		+ignored_chars : std::basic_string<CharT>
		+keyboard_closeness : std::basic_string<CharT>
		+try_chars : std::basic_string<CharT>
		+compound_patterns : std::vector<Compound_Pattern<CharT> >
		+similarities : std::vector<Similarity_Group<CharT> >
	}
}

namespace nuspell {
	class Affix {
		+new_flags : Flag_Set
		+cross_product : bool
		+flag : char16_t
		+appending : string
		+condition : string
		+stripping : string
		+string : using
		+vector : using
		+morphological_fields : vector<string>
	}
}

namespace nuspell {
	class Affix_Table <template <class CharT, class AffixT>> {
		-all_cont_flags : Flag_Set
		+emplace(Args&& a) : auto
		+equal_range(my_string_view<CharT> appending) : auto {query}
		+has_continuation_flag(char16_t flag) : auto {query}
		+has_continuation_flags() : auto {query}
		+base : using
		+iterator : using
	}
}

namespace nuspell {
	class Affixing_Result <template <class... Affixes>> {
		+Affixing_Result()
		+Affixing_Result(Word_List::const_reference word_entry, const Affixes& affixes)
		+const_pointer() {query}
		+operator->() : auto {query}
		+operator*() : auto& {query}
		+base_type : using
	}
}

namespace nuspell {
	class Basic_Dictionary {
		+Basic_Dictionary()
		#Basic_Dictionary(std::istream& aff, std::istream& dic)
		#enc_details : Encoding_Details
		#external_to_internal_encoding(const std::string& in, std::wstring& wide_out, std::string& narrow_out) : auto {query}
		+imbue(const std::locale& loc) : auto
		#internal_to_external_encoding(std::string& in_out, std::wstring& wide_in_out) : auto {query}
		+{static} load_from_aff_dic(std::istream& aff, std::istream& dic) : auto
		+{static} load_from_aff_dic(const string& file_path_without_extension) : auto
		+spell(const std::string& word) : auto {query}
		+suggest(const std::string& word, List_Strings<char>& out) : auto {query}
		#List_Strings_Back_Inserter : friend struct
		#external_locale : std::locale
	}
}

namespace nuspell {
	class Break_Table <template <class CharT>> {
		+Break_Table()
		+Break_Table(const Table_Str& v)
		+Break_Table(Table_Str&& v)
		-table : Table_Str
		+end_word_breaks() : auto {query}
		+middle_word_breaks() : auto {query}
		-order_entries() : auto
		+start_word_breaks() : auto {query}
		+operator=(const Table_Str& v) : auto&
		+operator=(Table_Str&& v) : auto&
		+operator=(const Range& range) : auto&
		-end_word_breaks_last_idx : size_t
		-start_word_breaks_last_idx : size_t
		+StrT : using
		+Table_Str : using
		+const_iterator : using
		+iterator : using
	}
}

namespace nuspell {
	class Casing {
	}
}

namespace nuspell {
	class Compound_Check_Pattern {
		+first_word_flag : char16_t
		+second_word_flag : char16_t
		+first_word_end : string
		+replacement : string
		+second_word_begin : string
		+string : using
	}
}

namespace nuspell {
	class Compound_Pattern <template <class CharT>> {
		+replacement : StrT
		+begin_end_chars : String_Pair<CharT>
		+match_first_only_unaffixed_or_zero_affixed : bool
		+first_word_flag : char16_t
		+second_word_flag : char16_t
		+StrT : using
	}
}

namespace nuspell {
	class Compound_Rule_Table {
		+Compound_Rule_Table()
		+Compound_Rule_Table(const std::vector<std::u16string>& tbl)
		+Compound_Rule_Table(std::vector<std::u16string>&& tbl)
		-all_flags : Flag_Set
		+empty() : auto {query}
		-fill_all_flags() : auto
		+has_any_of_flags(const Flag_Set& f) : auto {query}
		+match_any_rule(const std::vector<const Flag_Set*> data) : auto {query}
		+operator=(const std::vector<std::u16string>& tbl) : auto
		+operator=(std::vector<std::u16string>&& tbl) : auto
		-rules : std::vector<std::u16string>
	}
}

namespace nuspell {
	class Compounding_Result {
		+const_pointer() {query}
		+operator->() : auto {query}
		+operator*() : auto& {query}
	}
}

namespace nuspell {
	class Condition <template <class CharT>> {
		+Condition()
		+Condition(const StrT& condition)
		+Condition(StrT&& condition)
		-cond : StrT
		-construct() : auto
		+match(const StrT& s, size_t pos, size_t len) : auto {query}
		+match_prefix(const StrT& s) : auto {query}
		+match_suffix(const StrT& s) : auto {query}
		-length : size_t
		+StrT : using
		+tuple : using
		+vector : using
		-spans : vector<tuple<size_t, size_t, Span_Type> >
	}
}

namespace nuspell {
	class Dict_Base {
		+Dict_Base()
		+add_sug_if_correct(std::basic_string<CharT>& word, OutIter& out) : auto {query}
		+affix_NOT_valid(const Prefix<CharT>& a) : auto {query}
		+affix_NOT_valid(const Suffix<CharT>& a) : auto {query}
		+bad_char_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+check_compound(std::basic_string<CharT>& word) : auto {query}
		+check_compound(std::basic_string<CharT>& word, size_t start_pos, size_t num_part, std::basic_string<CharT>& part) : auto {query}
		+check_compound_classic(std::basic_string<CharT>& word, size_t start_pos, size_t i, size_t num_part, std::basic_string<CharT>& part) : auto {query}
		+check_compound_with_pattern_replacements(std::basic_string<CharT>& word, size_t start_pos, size_t i, size_t num_part, std::basic_string<CharT>& part) : auto {query}
		+check_compound_with_rules(std::basic_string<CharT>& word, std::vector<const Flag_Set*>& words_data, size_t start_pos, std::basic_string<CharT>& part) : auto {query}
		+check_word(std::basic_string<CharT>& s) : auto {query}
		+check_word_in_compound(std::basic_string<CharT>& s) : auto {query}
		+extra_char_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+forgotten_char_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+is_circumfix(const AffixT& a) : auto {query}
		+is_valid_inside_compound(const Flag_Set& flags) : auto {query}
		+keyboard_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+map_suggest(std::basic_string<CharT>& word, OutIter out, size_t i) : auto {query}
		+outer_affix_NOT_valid(const AffixT& a) : auto {query}
		+phonetic_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+rep_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+spell_break(std::basic_string<CharT>& s, size_t depth) : auto {query}
		+spell_casing(std::basic_string<CharT>& s) : auto {query}
		+spell_casing_title(std::basic_string<CharT>& s) : auto {query}
		+spell_casing_upper(std::basic_string<CharT>& s) : auto {query}
		+spell_priv(const std::basic_string<CharT>& s) : auto {query}
		+spell_priv(std::basic_string<CharT>& s) : auto {query}
		+spell_sharps(std::basic_string<CharT>& base, size_t n_pos, size_t n, size_t rep) : auto {query}
		+strip_2_pfx_sfx_3(const Prefix<CharT>& pe1, const Prefix<CharT>& pe2, std::basic_string<CharT>& word) : auto {query}
		+strip_2_prefixes_then_suffix(std::basic_string<CharT>& word) : auto {query}
		+strip_2_sfx_pfx_3(const Suffix<CharT>& se1, const Suffix<CharT>& se2, std::basic_string<CharT>& word) : auto {query}
		+strip_2_suffixes_then_prefix(std::basic_string<CharT>& s) : auto {query}
		+strip_p_s_p_3(const Prefix<CharT>& pe1, const Suffix<CharT>& se1, std::basic_string<CharT>& word) : auto {query}
		+strip_pfx_2_sfx_3(const Prefix<CharT>& pe1, const Suffix<CharT>& se1, std::basic_string<CharT>& s) : auto {query}
		+strip_pfx_then_pfx_2(const Prefix<CharT>& pe1, std::basic_string<CharT>& s) : auto {query}
		+strip_pfx_then_sfx_2(const Prefix<CharT>& pe, std::basic_string<CharT>& s) : auto {query}
		+strip_pfx_then_sfx_comm_2(const Prefix<CharT>& pe, std::basic_string<CharT>& word) : auto {query}
		+strip_prefix_only(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_suffix_prefix(std::basic_string<CharT>& word) : auto {query}
		+strip_prefix_then_2_suffixes(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_then_prefix(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_then_suffix(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_then_suffix_commutative(std::basic_string<CharT>& word) : auto {query}
		+strip_s_p_s_3(const Suffix<CharT>& se1, const Prefix<CharT>& pe1, std::basic_string<CharT>& word) : auto {query}
		+strip_sfx_2_pfx_3(const Suffix<CharT>& se1, const Prefix<CharT>& pe1, std::basic_string<CharT>& s) : auto {query}
		+strip_sfx_then_pfx_2(const Suffix<CharT>& se, std::basic_string<CharT>& s) : auto {query}
		+strip_sfx_then_sfx_2(const Suffix<CharT>& se1, std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_only(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_prefix_suffix(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_then_2_prefixes(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_then_prefix(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_then_suffix(std::basic_string<CharT>& s) : auto {query}
		+suggest_priv(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+try_rep_suggestion(std::basic_string<CharT>& word, OutIter out) : auto {query}
	}
}

namespace nuspell {
	class Encoding {
		+Encoding()
		+Encoding(const std::string& e)
		+Encoding(std::string&& e)
		+Encoding(const char* e)
		+operatorEnc_Type() {query}
		+string&() {query}
		+empty() : auto {query}
		+is_utf8() : auto {query}
		-normalize_name() : auto
		+value_or_default() : auto
		+operator=(const std::string& e) : auto&
		+operator=(std::string&& e) : auto&
		+operator=(const char* e) : auto&
		+value() : auto& {query}
		-name : std::string
	}
}

namespace nuspell {
	class Encoding_Details {
	}
}

namespace nuspell {
	class Finder {
		-dictionaries : Dict_List
		+add_apacheopenoffice_paths() : auto
		+add_default_paths() : auto
		+add_libreoffice_paths() : auto
		+add_mozilla_paths() : auto
		+begin() : auto {query}
		+end() : auto {query}
		+equal_range(const std::string& dict) : auto {query}
		+find(const std::string& dict) : auto {query}
		+get_dictionary(const std::string& dict) : auto {query}
		+search_dictionaries() : auto
		+{static} search_dictionaries_in_all_paths() : auto
		+get_all_dictionaries() : auto& {query}
		+get_all_paths() : auto& {query}
		-paths : std::vector<std::string>
		-Dict_List : using
		+const_iterator : using
	}
}

namespace nuspell {
	class Hash_Multiset <template <class Value, class Key = Value, class KeyExtract = identity, class Hash = std::hash<Key>, class KeyEqual = std::equal_to<Key>>> {
		+Hash_Multiset()
		+emplace(Args&& a) : auto
		+empty() : auto {query}
		+equal_range(const CompatibleKey& key) : auto {query}
		+equal_range_nonconst_unsafe(const CompatibleKey& key) : auto
		+insert(const_reference value) : auto
		+rehash(size_t count) : auto
		+reserve(size_t count) : auto
		+size() : auto {query}
		-max_load_factor_capacity : size_t
		-sz : size_t
		-{static} max_load_fact : static constexpr float
		-data : std::vector<bucket_type>
		-bucket_type : using
		+const_pointer : using
		+const_reference : using
		+difference_type : using
		+hasher : using
		+key_type : using
		+local_const_iterator : using
		+local_iterator : using
		+pointer : using
		+reference : using
		+size_type : using
		+value_type : using
	}
}

namespace nuspell {
	class List_Strings <template <class CharT>> {
		+List_Strings()
		+List_Strings(size_type n)
		+List_Strings(size_type n, const_reference value)
		+List_Strings(InputIterator first, InputIterator last)
		+List_Strings(std::initializer_list<value_type> il)
		+List_Strings(const List_Strings& other)
		+List_Strings(List_Strings&& other)
		-d : VecT
		+assign(InputIterator first, InputIterator last) : auto
		+begin() : auto
		+begin() : auto {query}
		+capacity() : auto {query}
		+cbegin() : auto {query}
		+cend() : auto {query}
		+clear() : auto
		+crbegin() : auto {query}
		+crend() : auto {query}
		+data() : auto
		+data() : auto {query}
		+emplace(const_iterator pos, Args&& args) : auto
		+empty() : auto {query}
		+end() : auto
		+end() : auto {query}
		+erase(const_iterator position) : auto
		+erase(const_iterator first, const_iterator last) : auto
		+get_allocator() : auto {query}
		+insert(const_iterator pos, const_reference x) : auto
		+insert(const_iterator pos, value_type&& x) : auto
		+insert(const_iterator pos, size_type n, const_reference x) : auto
		+insert(const_iterator pos, InputIterator first, InputIterator last) : auto
		+insert(const_iterator pos, std::initializer_list<value_type> il) : auto
		-insert_priv(const_iterator pos, U&& val) : auto
		+max_size() : auto {query}
		+operator!=(const List_Strings& other) : auto {query}
		+operator<(const List_Strings& other) : auto {query}
		+operator<=(const List_Strings& other) : auto {query}
		+operator==(const List_Strings& other) : auto {query}
		+operator>(const List_Strings& other) : auto {query}
		+operator>=(const List_Strings& other) : auto {query}
		+pop_back() : auto
		+push_back(const_reference x) : auto
		+push_back(value_type&& x) : auto
		+rbegin() : auto
		+rbegin() : auto {query}
		+rend() : auto
		+rend() : auto {query}
		+resize(size_type new_sz) : auto
		+resize(size_type new_sz, const_reference c) : auto
		+size() : auto {query}
		+swap(List_Strings& other) : auto
		+at(size_type n) : auto&
		+at(size_type n) : auto& {query}
		+back() : auto&
		+back() : auto& {query}
		+emplace_back(Args&& args) : auto&
		+emplace_back() : auto&
		+front() : auto&
		+front() : auto& {query}
		+operator=(const List_Strings& other) : auto&
		+operator=(List_Strings&& other) : auto&
		+operator=(std::initializer_list<value_type> il) : auto&
		+operator[](size_type n) : auto&
		+operator[](size_type n) : auto& {query}
		-sz : size_t
		-VecT : using
		+allocator_type : using
		+const_iterator : using
		+const_pointer : using
		+const_reference : using
		+const_reverse_iterator : using
		+difference_type : using
		+iterator : using
		+pointer : using
		+reference : using
		+reverse_iterator : using
		+size_type : using
		+value_type : using
		+assign(size_type n, const_reference value) : void
		+assign(std::initializer_list<value_type> il) : void
		+reserve(size_type n) : void
		+shrink_to_fit() : void
	}
}

namespace nuspell {
	class Phonetic_Table <template <class CharT>> {
		+Phonetic_Table()
		+Phonetic_Table(const std::vector<std::pair<StrT, StrT> >& v)
		+Phonetic_Table(std::vector<std::pair<StrT, StrT> >&& v)
		-{static} match(const StrT& data, size_t i, const StrT& pattern, bool at_begin) : auto
		-order() : auto
		+replace(StrT& word) : auto {query}
		+operator=(const std::vector<std::pair<StrT, StrT> >& v) : auto&
		+operator=(std::vector<std::pair<StrT, StrT> >&& v) : auto&
		+operator=(const Range& range) : auto&
		-table : std::vector<std::pair<StrT, StrT> >
		-StrT : using
	}
}

namespace nuspell::Phonetic_Table {
	class Phonetic_Table::Phonet_Match_Result {
		+operatorbool()
		+go_back_after_replace : bool
		+treat_next_as_begin : bool
		+count_matched : size_t
		+go_back_before_replace : size_t
		+priority : size_t
	}
}

namespace nuspell {
	class Prefix <template <class CharT>> {
		+Prefix()
		+Prefix(char16_t flag, bool cross_product, const StrT& strip, const StrT& append, const Flag_Set& cont_flags, const StrT& condition)
		+condition : CondT
		+cont_flags : Flag_Set
		+appending : StrT
		+stripping : StrT
		+check_condition(const StrT& word) : auto {query}
		+to_derived(StrT& word) : auto {query}
		+to_derived_copy(StrT word) : auto {query}
		+to_root(StrT& word) : auto {query}
		+to_root_copy(StrT word) : auto {query}
		+cross_product : bool
		+flag : char16_t
		+CondT : using
		+StrT : using
	}
}

namespace nuspell {
	class Replacement_Table <template <class CharT>> {
		+Replacement_Table()
		+Replacement_Table(const Table_Str& v)
		+Replacement_Table(Table_Str&& v)
		-table : Table_Str
		+any_place_replacements() : auto {query}
		+end_word_replacements() : auto {query}
		-order_entries() : auto
		+start_word_replacements() : auto {query}
		+whole_word_replacements() : auto {query}
		+operator=(const Table_Str& v) : auto&
		+operator=(Table_Str&& v) : auto&
		+operator=(const Range& range) : auto&
		-end_word_reps_last_idx : size_t
		-start_word_reps_last_idx : size_t
		-whole_word_reps_last_idx : size_t
		+StrT : using
		+Table_Str : using
		+const_iterator : using
		+iterator : using
	}
}

namespace nuspell {
	class Similarity_Group <template <class CharT>> {
		+Similarity_Group()
		+Similarity_Group(const StrT& s)
		+chars : StrT
		+parse(const StrT& s) : auto
		+operator=(const StrT& s) : auto&
		+strings : std::vector<StrT>
		+StrT : using
	}
}

namespace nuspell {
	class String_Pair <template <class CharT>> {
		+String_Pair()
		+String_Pair(Str1&& str, size_t i)
		+String_Pair(Str1&& first, Str2&& second)
		-s : StrT
		+first() : auto {query}
		+first(my_string_view<CharT> x) : auto
		+idx() : auto {query}
		+second() : auto {query}
		+second(my_string_view<CharT> x) : auto
		+str() : auto& {query}
		-i : size_t
		-StrT : using
	}
}

namespace nuspell {
	class String_Set <template <class CharT>> {
		+String_Set()
		+String_Set(const StrT& s)
		+String_Set(StrT&& s)
		+String_Set(InputIterator first, InputIterator last)
		+String_Set(std::initializer_list<value_type> il)
		+operatorconstStrT&() {query}
		+insert(const StrT& s) : auto
		-lookup(const key_type& x) : auto {query}
		+operator+=(const StrT& s) : auto
		-sort_uniq() : auto
		+data() : auto& {query}
		+operator=(const StrT& s) : auto&
		+operator=(StrT&& s) : auto&
		+operator=(std::initializer_list<value_type> il) : auto&
		+contains(const key_type& x) : bool {query}
		+empty() : bool {query}
		+operator!=(const String_Set& rhs) : bool {query}
		+operator<(const String_Set& rhs) : bool {query}
		+operator<=(const String_Set& rhs) : bool {query}
		+operator==(const String_Set& rhs) : bool {query}
		+operator>(const String_Set& rhs) : bool {query}
		+operator>=(const String_Set& rhs) : bool {query}
		+begin() : const_iterator {query}
		+cbegin() : const_iterator {query}
		+cend() : const_iterator {query}
		+end() : const_iterator {query}
		+find(const key_type& x) : const_iterator {query}
		+lower_bound(const key_type& x) : const_iterator {query}
		+upper_bound(const key_type& x) : const_iterator {query}
		+crbegin() : const_reverse_iterator {query}
		+crend() : const_reverse_iterator {query}
		+rbegin() : const_reverse_iterator {query}
		+rend() : const_reverse_iterator {query}
		+begin() : iterator
		+emplace_hint(iterator hint, Args&& args) : iterator
		+end() : iterator
		+erase(iterator position) : iterator
		+erase(iterator first, iterator last) : iterator
		+find(const key_type& x) : iterator
		+insert(iterator hint, const value_type& x) : iterator
		+lower_bound(const key_type& x) : iterator
		+upper_bound(const key_type& x) : iterator
		+key_comp() : key_compare {query}
		+rbegin() : reverse_iterator
		+rend() : reverse_iterator
		+count(const key_type& x) : size_type {query}
		+erase(const key_type& x) : size_type
		+max_size() : size_type {query}
		+size() : size_type {query}
		-d : std::basic_string<CharT>
		+equal_range(const key_type& x) : std::pair<const_iterator , const_iterator> {query}
		+emplace(Args&& args) : std::pair<iterator , bool>
		+insert(const value_type& x) : std::pair<iterator , bool>
		+equal_range(const key_type& x) : std::pair<iterator , iterator>
		+StrT : using
		+allocator_type : using
		+const_iterator : using
		+const_pointer : using
		+const_reference : using
		+const_reverse_iterator : using
		+difference_type : using
		+iterator : using
		+key_compare : using
		+key_type : using
		+pointer : using
		+reference : using
		+reverse_iterator : using
		+size_type : using
		+traits_type : using
		+value_compare : using
		+value_type : using
		+value_comp() : value_compare {query}
		+clear() : void
		+insert(InputIterator first, InputIterator last) : void
		+insert(std::initializer_list<value_type> il) : void
		+swap(String_Set& s) : void
	}
}

namespace nuspell::String_Set {
	class String_Set::Char_Traits_Less_Than {
		+operator()(CharT a, CharT b) : auto
	}
}

namespace nuspell {
	class Substr_Replacer <template <class CharT>> {
		+Substr_Replacer()
		+Substr_Replacer(const Table_Pairs& v)
		+Substr_Replacer(const Table_Pairs&& v)
		-table : Table_Pairs
		+replace(StrT& s) : auto {query}
		+replace_copy(StrT s) : auto {query}
		+operator=(const Table_Pairs& v) : auto&
		+operator=(const Table_Pairs&& v) : auto&
		+operator=(const Range& range) : auto&
		+StrT : using
		+Table_Pairs : using
		-sort_uniq() : void
	}
}

namespace nuspell {
	class Suffix <template <class CharT>> {
		+Suffix()
		+Suffix(char16_t flag, bool cross_product, const StrT& strip, const StrT& append, const Flag_Set& cont_flags, const StrT& condition)
		+condition : CondT
		+cont_flags : Flag_Set
		+appending : StrT
		+stripping : StrT
		+check_condition(const StrT& word) : auto {query}
		+to_derived(StrT& word) : auto {query}
		+to_derived_copy(StrT word) : auto {query}
		+to_root(StrT& word) : auto {query}
		+to_root_copy(StrT word) : auto {query}
		+cross_product : bool
		+flag : char16_t
		+CondT : using
		+StrT : using
	}
}

namespace nuspell {
	class Word_List {
		+equal_range(const std::wstring& word) : auto {query}
		+equal_range : using Word_List_Base::
	}
}

namespace nuspell {
	class identity {
		+operator()(T&& t) : constexpr auto&
	}
}

namespace nuspell {
	class sv_eq <template <class CharT>> {
		+operator()(my_string_view<CharT> l, my_string_view<CharT> r) : auto {query}
	}
}

namespace nuspell {
	class sv_hash <template <class CharT>> {
		+operator()(boost::basic_string_view<CharT> s) : auto {query}
	}
}

namespace nuspell {
	enum Affixing_Mode {
		AT_COMPOUND_BEGIN
		AT_COMPOUND_END
		AT_COMPOUND_MIDDLE
		FULL_WORD
	}
}

namespace nuspell {
	enum Flag_Type {
		FLAG_DOUBLE_CHAR
		FLAG_NUMBER
		FLAG_SINGLE_CHAR
		FLAG_UTF8
	}
}

namespace nuspell {
	enum empty {
	}
}

namespace nuspell {
	Aff_Data <|- - Dict_Base
}

namespace nuspell {
	Dict_Base <|- - Basic_Dictionary
}

namespace nuspell {
	Aff_Data "2" o- - Aff_Structures
}

namespace nuspell {
	Aff_Data o- - Compound_Rule_Table
}

namespace nuspell {
	Aff_Data o- - Word_List
}

namespace nuspell {
	Aff_Structures o- - Break_Table
}

namespace nuspell {
	Aff_Structures o- - Compound_Pattern
}

namespace nuspell {
	Aff_Structures o- - Phonetic_Table
}

namespace nuspell {
	Aff_Structures o- - Replacement_Table
}

namespace nuspell {
	Aff_Structures o- - Similarity_Group
}

namespace nuspell {
	Aff_Structures "2" o- - Substr_Replacer
}

namespace nuspell {
	Basic_Dictionary o- - Encoding_Details
}

namespace nuspell {
	Compound_Pattern o- - String_Pair
}


@enduml

PlantUML version 1.2018.10(Sat Aug 25 19:02:59 CEST 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 10.0.2+13-Ubuntu-1ubuntu0.18.04.2
Operating System: Linux
OS Version: 4.15.0-34-generic
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>