<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="3022px" preserveAspectRatio="none" style="width:5545px;height:3022px;" version="1.1" viewBox="0 0 5545 3022" width="5545px" zoomAndPan="magnify"><defs><filter height="300%" id="f1552kg1324s2n" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--cluster nuspell--><polygon fill="#FFFFFF" filter="url(#f1552kg1324s2n)" points="14,16,77,16,84,38.2969,5253,38.2969,5253,3010,14,3010,14,16" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="14" x2="84" y1="38.2969" y2="38.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="57" x="18" y="30.9951">nuspell</text><!--cluster nuspell::String_Set--><polygon fill="#FFFFFF" filter="url(#f1552kg1324s2n)" points="5261,368,5416,368,5423,390.2969,5523,390.2969,5523,464,5261,464,5261,368" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="5261" x2="5423" y1="390.2969" y2="390.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="149" x="5265" y="382.9951">nuspell::String_Set</text><!--class nuspell.Aff_Data--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="765.0625" id="nuspell.Aff_Data" style="stroke: #A80036; stroke-width: 1.5;" width="447" x="1397.5" y="43"/><ellipse cx="1590.75" cy="59" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1593.7188,64.6406 Q1593.1406,64.9375 1592.5,65.0781 Q1591.8594,65.2344 1591.1563,65.2344 Q1588.6563,65.2344 1587.3281,63.5938 Q1586.0156,61.9375 1586.0156,58.8125 Q1586.0156,55.6875 1587.3281,54.0313 Q1588.6563,52.375 1591.1563,52.375 Q1591.8594,52.375 1592.5,52.5313 Q1593.1563,52.6875 1593.7188,52.9844 L1593.7188,55.7031 Q1593.0938,55.125 1592.5,54.8594 Q1591.9063,54.5781 1591.2813,54.5781 Q1589.9375,54.5781 1589.25,55.6563 Q1588.5625,56.7188 1588.5625,58.8125 Q1588.5625,60.9063 1589.25,61.9844 Q1589.9375,63.0469 1591.2813,63.0469 Q1591.9063,63.0469 1592.5,62.7813 Q1593.0938,62.5 1593.7188,61.9219 L1593.7188,64.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="52" x="1611.25" y="63.1543">Aff_Data</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1398.5" x2="1843.5" y1="75" y2="75"/><ellipse cx="1408.5" cy="86.9023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="1417.5" y="89.2104">structures : Aff_Structures&lt;char&gt;</text><ellipse cx="1408.5" cy="99.707" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="1417.5" y="102.0151">wide_structures : Aff_Structures&lt;wchar_t&gt;</text><ellipse cx="1408.5" cy="112.5117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="1417.5" y="114.8198">compound_rules : Compound_Rule_Table</text><ellipse cx="1408.5" cy="125.3164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="1417.5" y="127.6245">compound_syllable_num : Flag_Set</text><ellipse cx="1408.5" cy="138.1211" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="1417.5" y="140.4292">flag_type : Flag_Type</text><ellipse cx="1408.5" cy="150.9258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="1417.5" y="153.2339">words : Word_List</text><ellipse cx="1408.5" cy="163.7305" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="1417.5" y="166.0386">checksharps : bool</text><ellipse cx="1408.5" cy="176.5352" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="1417.5" y="178.8433">complex_prefixes : bool</text><ellipse cx="1408.5" cy="189.3398" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="1417.5" y="191.6479">compound_check_case : bool</text><ellipse cx="1408.5" cy="202.1445" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="1417.5" y="204.4526">compound_check_duplicate : bool</text><ellipse cx="1408.5" cy="214.9492" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="1417.5" y="217.2573">compound_check_rep : bool</text><ellipse cx="1408.5" cy="227.7539" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="1417.5" y="230.062">compound_check_triple : bool</text><ellipse cx="1408.5" cy="240.5586" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="1417.5" y="242.8667">compound_more_suffixes : bool</text><ellipse cx="1408.5" cy="253.3633" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="1417.5" y="255.6714">compound_simplified_triple : bool</text><ellipse cx="1408.5" cy="266.168" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1417.5" y="268.4761">forbid_warn : bool</text><ellipse cx="1408.5" cy="278.9727" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="1417.5" y="281.2808">fullstrip : bool</text><ellipse cx="1408.5" cy="291.7773" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="1417.5" y="294.0854">no_split_suggestions : bool</text><ellipse cx="1408.5" cy="304.582" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="1417.5" y="306.8901">only_max_diff : bool</text><ellipse cx="1408.5" cy="317.3867" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="1417.5" y="319.6948">suggest_with_dots : bool</text><ellipse cx="1408.5" cy="330.1914" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1417.5" y="332.4995">circumfix_flag : char16_t</text><ellipse cx="1408.5" cy="342.9961" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="1417.5" y="345.3042">compound_begin_flag : char16_t</text><ellipse cx="1408.5" cy="355.8008" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1417.5" y="358.1089">compound_flag : char16_t</text><ellipse cx="1408.5" cy="368.6055" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="1417.5" y="370.9136">compound_forbid_flag : char16_t</text><ellipse cx="1408.5" cy="381.4102" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="1417.5" y="383.7183">compound_force_uppercase : char16_t</text><ellipse cx="1408.5" cy="394.2148" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="1417.5" y="396.5229">compound_last_flag : char16_t</text><ellipse cx="1408.5" cy="407.0195" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="1417.5" y="409.3276">compound_middle_flag : char16_t</text><ellipse cx="1408.5" cy="419.8242" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="1417.5" y="422.1323">compound_onlyin_flag : char16_t</text><ellipse cx="1408.5" cy="432.6289" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="1417.5" y="434.937">compound_permit_flag : char16_t</text><ellipse cx="1408.5" cy="445.4336" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="1417.5" y="447.7417">compound_root_flag : char16_t</text><ellipse cx="1408.5" cy="458.2383" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="1417.5" y="460.5464">forbiddenword_flag : char16_t</text><ellipse cx="1408.5" cy="471.043" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="1417.5" y="473.3511">keepcase_flag : char16_t</text><ellipse cx="1408.5" cy="483.8477" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="1417.5" y="486.1558">need_affix_flag : char16_t</text><ellipse cx="1408.5" cy="496.6523" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="1417.5" y="498.9604">nosuggest_flag : char16_t</text><ellipse cx="1408.5" cy="509.457" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="1417.5" y="511.7651">substandard_flag : char16_t</text><ellipse cx="1408.5" cy="522.2617" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="1417.5" y="524.5698">warn_flag : char16_t</text><ellipse cx="1408.5" cy="535.0664" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1417.5" y="537.3745">internal_locale : std::locale</text><ellipse cx="1408.5" cy="547.8711" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="1417.5" y="550.1792">compound_syllable_vowels : string</text><ellipse cx="1408.5" cy="560.6758" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="1417.5" y="562.9839">wordchars : string</text><ellipse cx="1408.5" cy="573.4805" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="1417.5" y="575.7886">compound_max_word_count : unsigned short</text><ellipse cx="1408.5" cy="586.2852" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="1417.5" y="588.5933">compound_min_length : unsigned short</text><ellipse cx="1408.5" cy="599.0898" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="1417.5" y="601.3979">compound_syllable_max : unsigned short</text><ellipse cx="1408.5" cy="611.8945" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="1417.5" y="614.2026">max_compound_suggestions : unsigned short</text><ellipse cx="1408.5" cy="624.6992" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="1417.5" y="627.0073">max_diff_factor : unsigned short</text><ellipse cx="1408.5" cy="637.5039" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="1417.5" y="639.812">max_ngram_suggestions : unsigned short</text><ellipse cx="1408.5" cy="650.3086" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="1417.5" y="652.6167">istream : using</text><ellipse cx="1408.5" cy="663.1133" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="1417.5" y="665.4214">pair : using</text><ellipse cx="1408.5" cy="675.918" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="1417.5" y="678.2261">string : using</text><ellipse cx="1408.5" cy="688.7227" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="1417.5" y="691.0308">u16string : using</text><ellipse cx="1408.5" cy="701.5273" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="1417.5" y="703.8354">vector : using</text><ellipse cx="1408.5" cy="714.332" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="1417.5" y="716.6401">flag_aliases : vector&lt;Flag_Set&gt;</text><ellipse cx="1408.5" cy="727.1367" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="1417.5" y="729.4448">phonetic_replacements : vector&lt;pair&lt;string, string&gt; &gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1398.5" x2="1843.5" y1="736.0391" y2="736.0391"/><ellipse cx="1408.5" cy="747.9414" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="1417.5" y="750.2495">get_structures() : auto {query}</text><ellipse cx="1408.5" cy="760.7461" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="1417.5" y="763.0542">parse_aff(istream&amp; in) : auto</text><ellipse cx="1408.5" cy="773.5508" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="1417.5" y="775.8589">parse_aff_dic(std::istream&amp; aff, std::istream&amp; dic) : auto</text><ellipse cx="1408.5" cy="786.3555" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="1417.5" y="788.6636">parse_dic(istream&amp; in) : auto</text><ellipse cx="1408.5" cy="799.1602" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="421" x="1417.5" y="801.4683">set_encoding_and_language(const string&amp; enc, const string&amp; lang) : auto</text><!--class nuspell.Aff_Structures--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="188.8516" id="nuspell.Aff_Structures" style="stroke: #A80036; stroke-width: 1.5;" width="394" x="589" y="1137"/><ellipse cx="659.75" cy="1153" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M662.7188,1158.6406 Q662.1406,1158.9375 661.5,1159.0781 Q660.8594,1159.2344 660.1563,1159.2344 Q657.6563,1159.2344 656.3281,1157.5938 Q655.0156,1155.9375 655.0156,1152.8125 Q655.0156,1149.6875 656.3281,1148.0313 Q657.6563,1146.375 660.1563,1146.375 Q660.8594,1146.375 661.5,1146.5313 Q662.1563,1146.6875 662.7188,1146.9844 L662.7188,1149.7031 Q662.0938,1149.125 661.5,1148.8594 Q660.9063,1148.5781 660.2813,1148.5781 Q658.9375,1148.5781 658.25,1149.6563 Q657.5625,1150.7188 657.5625,1152.8125 Q657.5625,1154.9063 658.25,1155.9844 Q658.9375,1157.0469 660.2813,1157.0469 Q660.9063,1157.0469 661.5,1156.7813 Q662.0938,1156.5 662.7188,1155.9219 L662.7188,1158.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="88" x="680.25" y="1157.1543">Aff_Structures</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="832" y="1134"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="833" y="1146.1387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="590" x2="982" y1="1169" y2="1169"/><ellipse cx="600" cy="1180.9023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="609" y="1183.2104">break_table : Break_Table&lt;CharT&gt;</text><ellipse cx="600" cy="1193.707" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="609" y="1196.0151">prefixes : Prefix_Table&lt;CharT&gt;</text><ellipse cx="600" cy="1206.5117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="609" y="1208.8198">replacements : Replacement_Table&lt;CharT&gt;</text><ellipse cx="600" cy="1219.3164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="609" y="1221.6245">input_substr_replacer : Substr_Replacer&lt;CharT&gt;</text><ellipse cx="600" cy="1232.1211" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="609" y="1234.4292">output_substr_replacer : Substr_Replacer&lt;CharT&gt;</text><ellipse cx="600" cy="1244.9258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="609" y="1247.2339">suffixes : Suffix_Table&lt;CharT&gt;</text><ellipse cx="600" cy="1257.7305" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="609" y="1260.0386">ignored_chars : std::basic_string&lt;CharT&gt;</text><ellipse cx="600" cy="1270.5352" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="609" y="1272.8433">keyboard_closeness : std::basic_string&lt;CharT&gt;</text><ellipse cx="600" cy="1283.3398" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="609" y="1285.6479">try_chars : std::basic_string&lt;CharT&gt;</text><ellipse cx="600" cy="1296.1445" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="368" x="609" y="1298.4526">compound_patterns : std::vector&lt;Compound_Pattern&lt;CharT&gt; &gt;</text><ellipse cx="600" cy="1308.9492" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="609" y="1311.2573">similarities : std::vector&lt;Similarity_Group&lt;CharT&gt; &gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="590" x2="982" y1="1317.8516" y2="1317.8516"/><!--class nuspell.Affix--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="163.2422" id="nuspell.Affix" style="stroke: #A80036; stroke-width: 1.5;" width="241" x="2891.5" y="344"/><ellipse cx="2995.25" cy="360" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2998.2188,365.6406 Q2997.6406,365.9375 2997,366.0781 Q2996.3594,366.2344 2995.6563,366.2344 Q2993.1563,366.2344 2991.8281,364.5938 Q2990.5156,362.9375 2990.5156,359.8125 Q2990.5156,356.6875 2991.8281,355.0313 Q2993.1563,353.375 2995.6563,353.375 Q2996.3594,353.375 2997,353.5313 Q2997.6563,353.6875 2998.2188,353.9844 L2998.2188,356.7031 Q2997.5938,356.125 2997,355.8594 Q2996.4063,355.5781 2995.7813,355.5781 Q2994.4375,355.5781 2993.75,356.6563 Q2993.0625,357.7188 2993.0625,359.8125 Q2993.0625,361.9063 2993.75,362.9844 Q2994.4375,364.0469 2995.7813,364.0469 Q2996.4063,364.0469 2997,363.7813 Q2997.5938,363.5 2998.2188,362.9219 L2998.2188,365.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="25" x="3015.75" y="364.1543">Affix</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2892.5" x2="3131.5" y1="376" y2="376"/><ellipse cx="2902.5" cy="387.9023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="2911.5" y="390.2104">new_flags : Flag_Set</text><ellipse cx="2902.5" cy="400.707" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="2911.5" y="403.0151">cross_product : bool</text><ellipse cx="2902.5" cy="413.5117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="2911.5" y="415.8198">flag : char16_t</text><ellipse cx="2902.5" cy="426.3164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="2911.5" y="428.6245">appending : string</text><ellipse cx="2902.5" cy="439.1211" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="2911.5" y="441.4292">condition : string</text><ellipse cx="2902.5" cy="451.9258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="2911.5" y="454.2339">stripping : string</text><ellipse cx="2902.5" cy="464.7305" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="2911.5" y="467.0386">string : using</text><ellipse cx="2902.5" cy="477.5352" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="2911.5" y="479.8433">vector : using</text><ellipse cx="2902.5" cy="490.3398" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="2911.5" y="492.6479">morphological_fields : vector&lt;string&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2892.5" x2="3131.5" y1="499.2422" y2="499.2422"/><!--class nuspell.Affix_Table--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="137.6328" id="nuspell.Affix_Table" style="stroke: #A80036; stroke-width: 1.5;" width="393" x="3167.5" y="356.5"/><ellipse cx="3211.3" cy="372.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3214.2688,378.1406 Q3213.6906,378.4375 3213.05,378.5781 Q3212.4094,378.7344 3211.7063,378.7344 Q3209.2063,378.7344 3207.8781,377.0938 Q3206.5656,375.4375 3206.5656,372.3125 Q3206.5656,369.1875 3207.8781,367.5313 Q3209.2063,365.875 3211.7063,365.875 Q3212.4094,365.875 3213.05,366.0313 Q3213.7063,366.1875 3214.2688,366.4844 L3214.2688,369.2031 Q3213.6438,368.625 3213.05,368.3594 Q3212.4563,368.0781 3211.8313,368.0781 Q3210.4875,368.0781 3209.8,369.1563 Q3209.1125,370.2188 3209.1125,372.3125 Q3209.1125,374.4063 3209.8,375.4844 Q3210.4875,376.5469 3211.8313,376.5469 Q3212.4563,376.5469 3213.05,376.2813 Q3213.6438,376 3214.2688,375.4219 L3214.2688,378.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="65" x="3231.7" y="376.6543">Affix_Table</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="230" x="3333.5" y="353.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="228" x="3334.5" y="365.6387">template &lt;class CharT, class AffixT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3168.5" x2="3559.5" y1="388.5" y2="388.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3175.5" y="397.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="3187.5" y="402.7104">all_cont_flags : Flag_Set</text><ellipse cx="3178.5" cy="413.207" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3187.5" y="415.5151">base : using</text><ellipse cx="3178.5" cy="426.0117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="3187.5" y="428.3198">iterator : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3168.5" x2="3559.5" y1="434.9141" y2="434.9141"/><ellipse cx="3178.5" cy="446.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="3187.5" y="449.1245">emplace(Args&amp;&amp; a) : auto</text><ellipse cx="3178.5" cy="459.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="367" x="3187.5" y="461.9292">equal_range(my_string_view&lt;CharT&gt; appending) : auto {query}</text><ellipse cx="3178.5" cy="472.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="292" x="3187.5" y="474.7339">has_continuation_flag(char16_t flag) : auto {query}</text><ellipse cx="3178.5" cy="485.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="3187.5" y="487.5386">has_continuation_flags() : auto {query}</text><!--class nuspell.Affixing_Result--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="124.8281" id="nuspell.Affixing_Result" style="stroke: #A80036; stroke-width: 1.5;" width="470" x="3596" y="363"/><ellipse cx="3696.25" cy="379" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3699.2188,384.6406 Q3698.6406,384.9375 3698,385.0781 Q3697.3594,385.2344 3696.6563,385.2344 Q3694.1563,385.2344 3692.8281,383.5938 Q3691.5156,381.9375 3691.5156,378.8125 Q3691.5156,375.6875 3692.8281,374.0313 Q3694.1563,372.375 3696.6563,372.375 Q3697.3594,372.375 3698,372.5313 Q3698.6563,372.6875 3699.2188,372.9844 L3699.2188,375.7031 Q3698.5938,375.125 3698,374.8594 Q3697.4063,374.5781 3696.7813,374.5781 Q3695.4375,374.5781 3694.75,375.6563 Q3694.0625,376.7188 3694.0625,378.8125 Q3694.0625,380.9063 3694.75,381.9844 Q3695.4375,383.0469 3696.7813,383.0469 Q3697.4063,383.0469 3698,382.7813 Q3698.5938,382.5 3699.2188,381.9219 L3699.2188,384.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="89" x="3716.75" y="383.1543">Affixing_Result</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="170" x="3899" y="360"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="168" x="3900" y="372.1387">template &lt;class... Affixes&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3597" x2="4065" y1="395" y2="395"/><ellipse cx="3607" cy="406.9023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="3616" y="409.2104">base_type : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3597" x2="4065" y1="415.8047" y2="415.8047"/><ellipse cx="3607" cy="427.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="3616" y="430.0151">Affixing_Result()</text><ellipse cx="3607" cy="440.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="444" x="3616" y="442.8198">Affixing_Result(Word_List::const_reference word_entry, const Affixes&amp; affixes)</text><ellipse cx="3607" cy="453.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="3616" y="455.6245">const_pointer() {query}</text><ellipse cx="3607" cy="466.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="3616" y="468.4292">operator-&gt;() : auto {query}</text><ellipse cx="3607" cy="478.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="3616" y="481.2339">operator*() : auto&amp; {query}</text><!--class nuspell.Basic_Dictionary--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="201.6563" id="nuspell.Basic_Dictionary" style="stroke: #A80036; stroke-width: 1.5;" width="693" x="1657.5" y="2096.5"/><ellipse cx="1949.25" cy="2112.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1952.2188,2118.1406 Q1951.6406,2118.4375 1951,2118.5781 Q1950.3594,2118.7344 1949.6563,2118.7344 Q1947.1563,2118.7344 1945.8281,2117.0938 Q1944.5156,2115.4375 1944.5156,2112.3125 Q1944.5156,2109.1875 1945.8281,2107.5313 Q1947.1563,2105.875 1949.6563,2105.875 Q1950.3594,2105.875 1951,2106.0313 Q1951.6563,2106.1875 1952.2188,2106.4844 L1952.2188,2109.2031 Q1951.5938,2108.625 1951,2108.3594 Q1950.4063,2108.0781 1949.7813,2108.0781 Q1948.4375,2108.0781 1947.75,2109.1563 Q1947.0625,2110.2188 1947.0625,2112.3125 Q1947.0625,2114.4063 1947.75,2115.4844 Q1948.4375,2116.5469 1949.7813,2116.5469 Q1950.4063,2116.5469 1951,2116.2813 Q1951.5938,2116 1952.2188,2115.4219 L1952.2188,2118.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="101" x="1969.75" y="2116.6543">Basic_Dictionary</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1658.5" x2="2349.5" y1="2128.5" y2="2128.5"/><polygon fill="none" points="1668.5,2135.4023,1672.5,2139.4023,1668.5,2143.4023,1664.5,2139.4023" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="1677.5" y="2142.7104">enc_details : Encoding_Details</text><polygon fill="none" points="1668.5,2148.207,1672.5,2152.207,1668.5,2156.207,1664.5,2152.207" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="1677.5" y="2155.5151">List_Strings_Back_Inserter : friend struct</text><polygon fill="none" points="1668.5,2161.0117,1672.5,2165.0117,1668.5,2169.0117,1664.5,2165.0117" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="1677.5" y="2168.3198">external_locale : std::locale</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1658.5" x2="2349.5" y1="2174.9141" y2="2174.9141"/><ellipse cx="1668.5" cy="2186.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="1677.5" y="2189.1245">Basic_Dictionary()</text><polygon fill="#FFFF44" points="1668.5,2194.6211,1672.5,2198.6211,1668.5,2202.6211,1664.5,2198.6211" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="1677.5" y="2201.9292">Basic_Dictionary(std::istream&amp; aff, std::istream&amp; dic)</text><polygon fill="#FFFF44" points="1668.5,2207.4258,1672.5,2211.4258,1668.5,2215.4258,1664.5,2211.4258" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="667" x="1677.5" y="2214.7339">external_to_internal_encoding(const std::string&amp; in, std::wstring&amp; wide_out, std::string&amp; narrow_out) : auto {query}</text><ellipse cx="1668.5" cy="2225.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="1677.5" y="2227.5386">imbue(const std::locale&amp; loc) : auto</text><polygon fill="#FFFF44" points="1668.5,2233.0352,1672.5,2237.0352,1668.5,2241.0352,1664.5,2237.0352" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="527" x="1677.5" y="2240.3433">internal_to_external_encoding(std::string&amp; in_out, std::wstring&amp; wide_in_out) : auto {query}</text><ellipse cx="1668.5" cy="2250.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="352" x="1677.5" y="2253.1479">load_from_aff_dic(std::istream&amp; aff, std::istream&amp; dic) : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1677.5" x2="2029.5" y1="2255.1479" y2="2255.1479"/><ellipse cx="1668.5" cy="2263.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="383" x="1677.5" y="2265.9526">load_from_aff_dic(const string&amp; file_path_without_extension) : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1677.5" x2="2060.5" y1="2267.9526" y2="2267.9526"/><ellipse cx="1668.5" cy="2276.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="1677.5" y="2278.7573">spell(const std::string&amp; word) : auto {query}</text><ellipse cx="1668.5" cy="2289.2539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="427" x="1677.5" y="2291.562">suggest(const std::string&amp; word, List_Strings&lt;char&gt;&amp; out) : auto {query}</text><!--class nuspell.Break_Table--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="265.6797" id="nuspell.Break_Table" style="stroke: #A80036; stroke-width: 1.5;" width="264" x="22" y="2064.5"/><ellipse cx="37" cy="2080.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M39.9688,2086.1406 Q39.3906,2086.4375 38.75,2086.5781 Q38.1094,2086.7344 37.4063,2086.7344 Q34.9063,2086.7344 33.5781,2085.0938 Q32.2656,2083.4375 32.2656,2080.3125 Q32.2656,2077.1875 33.5781,2075.5313 Q34.9063,2073.875 37.4063,2073.875 Q38.1094,2073.875 38.75,2074.0313 Q39.4063,2074.1875 39.9688,2074.4844 L39.9688,2077.2031 Q39.3438,2076.625 38.75,2076.3594 Q38.1563,2076.0781 37.5313,2076.0781 Q36.1875,2076.0781 35.5,2077.1563 Q34.8125,2078.2188 34.8125,2080.3125 Q34.8125,2082.4063 35.5,2083.4844 Q36.1875,2084.5469 37.5313,2084.5469 Q38.1563,2084.5469 38.75,2084.2813 Q39.3438,2084 39.9688,2083.4219 L39.9688,2086.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="51" y="2084.6543">Break_Table</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="135" y="2061.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="136" y="2073.6387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="23" x2="285" y1="2096.5" y2="2096.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2105.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="42" y="2110.7104">table : Table_Str</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2118.207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="42" y="2123.5151">end_word_breaks_last_idx : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2131.0117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="42" y="2136.3198">start_word_breaks_last_idx : size_t</text><ellipse cx="33" cy="2146.8164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="42" y="2149.1245">StrT : using</text><ellipse cx="33" cy="2159.6211" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="42" y="2161.9292">Table_Str : using</text><ellipse cx="33" cy="2172.4258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="42" y="2174.7339">const_iterator : using</text><ellipse cx="33" cy="2185.2305" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="42" y="2187.5386">iterator : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="23" x2="285" y1="2194.1328" y2="2194.1328"/><ellipse cx="33" cy="2206.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="42" y="2208.3433">Break_Table()</text><ellipse cx="33" cy="2218.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="42" y="2221.1479">Break_Table(const Table_Str&amp; v)</text><ellipse cx="33" cy="2231.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="42" y="2233.9526">Break_Table(Table_Str&amp;&amp; v)</text><ellipse cx="33" cy="2244.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="42" y="2246.7573">end_word_breaks() : auto {query}</text><ellipse cx="33" cy="2257.2539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="42" y="2259.562">middle_word_breaks() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="30" y="2267.0586"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="42" y="2272.3667">order_entries() : auto</text><ellipse cx="33" cy="2282.8633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="42" y="2285.1714">start_word_breaks() : auto {query}</text><ellipse cx="33" cy="2295.668" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="42" y="2297.9761">operator=(const Table_Str&amp; v) : auto&amp;</text><ellipse cx="33" cy="2308.4727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="42" y="2310.7808">operator=(Table_Str&amp;&amp; v) : auto&amp;</text><ellipse cx="33" cy="2321.2773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="42" y="2323.5854">operator=(const Range&amp; range) : auto&amp;</text><!--class nuspell.Casing--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="48" id="nuspell.Casing" style="stroke: #A80036; stroke-width: 1.5;" width="74" x="4101" y="401.5"/><ellipse cx="4116" cy="417.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4118.9688,423.1406 Q4118.3906,423.4375 4117.75,423.5781 Q4117.1094,423.7344 4116.4063,423.7344 Q4113.9063,423.7344 4112.5781,422.0938 Q4111.2656,420.4375 4111.2656,417.3125 Q4111.2656,414.1875 4112.5781,412.5313 Q4113.9063,410.875 4116.4063,410.875 Q4117.1094,410.875 4117.75,411.0313 Q4118.4063,411.1875 4118.9688,411.4844 L4118.9688,414.2031 Q4118.3438,413.625 4117.75,413.3594 Q4117.1563,413.0781 4116.5313,413.0781 Q4115.1875,413.0781 4114.5,414.1563 Q4113.8125,415.2188 4113.8125,417.3125 Q4113.8125,419.4063 4114.5,420.4844 Q4115.1875,421.5469 4116.5313,421.5469 Q4117.1563,421.5469 4117.75,421.2813 Q4118.3438,421 4118.9688,420.4219 L4118.9688,423.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="42" x="4130" y="421.6543">Casing</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4102" x2="4174" y1="433.5" y2="433.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4102" x2="4174" y1="441.5" y2="441.5"/><!--class nuspell.Compound_Check_Pattern--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="124.8281" id="nuspell.Compound_Check_Pattern" style="stroke: #A80036; stroke-width: 1.5;" width="196" x="4210" y="363"/><ellipse cx="4225" cy="379" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4227.9688,384.6406 Q4227.3906,384.9375 4226.75,385.0781 Q4226.1094,385.2344 4225.4063,385.2344 Q4222.9063,385.2344 4221.5781,383.5938 Q4220.2656,381.9375 4220.2656,378.8125 Q4220.2656,375.6875 4221.5781,374.0313 Q4222.9063,372.375 4225.4063,372.375 Q4226.1094,372.375 4226.75,372.5313 Q4227.4063,372.6875 4227.9688,372.9844 L4227.9688,375.7031 Q4227.3438,375.125 4226.75,374.8594 Q4226.1563,374.5781 4225.5313,374.5781 Q4224.1875,374.5781 4223.5,375.6563 Q4222.8125,376.7188 4222.8125,378.8125 Q4222.8125,380.9063 4223.5,381.9844 Q4224.1875,383.0469 4225.5313,383.0469 Q4226.1563,383.0469 4226.75,382.7813 Q4227.3438,382.5 4227.9688,381.9219 L4227.9688,384.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="164" x="4239" y="383.1543">Compound_Check_Pattern</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4211" x2="4405" y1="395" y2="395"/><ellipse cx="4221" cy="406.9023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="4230" y="409.2104">first_word_flag : char16_t</text><ellipse cx="4221" cy="419.707" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="4230" y="422.0151">second_word_flag : char16_t</text><ellipse cx="4221" cy="432.5117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="4230" y="434.8198">first_word_end : string</text><ellipse cx="4221" cy="445.3164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="4230" y="447.6245">replacement : string</text><ellipse cx="4221" cy="458.1211" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="4230" y="460.4292">second_word_begin : string</text><ellipse cx="4221" cy="470.9258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="4230" y="473.2339">string : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4211" x2="4405" y1="479.8281" y2="479.8281"/><!--class nuspell.Compound_Pattern--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="124.8281" id="nuspell.Compound_Pattern" style="stroke: #A80036; stroke-width: 1.5;" width="308" x="321" y="2135"/><ellipse cx="336" cy="2151" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M338.9688,2156.6406 Q338.3906,2156.9375 337.75,2157.0781 Q337.1094,2157.2344 336.4063,2157.2344 Q333.9063,2157.2344 332.5781,2155.5938 Q331.2656,2153.9375 331.2656,2150.8125 Q331.2656,2147.6875 332.5781,2146.0313 Q333.9063,2144.375 336.4063,2144.375 Q337.1094,2144.375 337.75,2144.5313 Q338.4063,2144.6875 338.9688,2144.9844 L338.9688,2147.7031 Q338.3438,2147.125 337.75,2146.8594 Q337.1563,2146.5781 336.5313,2146.5781 Q335.1875,2146.5781 334.5,2147.6563 Q333.8125,2148.7188 333.8125,2150.8125 Q333.8125,2152.9063 334.5,2153.9844 Q335.1875,2155.0469 336.5313,2155.0469 Q337.1563,2155.0469 337.75,2154.7813 Q338.3438,2154.5 338.9688,2153.9219 L338.9688,2156.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="120" x="350" y="2155.1543">Compound_Pattern</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="478" y="2132"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="479" y="2144.1387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="322" x2="628" y1="2167" y2="2167"/><ellipse cx="332" cy="2178.9023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="341" y="2181.2104">replacement : StrT</text><ellipse cx="332" cy="2191.707" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="341" y="2194.0151">begin_end_chars : String_Pair&lt;CharT&gt;</text><ellipse cx="332" cy="2204.5117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="341" y="2206.8198">match_first_only_unaffixed_or_zero_affixed : bool</text><ellipse cx="332" cy="2217.3164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="341" y="2219.6245">first_word_flag : char16_t</text><ellipse cx="332" cy="2230.1211" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="341" y="2232.4292">second_word_flag : char16_t</text><ellipse cx="332" cy="2242.9258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="341" y="2245.2339">StrT : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="322" x2="628" y1="2251.8281" y2="2251.8281"/><!--class nuspell.Compound_Rule_Table--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="188.8516" id="nuspell.Compound_Rule_Table" style="stroke: #A80036; stroke-width: 1.5;" width="442" x="1018" y="1137"/><ellipse cx="1164.75" cy="1153" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1167.7188,1158.6406 Q1167.1406,1158.9375 1166.5,1159.0781 Q1165.8594,1159.2344 1165.1563,1159.2344 Q1162.6563,1159.2344 1161.3281,1157.5938 Q1160.0156,1155.9375 1160.0156,1152.8125 Q1160.0156,1149.6875 1161.3281,1148.0313 Q1162.6563,1146.375 1165.1563,1146.375 Q1165.8594,1146.375 1166.5,1146.5313 Q1167.1563,1146.6875 1167.7188,1146.9844 L1167.7188,1149.7031 Q1167.0938,1149.125 1166.5,1148.8594 Q1165.9063,1148.5781 1165.2813,1148.5781 Q1163.9375,1148.5781 1163.25,1149.6563 Q1162.5625,1150.7188 1162.5625,1152.8125 Q1162.5625,1154.9063 1163.25,1155.9844 Q1163.9375,1157.0469 1165.2813,1157.0469 Q1165.9063,1157.0469 1166.5,1156.7813 Q1167.0938,1156.5 1167.7188,1155.9219 L1167.7188,1158.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="140" x="1185.25" y="1157.1543">Compound_Rule_Table</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1019" x2="1459" y1="1169" y2="1169"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1026" y="1177.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="1038" y="1183.2104">all_flags : Flag_Set</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1026" y="1190.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="1038" y="1196.0151">rules : std::vector&lt;std::u16string&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1019" x2="1459" y1="1202.6094" y2="1202.6094"/><ellipse cx="1029" cy="1214.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="1038" y="1216.8198">Compound_Rule_Table()</text><ellipse cx="1029" cy="1227.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="358" x="1038" y="1229.6245">Compound_Rule_Table(const std::vector&lt;std::u16string&gt;&amp; tbl)</text><ellipse cx="1029" cy="1240.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="333" x="1038" y="1242.4292">Compound_Rule_Table(std::vector&lt;std::u16string&gt;&amp;&amp; tbl)</text><ellipse cx="1029" cy="1252.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="1038" y="1255.2339">empty() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1026" y="1262.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="1038" y="1268.0386">fill_all_flags() : auto</text><ellipse cx="1029" cy="1278.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="1038" y="1280.8433">has_any_of_flags(const Flag_Set&amp; f) : auto {query}</text><ellipse cx="1029" cy="1291.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="416" x="1038" y="1293.6479">match_any_rule(const std::vector&lt;const Flag_Set*&gt; data) : auto {query}</text><ellipse cx="1029" cy="1304.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="1038" y="1306.4526">operator=(const std::vector&lt;std::u16string&gt;&amp; tbl) : auto</text><ellipse cx="1029" cy="1316.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="1038" y="1319.2573">operator=(std::vector&lt;std::u16string&gt;&amp;&amp; tbl) : auto</text><!--class nuspell.Compounding_Result--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="86.4141" id="nuspell.Compounding_Result" style="stroke: #A80036; stroke-width: 1.5;" width="186" x="2919" y="1188.5"/><ellipse cx="2944.35" cy="1204.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2947.3188,1210.1406 Q2946.7406,1210.4375 2946.1,1210.5781 Q2945.4594,1210.7344 2944.7563,1210.7344 Q2942.2563,1210.7344 2940.9281,1209.0938 Q2939.6156,1207.4375 2939.6156,1204.3125 Q2939.6156,1201.1875 2940.9281,1199.5313 Q2942.2563,1197.875 2944.7563,1197.875 Q2945.4594,1197.875 2946.1,1198.0313 Q2946.7563,1198.1875 2947.3188,1198.4844 L2947.3188,1201.2031 Q2946.6938,1200.625 2946.1,1200.3594 Q2945.5063,1200.0781 2944.8813,1200.0781 Q2943.5375,1200.0781 2942.85,1201.1563 Q2942.1625,1202.2188 2942.1625,1204.3125 Q2942.1625,1206.4063 2942.85,1207.4844 Q2943.5375,1208.5469 2944.8813,1208.5469 Q2945.5063,1208.5469 2946.1,1208.2813 Q2946.6938,1208 2947.3188,1207.4219 L2947.3188,1210.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="131" x="2960.65" y="1208.6543">Compounding_Result</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2920" x2="3104" y1="1220.5" y2="1220.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2920" x2="3104" y1="1228.5" y2="1228.5"/><ellipse cx="2930" cy="1240.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="2939" y="1242.7104">const_pointer() {query}</text><ellipse cx="2930" cy="1253.207" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="2939" y="1255.5151">operator-&gt;() : auto {query}</text><ellipse cx="2930" cy="1266.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="2939" y="1268.3198">operator*() : auto&amp; {query}</text><!--class nuspell.Condition--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="214.4609" id="nuspell.Condition" style="stroke: #A80036; stroke-width: 1.5;" width="362" x="3140" y="1124.5"/><ellipse cx="3209.25" cy="1140.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3212.2188,1146.1406 Q3211.6406,1146.4375 3211,1146.5781 Q3210.3594,1146.7344 3209.6563,1146.7344 Q3207.1563,1146.7344 3205.8281,1145.0938 Q3204.5156,1143.4375 3204.5156,1140.3125 Q3204.5156,1137.1875 3205.8281,1135.5313 Q3207.1563,1133.875 3209.6563,1133.875 Q3210.3594,1133.875 3211,1134.0313 Q3211.6563,1134.1875 3212.2188,1134.4844 L3212.2188,1137.2031 Q3211.5938,1136.625 3211,1136.3594 Q3210.4063,1136.0781 3209.7813,1136.0781 Q3208.4375,1136.0781 3207.75,1137.1563 Q3207.0625,1138.2188 3207.0625,1140.3125 Q3207.0625,1142.4063 3207.75,1143.4844 Q3208.4375,1144.5469 3209.7813,1144.5469 Q3210.4063,1144.5469 3211,1144.2813 Q3211.5938,1144 3212.2188,1143.4219 L3212.2188,1146.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="3229.75" y="1144.6543">Condition</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="3351" y="1121.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="3352" y="1133.6387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3141" x2="3501" y1="1156.5" y2="1156.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3148" y="1165.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="3160" y="1170.7104">cond : StrT</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3148" y="1178.207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="3160" y="1183.5151">length : size_t</text><ellipse cx="3151" cy="1194.0117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="3160" y="1196.3198">StrT : using</text><ellipse cx="3151" cy="1206.8164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3160" y="1209.1245">tuple : using</text><ellipse cx="3151" cy="1219.6211" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="3160" y="1221.9292">vector : using</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3148" y="1229.4258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="292" x="3160" y="1234.7339">spans : vector&lt;tuple&lt;size_t, size_t, Span_Type&gt; &gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3141" x2="3501" y1="1241.3281" y2="1241.3281"/><ellipse cx="3151" cy="1253.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="61" x="3160" y="1255.5386">Condition()</text><ellipse cx="3151" cy="1266.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="3160" y="1268.3433">Condition(const StrT&amp; condition)</text><ellipse cx="3151" cy="1278.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="3160" y="1281.1479">Condition(StrT&amp;&amp; condition)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3148" y="1288.6445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="3160" y="1293.9526">construct() : auto</text><ellipse cx="3151" cy="1304.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="336" x="3160" y="1306.7573">match(const StrT&amp; s, size_t pos, size_t len) : auto {query}</text><ellipse cx="3151" cy="1317.2539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="248" x="3160" y="1319.562">match_prefix(const StrT&amp; s) : auto {query}</text><ellipse cx="3151" cy="1330.0586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="3160" y="1332.3667">match_suffix(const StrT&amp; s) : auto {query}</text><!--class nuspell.Dict_Base--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="726.6484" id="nuspell.Dict_Base" style="stroke: #A80036; stroke-width: 1.5;" width="1017" x="1495.5" y="868"/><ellipse cx="1969.25" cy="884" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1972.2188,889.6406 Q1971.6406,889.9375 1971,890.0781 Q1970.3594,890.2344 1969.6563,890.2344 Q1967.1563,890.2344 1965.8281,888.5938 Q1964.5156,886.9375 1964.5156,883.8125 Q1964.5156,880.6875 1965.8281,879.0313 Q1967.1563,877.375 1969.6563,877.375 Q1970.3594,877.375 1971,877.5313 Q1971.6563,877.6875 1972.2188,877.9844 L1972.2188,880.7031 Q1971.5938,880.125 1971,879.8594 Q1970.4063,879.5781 1969.7813,879.5781 Q1968.4375,879.5781 1967.75,880.6563 Q1967.0625,881.7188 1967.0625,883.8125 Q1967.0625,885.9063 1967.75,886.9844 Q1968.4375,888.0469 1969.7813,888.0469 Q1970.4063,888.0469 1971,887.7813 Q1971.5938,887.5 1972.2188,886.9219 L1972.2188,889.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="1989.75" y="888.1543">Dict_Base</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1496.5" x2="2511.5" y1="900" y2="900"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1496.5" x2="2511.5" y1="908" y2="908"/><ellipse cx="1506.5" cy="919.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="1515.5" y="922.2104">Dict_Base()</text><ellipse cx="1506.5" cy="932.707" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="470" x="1515.5" y="935.0151">add_sug_if_correct(std::basic_string&lt;CharT&gt;&amp; word, OutIter&amp; out) : auto {query}</text><ellipse cx="1506.5" cy="945.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="321" x="1515.5" y="947.8198">affix_NOT_valid(const Prefix&lt;CharT&gt;&amp; a) : auto {query}</text><ellipse cx="1506.5" cy="958.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="321" x="1515.5" y="960.6245">affix_NOT_valid(const Suffix&lt;CharT&gt;&amp; a) : auto {query}</text><ellipse cx="1506.5" cy="971.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="457" x="1515.5" y="973.4292">bad_char_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1506.5" cy="983.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="381" x="1515.5" y="986.2339">check_compound(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1506.5" cy="996.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="769" x="1515.5" y="999.0386">check_compound(std::basic_string&lt;CharT&gt;&amp; word, size_t start_pos, size_t num_part, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1506.5" cy="1009.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="861" x="1515.5" y="1011.8433">check_compound_classic(std::basic_string&lt;CharT&gt;&amp; word, size_t start_pos, size_t i, size_t num_part, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1506.5" cy="1022.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="976" x="1515.5" y="1024.6479">check_compound_with_pattern_replacements(std::basic_string&lt;CharT&gt;&amp; word, size_t start_pos, size_t i, size_t num_part, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1506.5" cy="1035.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="991" x="1515.5" y="1037.4526">check_compound_with_rules(std::basic_string&lt;CharT&gt;&amp; word, std::vector&lt;const Flag_Set*&gt;&amp; words_data, size_t start_pos, std::basic_string&lt;CharT&gt;&amp; part) : auto {query}</text><ellipse cx="1506.5" cy="1047.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="329" x="1515.5" y="1050.2573">check_word(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1060.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="410" x="1515.5" y="1063.062">check_word_in_compound(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1073.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="465" x="1515.5" y="1075.8667">extra_char_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1506.5" cy="1086.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="488" x="1515.5" y="1088.6714">forgotten_char_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1506.5" cy="1099.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="1515.5" y="1101.4761">is_circumfix(const AffixT&amp; a) : auto {query}</text><ellipse cx="1506.5" cy="1111.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="367" x="1515.5" y="1114.2808">is_valid_inside_compound(const Flag_Set&amp; flags) : auto {query}</text><ellipse cx="1506.5" cy="1124.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="457" x="1515.5" y="1127.0854">keyboard_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1506.5" cy="1137.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="477" x="1515.5" y="1139.8901">map_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out, size_t i) : auto {query}</text><ellipse cx="1506.5" cy="1150.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="1515.5" y="1152.6948">outer_affix_NOT_valid(const AffixT&amp; a) : auto {query}</text><ellipse cx="1506.5" cy="1163.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="424" x="1515.5" y="1165.4995">rep_suggest(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1506.5" cy="1175.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="404" x="1515.5" y="1178.3042">spell_break(std::basic_string&lt;CharT&gt;&amp; s, size_t depth) : auto {query}</text><ellipse cx="1506.5" cy="1188.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="333" x="1515.5" y="1191.1089">spell_casing(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1201.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="360" x="1515.5" y="1203.9136">spell_casing_title(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1214.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="372" x="1515.5" y="1216.7183">spell_casing_upper(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1227.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="352" x="1515.5" y="1229.5229">spell_priv(const std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1240.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="1515.5" y="1242.3276">spell_priv(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1252.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="549" x="1515.5" y="1255.1323">spell_sharps(std::basic_string&lt;CharT&gt;&amp; base, size_t n_pos, size_t n, size_t rep) : auto {query}</text><ellipse cx="1506.5" cy="1265.6289" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="706" x="1515.5" y="1267.937">strip_2_pfx_sfx_3(const Prefix&lt;CharT&gt;&amp; pe1, const Prefix&lt;CharT&gt;&amp; pe2, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1506.5" cy="1278.4336" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="443" x="1515.5" y="1280.7417">strip_2_prefixes_then_suffix(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1506.5" cy="1291.2383" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="706" x="1515.5" y="1293.5464">strip_2_sfx_pfx_3(const Suffix&lt;CharT&gt;&amp; se1, const Suffix&lt;CharT&gt;&amp; se2, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1506.5" cy="1304.043" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="422" x="1515.5" y="1306.3511">strip_2_suffixes_then_prefix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1316.8477" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="686" x="1515.5" y="1319.1558">strip_p_s_p_3(const Prefix&lt;CharT&gt;&amp; pe1, const Suffix&lt;CharT&gt;&amp; se1, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1506.5" cy="1329.6523" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="685" x="1515.5" y="1331.9604">strip_pfx_2_sfx_3(const Prefix&lt;CharT&gt;&amp; pe1, const Suffix&lt;CharT&gt;&amp; se1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1342.457" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="541" x="1515.5" y="1344.7651">strip_pfx_then_pfx_2(const Prefix&lt;CharT&gt;&amp; pe1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1355.2617" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="534" x="1515.5" y="1357.5698">strip_pfx_then_sfx_2(const Prefix&lt;CharT&gt;&amp; pe, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1368.0664" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="596" x="1515.5" y="1370.3745">strip_pfx_then_sfx_comm_2(const Prefix&lt;CharT&gt;&amp; pe, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1506.5" cy="1380.8711" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="356" x="1515.5" y="1383.1792">strip_prefix_only(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1393.6758" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="423" x="1515.5" y="1395.9839">strip_prefix_suffix_prefix(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1506.5" cy="1406.4805" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="422" x="1515.5" y="1408.7886">strip_prefix_then_2_suffixes(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1419.2852" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="396" x="1515.5" y="1421.5933">strip_prefix_then_prefix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1432.0898" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="395" x="1515.5" y="1434.3979">strip_prefix_then_suffix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1444.8945" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="495" x="1515.5" y="1447.2026">strip_prefix_then_suffix_commutative(std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1506.5" cy="1457.6992" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="686" x="1515.5" y="1460.0073">strip_s_p_s_3(const Suffix&lt;CharT&gt;&amp; se1, const Prefix&lt;CharT&gt;&amp; pe1, std::basic_string&lt;CharT&gt;&amp; word) : auto {query}</text><ellipse cx="1506.5" cy="1470.5039" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="685" x="1515.5" y="1472.812">strip_sfx_2_pfx_3(const Suffix&lt;CharT&gt;&amp; se1, const Prefix&lt;CharT&gt;&amp; pe1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1483.3086" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="534" x="1515.5" y="1485.6167">strip_sfx_then_pfx_2(const Suffix&lt;CharT&gt;&amp; se, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1496.1133" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="541" x="1515.5" y="1498.4214">strip_sfx_then_sfx_2(const Suffix&lt;CharT&gt;&amp; se1, std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1508.918" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="1515.5" y="1511.2261">strip_suffix_only(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1521.7227" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="1515.5" y="1524.0308">strip_suffix_prefix_suffix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1534.5273" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="422" x="1515.5" y="1536.8354">strip_suffix_then_2_prefixes(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1547.332" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="395" x="1515.5" y="1549.6401">strip_suffix_then_prefix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1560.1367" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="394" x="1515.5" y="1562.4448">strip_suffix_then_suffix(std::basic_string&lt;CharT&gt;&amp; s) : auto {query}</text><ellipse cx="1506.5" cy="1572.9414" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="426" x="1515.5" y="1575.2495">suggest_priv(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><ellipse cx="1506.5" cy="1585.7461" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="462" x="1515.5" y="1588.0542">try_rep_suggestion(std::basic_string&lt;CharT&gt;&amp; word, OutIter out) : auto {query}</text><!--class nuspell.Encoding--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="240.0703" id="nuspell.Encoding" style="stroke: #A80036; stroke-width: 1.5;" width="254" x="3537" y="1111.5"/><ellipse cx="3630.75" cy="1127.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3633.7188,1133.1406 Q3633.1406,1133.4375 3632.5,1133.5781 Q3631.8594,1133.7344 3631.1563,1133.7344 Q3628.6563,1133.7344 3627.3281,1132.0938 Q3626.0156,1130.4375 3626.0156,1127.3125 Q3626.0156,1124.1875 3627.3281,1122.5313 Q3628.6563,1120.875 3631.1563,1120.875 Q3631.8594,1120.875 3632.5,1121.0313 Q3633.1563,1121.1875 3633.7188,1121.4844 L3633.7188,1124.2031 Q3633.0938,1123.625 3632.5,1123.3594 Q3631.9063,1123.0781 3631.2813,1123.0781 Q3629.9375,1123.0781 3629.25,1124.1563 Q3628.5625,1125.2188 3628.5625,1127.3125 Q3628.5625,1129.4063 3629.25,1130.4844 Q3629.9375,1131.5469 3631.2813,1131.5469 Q3631.9063,1131.5469 3632.5,1131.2813 Q3633.0938,1131 3633.7188,1130.4219 L3633.7188,1133.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="3651.25" y="1131.6543">Encoding</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3538" x2="3790" y1="1143.5" y2="1143.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3545" y="1152.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3557" y="1157.7104">name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3538" x2="3790" y1="1164.3047" y2="1164.3047"/><ellipse cx="3548" cy="1176.207" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="3557" y="1178.5151">Encoding()</text><ellipse cx="3548" cy="1189.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="3557" y="1191.3198">Encoding(const std::string&amp; e)</text><ellipse cx="3548" cy="1201.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="3557" y="1204.1245">Encoding(std::string&amp;&amp; e)</text><ellipse cx="3548" cy="1214.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="3557" y="1216.9292">Encoding(const char* e)</text><ellipse cx="3548" cy="1227.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="3557" y="1229.7339">operatorEnc_Type() {query}</text><ellipse cx="3548" cy="1240.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="3557" y="1242.5386">string&amp;() {query}</text><ellipse cx="3548" cy="1253.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="3557" y="1255.3433">empty() : auto {query}</text><ellipse cx="3548" cy="1265.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="3557" y="1268.1479">is_utf8() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3545" y="1275.6445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="3557" y="1280.9526">normalize_name() : auto</text><ellipse cx="3548" cy="1291.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="3557" y="1293.7573">value_or_default() : auto</text><ellipse cx="3548" cy="1304.2539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="3557" y="1306.562">operator=(const std::string&amp; e) : auto&amp;</text><ellipse cx="3548" cy="1317.0586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="3557" y="1319.3667">operator=(std::string&amp;&amp; e) : auto&amp;</text><ellipse cx="3548" cy="1329.8633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3557" y="1332.1714">operator=(const char* e) : auto&amp;</text><ellipse cx="3548" cy="1342.668" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="3557" y="1344.9761">value() : auto&amp; {query}</text><!--class nuspell.Encoding_Details--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="48" id="nuspell.Encoding_Details" style="stroke: #A80036; stroke-width: 1.5;" width="139" x="1934.5" y="2877"/><ellipse cx="1949.5" cy="2893" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1952.4688,2898.6406 Q1951.8906,2898.9375 1951.25,2899.0781 Q1950.6094,2899.2344 1949.9063,2899.2344 Q1947.4063,2899.2344 1946.0781,2897.5938 Q1944.7656,2895.9375 1944.7656,2892.8125 Q1944.7656,2889.6875 1946.0781,2888.0313 Q1947.4063,2886.375 1949.9063,2886.375 Q1950.6094,2886.375 1951.25,2886.5313 Q1951.9063,2886.6875 1952.4688,2886.9844 L1952.4688,2889.7031 Q1951.8438,2889.125 1951.25,2888.8594 Q1950.6563,2888.5781 1950.0313,2888.5781 Q1948.6875,2888.5781 1948,2889.6563 Q1947.3125,2890.7188 1947.3125,2892.8125 Q1947.3125,2894.9063 1948,2895.9844 Q1948.6875,2897.0469 1950.0313,2897.0469 Q1950.6563,2897.0469 1951.25,2896.7813 Q1951.8438,2896.5 1952.4688,2895.9219 L1952.4688,2898.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="107" x="1963.5" y="2897.1543">Encoding_Details</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1935.5" x2="2072.5" y1="2909" y2="2909"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1935.5" x2="2072.5" y1="2917" y2="2917"/><!--class nuspell.Finder--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="265.6797" id="nuspell.Finder" style="stroke: #A80036; stroke-width: 1.5;" width="328" x="3826" y="1098.5"/><ellipse cx="3966.25" cy="1114.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3969.2188,1120.1406 Q3968.6406,1120.4375 3968,1120.5781 Q3967.3594,1120.7344 3966.6563,1120.7344 Q3964.1563,1120.7344 3962.8281,1119.0938 Q3961.5156,1117.4375 3961.5156,1114.3125 Q3961.5156,1111.1875 3962.8281,1109.5313 Q3964.1563,1107.875 3966.6563,1107.875 Q3967.3594,1107.875 3968,1108.0313 Q3968.6563,1108.1875 3969.2188,1108.4844 L3969.2188,1111.2031 Q3968.5938,1110.625 3968,1110.3594 Q3967.4063,1110.0781 3966.7813,1110.0781 Q3965.4375,1110.0781 3964.75,1111.1563 Q3964.0625,1112.2188 3964.0625,1114.3125 Q3964.0625,1116.4063 3964.75,1117.4844 Q3965.4375,1118.5469 3966.7813,1118.5469 Q3967.4063,1118.5469 3968,1118.2813 Q3968.5938,1118 3969.2188,1117.4219 L3969.2188,1120.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="39" x="3986.75" y="1118.6543">Finder</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3827" x2="4153" y1="1130.5" y2="1130.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3834" y="1139.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="3846" y="1144.7104">dictionaries : Dict_List</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3834" y="1152.207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="3846" y="1157.5151">paths : std::vector&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3834" y="1165.0117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="3846" y="1170.3198">Dict_List : using</text><ellipse cx="3837" cy="1180.8164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="3846" y="1183.1245">const_iterator : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3827" x2="4153" y1="1189.7188" y2="1189.7188"/><ellipse cx="3837" cy="1201.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="3846" y="1203.9292">add_apacheopenoffice_paths() : auto</text><ellipse cx="3837" cy="1214.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="3846" y="1216.7339">add_default_paths() : auto</text><ellipse cx="3837" cy="1227.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="3846" y="1229.5386">add_libreoffice_paths() : auto</text><ellipse cx="3837" cy="1240.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="3846" y="1242.3433">add_mozilla_paths() : auto</text><ellipse cx="3837" cy="1252.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3846" y="1255.1479">begin() : auto {query}</text><ellipse cx="3837" cy="1265.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="3846" y="1267.9526">end() : auto {query}</text><ellipse cx="3837" cy="1278.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="3846" y="1280.7573">equal_range(const std::string&amp; dict) : auto {query}</text><ellipse cx="3837" cy="1291.2539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="3846" y="1293.562">find(const std::string&amp; dict) : auto {query}</text><ellipse cx="3837" cy="1304.0586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="3846" y="1306.3667">get_dictionary(const std::string&amp; dict) : auto {query}</text><ellipse cx="3837" cy="1316.8633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="3846" y="1319.1714">search_dictionaries() : auto</text><ellipse cx="3837" cy="1329.668" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="229" x="3846" y="1331.9761">search_dictionaries_in_all_paths() : auto</text><line style="stroke: #000000; stroke-width: 1.0;" x1="3846" x2="4075" y1="1333.9761" y2="1333.9761"/><ellipse cx="3837" cy="1342.4727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="3846" y="1344.7808">get_all_dictionaries() : auto&amp; {query}</text><ellipse cx="3837" cy="1355.2773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="3846" y="1357.5854">get_all_paths() : auto&amp; {query}</text><!--class nuspell.Hash_Multiset--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="368.1172" id="nuspell.Hash_Multiset" style="stroke: #A80036; stroke-width: 1.5;" width="1000" x="4189" y="1047.5"/><ellipse cx="4204" cy="1063.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4206.9688,1069.1406 Q4206.3906,1069.4375 4205.75,1069.5781 Q4205.1094,1069.7344 4204.4063,1069.7344 Q4201.9063,1069.7344 4200.5781,1068.0938 Q4199.2656,1066.4375 4199.2656,1063.3125 Q4199.2656,1060.1875 4200.5781,1058.5313 Q4201.9063,1056.875 4204.4063,1056.875 Q4205.1094,1056.875 4205.75,1057.0313 Q4206.4063,1057.1875 4206.9688,1057.4844 L4206.9688,1060.2031 Q4206.3438,1059.625 4205.75,1059.3594 Q4205.1563,1059.0781 4204.5313,1059.0781 Q4203.1875,1059.0781 4202.5,1060.1563 Q4201.8125,1061.2188 4201.8125,1063.3125 Q4201.8125,1065.4063 4202.5,1066.4844 Q4203.1875,1067.5469 4204.5313,1067.5469 Q4205.1563,1067.5469 4205.75,1067.2813 Q4206.3438,1067 4206.9688,1066.4219 L4206.9688,1069.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="87" x="4218" y="1067.6543">Hash_Multiset</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="879" x="4313" y="1044.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="877" x="4314" y="1056.6387">template &lt;class Value, class Key = Value, class KeyExtract = identity, class Hash = std::hash&lt;Key&gt;, class KeyEqual = std::equal_to&lt;Key&gt;&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4190" x2="5188" y1="1079.5" y2="1079.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4197" y="1088.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="4209" y="1093.7104">max_load_factor_capacity : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4197" y="1101.207"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="4209" y="1106.5151">sz : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4197" y="1114.0117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="213" x="4209" y="1119.3198">max_load_fact : static constexpr float</text><line style="stroke: #000000; stroke-width: 1.0;" x1="4209" x2="4422" y1="1121.3198" y2="1121.3198"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4197" y="1126.8164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="4209" y="1132.1245">data : std::vector&lt;bucket_type&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4197" y="1139.6211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="4209" y="1144.9292">bucket_type : using</text><ellipse cx="4200" cy="1155.4258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="4209" y="1157.7339">const_pointer : using</text><ellipse cx="4200" cy="1168.2305" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="4209" y="1170.5386">const_reference : using</text><ellipse cx="4200" cy="1181.0352" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="4209" y="1183.3433">difference_type : using</text><ellipse cx="4200" cy="1193.8398" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="4209" y="1196.1479">hasher : using</text><ellipse cx="4200" cy="1206.6445" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="4209" y="1208.9526">key_type : using</text><ellipse cx="4200" cy="1219.4492" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="4209" y="1221.7573">local_const_iterator : using</text><ellipse cx="4200" cy="1232.2539" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="4209" y="1234.562">local_iterator : using</text><ellipse cx="4200" cy="1245.0586" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="4209" y="1247.3667">pointer : using</text><ellipse cx="4200" cy="1257.8633" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="4209" y="1260.1714">reference : using</text><ellipse cx="4200" cy="1270.668" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="4209" y="1272.9761">size_type : using</text><ellipse cx="4200" cy="1283.4727" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="4209" y="1285.7808">value_type : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4190" x2="5188" y1="1292.375" y2="1292.375"/><ellipse cx="4200" cy="1304.2773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="4209" y="1306.5854">Hash_Multiset()</text><ellipse cx="4200" cy="1317.082" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="4209" y="1319.3901">emplace(Args&amp;&amp; a) : auto</text><ellipse cx="4200" cy="1329.8867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="4209" y="1332.1948">empty() : auto {query}</text><ellipse cx="4200" cy="1342.6914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="317" x="4209" y="1344.9995">equal_range(const CompatibleKey&amp; key) : auto {query}</text><ellipse cx="4200" cy="1355.4961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="4209" y="1357.8042">equal_range_nonconst_unsafe(const CompatibleKey&amp; key) : auto</text><ellipse cx="4200" cy="1368.3008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="4209" y="1370.6089">insert(const_reference value) : auto</text><ellipse cx="4200" cy="1381.1055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="4209" y="1383.4136">rehash(size_t count) : auto</text><ellipse cx="4200" cy="1393.9102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="4209" y="1396.2183">reserve(size_t count) : auto</text><ellipse cx="4200" cy="1406.7148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="4209" y="1409.0229">size() : auto {query}</text><!--class nuspell.List_Strings--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="1085.1797" id="nuspell.List_Strings" style="stroke: #A80036; stroke-width: 1.5;" width="416" x="2386" y="1655"/><ellipse cx="2476.25" cy="1671" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2479.2188,1676.6406 Q2478.6406,1676.9375 2478,1677.0781 Q2477.3594,1677.2344 2476.6563,1677.2344 Q2474.1563,1677.2344 2472.8281,1675.5938 Q2471.5156,1673.9375 2471.5156,1670.8125 Q2471.5156,1667.6875 2472.8281,1666.0313 Q2474.1563,1664.375 2476.6563,1664.375 Q2477.3594,1664.375 2478,1664.5313 Q2478.6563,1664.6875 2479.2188,1664.9844 L2479.2188,1667.7031 Q2478.5938,1667.125 2478,1666.8594 Q2477.4063,1666.5781 2476.7813,1666.5781 Q2475.4375,1666.5781 2474.75,1667.6563 Q2474.0625,1668.7188 2474.0625,1670.8125 Q2474.0625,1672.9063 2474.75,1673.9844 Q2475.4375,1675.0469 2476.7813,1675.0469 Q2477.4063,1675.0469 2478,1674.7813 Q2478.5938,1674.5 2479.2188,1673.9219 L2479.2188,1676.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="71" x="2496.75" y="1675.1543">List_Strings</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="2651" y="1652"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="2652" y="1664.1387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2387" x2="2801" y1="1687" y2="1687"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2394" y="1695.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="46" x="2406" y="1701.2104">d : VecT</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2394" y="1708.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="2406" y="1714.0151">sz : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2394" y="1721.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="2406" y="1726.8198">VecT : using</text><ellipse cx="2397" cy="1737.3164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="2406" y="1739.6245">allocator_type : using</text><ellipse cx="2397" cy="1750.1211" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="2406" y="1752.4292">const_iterator : using</text><ellipse cx="2397" cy="1762.9258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="2406" y="1765.2339">const_pointer : using</text><ellipse cx="2397" cy="1775.7305" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="2406" y="1778.0386">const_reference : using</text><ellipse cx="2397" cy="1788.5352" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="2406" y="1790.8433">const_reverse_iterator : using</text><ellipse cx="2397" cy="1801.3398" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="2406" y="1803.6479">difference_type : using</text><ellipse cx="2397" cy="1814.1445" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="2406" y="1816.4526">iterator : using</text><ellipse cx="2397" cy="1826.9492" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="2406" y="1829.2573">pointer : using</text><ellipse cx="2397" cy="1839.7539" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="2406" y="1842.062">reference : using</text><ellipse cx="2397" cy="1852.5586" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="2406" y="1854.8667">reverse_iterator : using</text><ellipse cx="2397" cy="1865.3633" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="2406" y="1867.6714">size_type : using</text><ellipse cx="2397" cy="1878.168" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2406" y="1880.4761">value_type : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2387" x2="2801" y1="1887.0703" y2="1887.0703"/><ellipse cx="2397" cy="1898.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="2406" y="1901.2808">List_Strings()</text><ellipse cx="2397" cy="1911.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="2406" y="1914.0854">List_Strings(size_type n)</text><ellipse cx="2397" cy="1924.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="2406" y="1926.8901">List_Strings(size_type n, const_reference value)</text><ellipse cx="2397" cy="1937.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="2406" y="1939.6948">List_Strings(InputIterator first, InputIterator last)</text><ellipse cx="2397" cy="1950.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="2406" y="1952.4995">List_Strings(std::initializer_list&lt;value_type&gt; il)</text><ellipse cx="2397" cy="1962.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="2406" y="1965.3042">List_Strings(const List_Strings&amp; other)</text><ellipse cx="2397" cy="1975.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="2406" y="1978.1089">List_Strings(List_Strings&amp;&amp; other)</text><ellipse cx="2397" cy="1988.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="2406" y="1990.9136">assign(InputIterator first, InputIterator last) : auto</text><ellipse cx="2397" cy="2001.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="2406" y="2003.7183">begin() : auto</text><ellipse cx="2397" cy="2014.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2406" y="2016.5229">begin() : auto {query}</text><ellipse cx="2397" cy="2027.0195" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="2406" y="2029.3276">capacity() : auto {query}</text><ellipse cx="2397" cy="2039.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="2406" y="2042.1323">cbegin() : auto {query}</text><ellipse cx="2397" cy="2052.6289" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="2406" y="2054.937">cend() : auto {query}</text><ellipse cx="2397" cy="2065.4336" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="2406" y="2067.7417">clear() : auto</text><ellipse cx="2397" cy="2078.2383" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="2406" y="2080.5464">crbegin() : auto {query}</text><ellipse cx="2397" cy="2091.043" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="2406" y="2093.3511">crend() : auto {query}</text><ellipse cx="2397" cy="2103.8477" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="2406" y="2106.1558">data() : auto</text><ellipse cx="2397" cy="2116.6523" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="2406" y="2118.9604">data() : auto {query}</text><ellipse cx="2397" cy="2129.457" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="2406" y="2131.7651">emplace(const_iterator pos, Args&amp;&amp; args) : auto</text><ellipse cx="2397" cy="2142.2617" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="2406" y="2144.5698">empty() : auto {query}</text><ellipse cx="2397" cy="2155.0664" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="2406" y="2157.3745">end() : auto</text><ellipse cx="2397" cy="2167.8711" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="2406" y="2170.1792">end() : auto {query}</text><ellipse cx="2397" cy="2180.6758" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="2406" y="2182.9839">erase(const_iterator position) : auto</text><ellipse cx="2397" cy="2193.4805" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="2406" y="2195.7886">erase(const_iterator first, const_iterator last) : auto</text><ellipse cx="2397" cy="2206.2852" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="2406" y="2208.5933">get_allocator() : auto {query}</text><ellipse cx="2397" cy="2219.0898" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="292" x="2406" y="2221.3979">insert(const_iterator pos, const_reference x) : auto</text><ellipse cx="2397" cy="2231.8945" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="2406" y="2234.2026">insert(const_iterator pos, value_type&amp;&amp; x) : auto</text><ellipse cx="2397" cy="2244.6992" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="2406" y="2247.0073">insert(const_iterator pos, size_type n, const_reference x) : auto</text><ellipse cx="2397" cy="2257.5039" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="2406" y="2259.812">insert(const_iterator pos, InputIterator first, InputIterator last) : auto</text><ellipse cx="2397" cy="2270.3086" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="377" x="2406" y="2272.6167">insert(const_iterator pos, std::initializer_list&lt;value_type&gt; il) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2394" y="2280.1133"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="2406" y="2285.4214">insert_priv(const_iterator pos, U&amp;&amp; val) : auto</text><ellipse cx="2397" cy="2295.918" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="2406" y="2298.2261">max_size() : auto {query}</text><ellipse cx="2397" cy="2308.7227" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="2406" y="2311.0308">operator!=(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2397" cy="2321.5273" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="2406" y="2323.8354">operator&lt;(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2397" cy="2334.332" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="2406" y="2336.6401">operator&lt;=(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2397" cy="2347.1367" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="2406" y="2349.4448">operator==(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2397" cy="2359.9414" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="2406" y="2362.2495">operator&gt;(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2397" cy="2372.7461" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="2406" y="2375.0542">operator&gt;=(const List_Strings&amp; other) : auto {query}</text><ellipse cx="2397" cy="2385.5508" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="2406" y="2387.8589">pop_back() : auto</text><ellipse cx="2397" cy="2398.3555" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="2406" y="2400.6636">push_back(const_reference x) : auto</text><ellipse cx="2397" cy="2411.1602" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="2406" y="2413.4683">push_back(value_type&amp;&amp; x) : auto</text><ellipse cx="2397" cy="2423.9648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2406" y="2426.2729">rbegin() : auto</text><ellipse cx="2397" cy="2436.7695" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="2406" y="2439.0776">rbegin() : auto {query}</text><ellipse cx="2397" cy="2449.5742" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2406" y="2451.8823">rend() : auto</text><ellipse cx="2397" cy="2462.3789" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="2406" y="2464.687">rend() : auto {query}</text><ellipse cx="2397" cy="2475.1836" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="2406" y="2477.4917">resize(size_type new_sz) : auto</text><ellipse cx="2397" cy="2487.9883" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="2406" y="2490.2964">resize(size_type new_sz, const_reference c) : auto</text><ellipse cx="2397" cy="2500.793" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="2406" y="2503.1011">size() : auto {query}</text><ellipse cx="2397" cy="2513.5977" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="2406" y="2515.9058">swap(List_Strings&amp; other) : auto</text><ellipse cx="2397" cy="2526.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="2406" y="2528.7104">at(size_type n) : auto&amp;</text><ellipse cx="2397" cy="2539.207" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="2406" y="2541.5151">at(size_type n) : auto&amp; {query}</text><ellipse cx="2397" cy="2552.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2406" y="2554.3198">back() : auto&amp;</text><ellipse cx="2397" cy="2564.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="2406" y="2567.1245">back() : auto&amp; {query}</text><ellipse cx="2397" cy="2577.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="2406" y="2579.9292">emplace_back(Args&amp;&amp; args) : auto&amp;</text><ellipse cx="2397" cy="2590.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="2406" y="2592.7339">emplace_back() : auto&amp;</text><ellipse cx="2397" cy="2603.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="2406" y="2605.5386">front() : auto&amp;</text><ellipse cx="2397" cy="2616.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="2406" y="2618.3433">front() : auto&amp; {query}</text><ellipse cx="2397" cy="2628.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="2406" y="2631.1479">operator=(const List_Strings&amp; other) : auto&amp;</text><ellipse cx="2397" cy="2641.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="2406" y="2643.9526">operator=(List_Strings&amp;&amp; other) : auto&amp;</text><ellipse cx="2397" cy="2654.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="2406" y="2656.7573">operator=(std::initializer_list&lt;value_type&gt; il) : auto&amp;</text><ellipse cx="2397" cy="2667.2539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="2406" y="2669.562">operator[](size_type n) : auto&amp;</text><ellipse cx="2397" cy="2680.0586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="2406" y="2682.3667">operator[](size_type n) : auto&amp; {query}</text><ellipse cx="2397" cy="2692.8633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="2406" y="2695.1714">assign(size_type n, const_reference value) : void</text><ellipse cx="2397" cy="2705.668" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="2406" y="2707.9761">assign(std::initializer_list&lt;value_type&gt; il) : void</text><ellipse cx="2397" cy="2718.4727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="2406" y="2720.7808">reserve(size_type n) : void</text><ellipse cx="2397" cy="2731.2773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="2406" y="2733.5854">shrink_to_fit() : void</text><!--class nuspell.Prefix--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="240.0703" id="nuspell.Prefix" style="stroke: #A80036; stroke-width: 1.5;" width="782" x="2837" y="2077.5"/><ellipse cx="3128.75" cy="2093.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3131.7188,2099.1406 Q3131.1406,2099.4375 3130.5,2099.5781 Q3129.8594,2099.7344 3129.1563,2099.7344 Q3126.6563,2099.7344 3125.3281,2098.0938 Q3124.0156,2096.4375 3124.0156,2093.3125 Q3124.0156,2090.1875 3125.3281,2088.5313 Q3126.6563,2086.875 3129.1563,2086.875 Q3129.8594,2086.875 3130.5,2087.0313 Q3131.1563,2087.1875 3131.7188,2087.4844 L3131.7188,2090.2031 Q3131.0938,2089.625 3130.5,2089.3594 Q3129.9063,2089.0781 3129.2813,2089.0781 Q3127.9375,2089.0781 3127.25,2090.1563 Q3126.5625,2091.2188 3126.5625,2093.3125 Q3126.5625,2095.4063 3127.25,2096.4844 Q3127.9375,2097.5469 3129.2813,2097.5469 Q3129.9063,2097.5469 3130.5,2097.2813 Q3131.0938,2097 3131.7188,2096.4219 L3131.7188,2099.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="34" x="3149.25" y="2097.6543">Prefix</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="3468" y="2074.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="3469" y="2086.6387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2838" x2="3618" y1="2109.5" y2="2109.5"/><ellipse cx="2848" cy="2121.4023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2857" y="2123.7104">condition : CondT</text><ellipse cx="2848" cy="2134.207" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2857" y="2136.5151">cont_flags : Flag_Set</text><ellipse cx="2848" cy="2147.0117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="2857" y="2149.3198">appending : StrT</text><ellipse cx="2848" cy="2159.8164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2857" y="2162.1245">stripping : StrT</text><ellipse cx="2848" cy="2172.6211" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="2857" y="2174.9292">cross_product : bool</text><ellipse cx="2848" cy="2185.4258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="2857" y="2187.7339">flag : char16_t</text><ellipse cx="2848" cy="2198.2305" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="2857" y="2200.5386">CondT : using</text><ellipse cx="2848" cy="2211.0352" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2857" y="2213.3433">StrT : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2838" x2="3618" y1="2219.9375" y2="2219.9375"/><ellipse cx="2848" cy="2231.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="40" x="2857" y="2234.1479">Prefix()</text><ellipse cx="2848" cy="2244.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="756" x="2857" y="2246.9526">Prefix(char16_t flag, bool cross_product, const StrT&amp; strip, const StrT&amp; append, const Flag_Set&amp; cont_flags, const StrT&amp; condition)</text><ellipse cx="2848" cy="2257.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="2857" y="2259.7573">check_condition(const StrT&amp; word) : auto {query}</text><ellipse cx="2848" cy="2270.2539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="2857" y="2272.562">to_derived(StrT&amp; word) : auto {query}</text><ellipse cx="2848" cy="2283.0586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="2857" y="2285.3667">to_derived_copy(StrT word) : auto {query}</text><ellipse cx="2848" cy="2295.8633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="2857" y="2298.1714">to_root(StrT&amp; word) : auto {query}</text><ellipse cx="2848" cy="2308.668" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="2857" y="2310.9761">to_root_copy(StrT word) : auto {query}</text><!--class nuspell.Replacement_Table--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="291.2891" id="nuspell.Replacement_Table" style="stroke: #A80036; stroke-width: 1.5;" width="310" x="664" y="2052"/><ellipse cx="679" cy="2068" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M681.9688,2073.6406 Q681.3906,2073.9375 680.75,2074.0781 Q680.1094,2074.2344 679.4063,2074.2344 Q676.9063,2074.2344 675.5781,2072.5938 Q674.2656,2070.9375 674.2656,2067.8125 Q674.2656,2064.6875 675.5781,2063.0313 Q676.9063,2061.375 679.4063,2061.375 Q680.1094,2061.375 680.75,2061.5313 Q681.4063,2061.6875 681.9688,2061.9844 L681.9688,2064.7031 Q681.3438,2064.125 680.75,2063.8594 Q680.1563,2063.5781 679.5313,2063.5781 Q678.1875,2063.5781 677.5,2064.6563 Q676.8125,2065.7188 676.8125,2067.8125 Q676.8125,2069.9063 677.5,2070.9844 Q678.1875,2072.0469 679.5313,2072.0469 Q680.1563,2072.0469 680.75,2071.7813 Q681.3438,2071.5 681.9688,2070.9219 L681.9688,2073.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="122" x="693" y="2072.1543">Replacement_Table</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="823" y="2049"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="824" y="2061.1387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="665" x2="973" y1="2084" y2="2084"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="672" y="2092.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="684" y="2098.2104">table : Table_Str</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="672" y="2105.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="684" y="2111.0151">end_word_reps_last_idx : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="672" y="2118.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="684" y="2123.8198">start_word_reps_last_idx : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="672" y="2131.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="684" y="2136.6245">whole_word_reps_last_idx : size_t</text><ellipse cx="675" cy="2147.1211" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="684" y="2149.4292">StrT : using</text><ellipse cx="675" cy="2159.9258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="684" y="2162.2339">Table_Str : using</text><ellipse cx="675" cy="2172.7305" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="684" y="2175.0386">const_iterator : using</text><ellipse cx="675" cy="2185.5352" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="684" y="2187.8433">iterator : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="665" x2="973" y1="2194.4375" y2="2194.4375"/><ellipse cx="675" cy="2206.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="684" y="2208.6479">Replacement_Table()</text><ellipse cx="675" cy="2219.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="684" y="2221.4526">Replacement_Table(const Table_Str&amp; v)</text><ellipse cx="675" cy="2231.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="684" y="2234.2573">Replacement_Table(Table_Str&amp;&amp; v)</text><ellipse cx="675" cy="2244.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="684" y="2247.062">any_place_replacements() : auto {query}</text><ellipse cx="675" cy="2257.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="684" y="2259.8667">end_word_replacements() : auto {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="672" y="2267.3633"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="684" y="2272.6714">order_entries() : auto</text><ellipse cx="675" cy="2283.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="684" y="2285.4761">start_word_replacements() : auto {query}</text><ellipse cx="675" cy="2295.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="684" y="2298.2808">whole_word_replacements() : auto {query}</text><ellipse cx="675" cy="2308.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="684" y="2311.0854">operator=(const Table_Str&amp; v) : auto&amp;</text><ellipse cx="675" cy="2321.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="684" y="2323.8901">operator=(Table_Str&amp;&amp; v) : auto&amp;</text><ellipse cx="675" cy="2334.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="684" y="2336.6948">operator=(const Range&amp; range) : auto&amp;</text><!--class nuspell.Similarity_Group--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="137.6328" id="nuspell.Similarity_Group" style="stroke: #A80036; stroke-width: 1.5;" width="287" x="1009.5" y="2128.5"/><ellipse cx="1024.5" cy="2144.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1027.4688,2150.1406 Q1026.8906,2150.4375 1026.25,2150.5781 Q1025.6094,2150.7344 1024.9063,2150.7344 Q1022.4063,2150.7344 1021.0781,2149.0938 Q1019.7656,2147.4375 1019.7656,2144.3125 Q1019.7656,2141.1875 1021.0781,2139.5313 Q1022.4063,2137.875 1024.9063,2137.875 Q1025.6094,2137.875 1026.25,2138.0313 Q1026.9063,2138.1875 1027.4688,2138.4844 L1027.4688,2141.2031 Q1026.8438,2140.625 1026.25,2140.3594 Q1025.6563,2140.0781 1025.0313,2140.0781 Q1023.6875,2140.0781 1023,2141.1563 Q1022.3125,2142.2188 1022.3125,2144.3125 Q1022.3125,2146.4063 1023,2147.4844 Q1023.6875,2148.5469 1025.0313,2148.5469 Q1025.6563,2148.5469 1026.25,2148.2813 Q1026.8438,2148 1027.4688,2147.4219 L1027.4688,2150.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="99" x="1038.5" y="2148.6543">Similarity_Group</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="1145.5" y="2125.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="1146.5" y="2137.6387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1010.5" x2="1295.5" y1="2160.5" y2="2160.5"/><ellipse cx="1020.5" cy="2172.4023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="1029.5" y="2174.7104">chars : StrT</text><ellipse cx="1020.5" cy="2185.207" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="1029.5" y="2187.5151">strings : std::vector&lt;StrT&gt;</text><ellipse cx="1020.5" cy="2198.0117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1029.5" y="2200.3198">StrT : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1010.5" x2="1295.5" y1="2206.9141" y2="2206.9141"/><ellipse cx="1020.5" cy="2218.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="1029.5" y="2221.1245">Similarity_Group()</text><ellipse cx="1020.5" cy="2231.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="1029.5" y="2233.9292">Similarity_Group(const StrT&amp; s)</text><ellipse cx="1020.5" cy="2244.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="1029.5" y="2246.7339">parse(const StrT&amp; s) : auto</text><ellipse cx="1020.5" cy="2257.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="1029.5" y="2259.5386">operator=(const StrT&amp; s) : auto&amp;</text><!--class nuspell.String_Pair--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="201.6563" id="nuspell.String_Pair" style="stroke: #A80036; stroke-width: 1.5;" width="264" x="343" y="2800"/><ellipse cx="362.05" cy="2816" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M365.0188,2821.6406 Q364.4406,2821.9375 363.8,2822.0781 Q363.1594,2822.2344 362.4563,2822.2344 Q359.9563,2822.2344 358.6281,2820.5938 Q357.3156,2818.9375 357.3156,2815.8125 Q357.3156,2812.6875 358.6281,2811.0313 Q359.9563,2809.375 362.4563,2809.375 Q363.1594,2809.375 363.8,2809.5313 Q364.4563,2809.6875 365.0188,2809.9844 L365.0188,2812.7031 Q364.3938,2812.125 363.8,2811.8594 Q363.2063,2811.5781 362.5813,2811.5781 Q361.2375,2811.5781 360.55,2812.6563 Q359.8625,2813.7188 359.8625,2815.8125 Q359.8625,2817.9063 360.55,2818.9844 Q361.2375,2820.0469 362.5813,2820.0469 Q363.2063,2820.0469 363.8,2819.7813 Q364.3938,2819.5 365.0188,2818.9219 L365.0188,2821.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="67" x="376.95" y="2820.1543">String_Pair</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="456" y="2797"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="457" y="2809.1387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="344" x2="606" y1="2832" y2="2832"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="351" y="2840.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="43" x="363" y="2846.2104">s : StrT</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="351" y="2853.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="47" x="363" y="2859.0151">i : size_t</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="351" y="2866.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="363" y="2871.8198">StrT : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="344" x2="606" y1="2878.4141" y2="2878.4141"/><ellipse cx="354" cy="2890.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="363" y="2892.6245">String_Pair()</text><ellipse cx="354" cy="2903.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="363" y="2905.4292">String_Pair(Str1&amp;&amp; str, size_t i)</text><ellipse cx="354" cy="2915.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="363" y="2918.2339">String_Pair(Str1&amp;&amp; first, Str2&amp;&amp; second)</text><ellipse cx="354" cy="2928.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="363" y="2931.0386">first() : auto {query}</text><ellipse cx="354" cy="2941.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="363" y="2943.8433">first(my_string_view&lt;CharT&gt; x) : auto</text><ellipse cx="354" cy="2954.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="363" y="2956.6479">idx() : auto {query}</text><ellipse cx="354" cy="2967.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="363" y="2969.4526">second() : auto {query}</text><ellipse cx="354" cy="2979.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="363" y="2982.2573">second(my_string_view&lt;CharT&gt; x) : auto</text><ellipse cx="354" cy="2992.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="363" y="2995.062">str() : auto&amp; {query}</text><!--class nuspell.String_Set--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="1021.1563" id="nuspell.String_Set" style="stroke: #A80036; stroke-width: 1.5;" width="506" x="3654" y="1687"/><ellipse cx="3792.75" cy="1703" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3795.7188,1708.6406 Q3795.1406,1708.9375 3794.5,1709.0781 Q3793.8594,1709.2344 3793.1563,1709.2344 Q3790.6563,1709.2344 3789.3281,1707.5938 Q3788.0156,1705.9375 3788.0156,1702.8125 Q3788.0156,1699.6875 3789.3281,1698.0313 Q3790.6563,1696.375 3793.1563,1696.375 Q3793.8594,1696.375 3794.5,1696.5313 Q3795.1563,1696.6875 3795.7188,1696.9844 L3795.7188,1699.7031 Q3795.0938,1699.125 3794.5,1698.8594 Q3793.9063,1698.5781 3793.2813,1698.5781 Q3791.9375,1698.5781 3791.25,1699.6563 Q3790.5625,1700.7188 3790.5625,1702.8125 Q3790.5625,1704.9063 3791.25,1705.9844 Q3791.9375,1707.0469 3793.2813,1707.0469 Q3793.9063,1707.0469 3794.5,1706.7813 Q3795.0938,1706.5 3795.7188,1705.9219 L3795.7188,1708.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="3813.25" y="1707.1543">String_Set</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="4009" y="1684"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="4010" y="1696.1387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3655" x2="4159" y1="1719" y2="1719"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3662" y="1727.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="3674" y="1733.2104">d : std::basic_string&lt;CharT&gt;</text><ellipse cx="3665" cy="1743.707" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="3674" y="1746.0151">StrT : using</text><ellipse cx="3665" cy="1756.5117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="3674" y="1758.8198">allocator_type : using</text><ellipse cx="3665" cy="1769.3164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="3674" y="1771.6245">const_iterator : using</text><ellipse cx="3665" cy="1782.1211" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="3674" y="1784.4292">const_pointer : using</text><ellipse cx="3665" cy="1794.9258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="3674" y="1797.2339">const_reference : using</text><ellipse cx="3665" cy="1807.7305" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="3674" y="1810.0386">const_reverse_iterator : using</text><ellipse cx="3665" cy="1820.5352" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="3674" y="1822.8433">difference_type : using</text><ellipse cx="3665" cy="1833.3398" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="3674" y="1835.6479">iterator : using</text><ellipse cx="3665" cy="1846.1445" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="3674" y="1848.4526">key_compare : using</text><ellipse cx="3665" cy="1858.9492" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="3674" y="1861.2573">key_type : using</text><ellipse cx="3665" cy="1871.7539" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="3674" y="1874.062">pointer : using</text><ellipse cx="3665" cy="1884.5586" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="3674" y="1886.8667">reference : using</text><ellipse cx="3665" cy="1897.3633" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="3674" y="1899.6714">reverse_iterator : using</text><ellipse cx="3665" cy="1910.168" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="3674" y="1912.4761">size_type : using</text><ellipse cx="3665" cy="1922.9727" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3674" y="1925.2808">traits_type : using</text><ellipse cx="3665" cy="1935.7773" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="3674" y="1938.0854">value_compare : using</text><ellipse cx="3665" cy="1948.582" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3674" y="1950.8901">value_type : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3655" x2="4159" y1="1957.4844" y2="1957.4844"/><ellipse cx="3665" cy="1969.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="3674" y="1971.6948">String_Set()</text><ellipse cx="3665" cy="1982.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="3674" y="1984.4995">String_Set(const StrT&amp; s)</text><ellipse cx="3665" cy="1994.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="3674" y="1997.3042">String_Set(StrT&amp;&amp; s)</text><ellipse cx="3665" cy="2007.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="3674" y="2010.1089">String_Set(InputIterator first, InputIterator last)</text><ellipse cx="3665" cy="2020.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="3674" y="2022.9136">String_Set(std::initializer_list&lt;value_type&gt; il)</text><ellipse cx="3665" cy="2033.4102" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="3674" y="2035.7183">operatorconstStrT&amp;() {query}</text><ellipse cx="3665" cy="2046.2148" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="3674" y="2048.5229">insert(const StrT&amp; s) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3662" y="2056.0195"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="3674" y="2061.3276">lookup(const key_type&amp; x) : auto {query}</text><ellipse cx="3665" cy="2071.8242" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="192" x="3674" y="2074.1323">operator+=(const StrT&amp; s) : auto</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3662" y="2081.6289"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="3674" y="2086.937">sort_uniq() : auto</text><ellipse cx="3665" cy="2097.4336" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="3674" y="2099.7417">data() : auto&amp; {query}</text><ellipse cx="3665" cy="2110.2383" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="3674" y="2112.5464">operator=(const StrT&amp; s) : auto&amp;</text><ellipse cx="3665" cy="2123.043" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="3674" y="2125.3511">operator=(StrT&amp;&amp; s) : auto&amp;</text><ellipse cx="3665" cy="2135.8477" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="3674" y="2138.1558">operator=(std::initializer_list&lt;value_type&gt; il) : auto&amp;</text><ellipse cx="3665" cy="2148.6523" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="3674" y="2150.9604">contains(const key_type&amp; x) : bool {query}</text><ellipse cx="3665" cy="2161.457" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="3674" y="2163.7651">empty() : bool {query}</text><ellipse cx="3665" cy="2174.2617" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="282" x="3674" y="2176.5698">operator!=(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3665" cy="2187.0664" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="3674" y="2189.3745">operator&lt;(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3665" cy="2199.8711" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="3674" y="2202.1792">operator&lt;=(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3665" cy="2212.6758" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="3674" y="2214.9839">operator==(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3665" cy="2225.4805" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="3674" y="2227.7886">operator&gt;(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3665" cy="2238.2852" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="3674" y="2240.5933">operator&gt;=(const String_Set&amp; rhs) : bool {query}</text><ellipse cx="3665" cy="2251.0898" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="3674" y="2253.3979">begin() : const_iterator {query}</text><ellipse cx="3665" cy="2263.8945" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="3674" y="2266.2026">cbegin() : const_iterator {query}</text><ellipse cx="3665" cy="2276.6992" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="3674" y="2279.0073">cend() : const_iterator {query}</text><ellipse cx="3665" cy="2289.5039" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="3674" y="2291.812">end() : const_iterator {query}</text><ellipse cx="3665" cy="2302.3086" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="3674" y="2304.6167">find(const key_type&amp; x) : const_iterator {query}</text><ellipse cx="3665" cy="2315.1133" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="3674" y="2317.4214">lower_bound(const key_type&amp; x) : const_iterator {query}</text><ellipse cx="3665" cy="2327.918" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="3674" y="2330.2261">upper_bound(const key_type&amp; x) : const_iterator {query}</text><ellipse cx="3665" cy="2340.7227" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="3674" y="2343.0308">crbegin() : const_reverse_iterator {query}</text><ellipse cx="3665" cy="2353.5273" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="3674" y="2355.8354">crend() : const_reverse_iterator {query}</text><ellipse cx="3665" cy="2366.332" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="3674" y="2368.6401">rbegin() : const_reverse_iterator {query}</text><ellipse cx="3665" cy="2379.1367" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="3674" y="2381.4448">rend() : const_reverse_iterator {query}</text><ellipse cx="3665" cy="2391.9414" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="3674" y="2394.2495">begin() : iterator</text><ellipse cx="3665" cy="2404.7461" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="3674" y="2407.0542">emplace_hint(iterator hint, Args&amp;&amp; args) : iterator</text><ellipse cx="3665" cy="2417.5508" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="3674" y="2419.8589">end() : iterator</text><ellipse cx="3665" cy="2430.3555" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="3674" y="2432.6636">erase(iterator position) : iterator</text><ellipse cx="3665" cy="2443.1602" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="3674" y="2445.4683">erase(iterator first, iterator last) : iterator</text><ellipse cx="3665" cy="2455.9648" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="3674" y="2458.2729">find(const key_type&amp; x) : iterator</text><ellipse cx="3665" cy="2468.7695" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="3674" y="2471.0776">insert(iterator hint, const value_type&amp; x) : iterator</text><ellipse cx="3665" cy="2481.5742" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="3674" y="2483.8823">lower_bound(const key_type&amp; x) : iterator</text><ellipse cx="3665" cy="2494.3789" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="3674" y="2496.687">upper_bound(const key_type&amp; x) : iterator</text><ellipse cx="3665" cy="2507.1836" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="3674" y="2509.4917">key_comp() : key_compare {query}</text><ellipse cx="3665" cy="2519.9883" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3674" y="2522.2964">rbegin() : reverse_iterator</text><ellipse cx="3665" cy="2532.793" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="3674" y="2535.1011">rend() : reverse_iterator</text><ellipse cx="3665" cy="2545.5977" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="3674" y="2547.9058">count(const key_type&amp; x) : size_type {query}</text><ellipse cx="3665" cy="2558.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="3674" y="2560.7104">erase(const key_type&amp; x) : size_type</text><ellipse cx="3665" cy="2571.207" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="3674" y="2573.5151">max_size() : size_type {query}</text><ellipse cx="3665" cy="2584.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="3674" y="2586.3198">size() : size_type {query}</text><ellipse cx="3665" cy="2596.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="3674" y="2599.1245">equal_range(const key_type&amp; x) : std::pair&lt;const_iterator , const_iterator&gt; {query}</text><ellipse cx="3665" cy="2609.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="288" x="3674" y="2611.9292">emplace(Args&amp;&amp; args) : std::pair&lt;iterator , bool&gt;</text><ellipse cx="3665" cy="2622.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="3674" y="2624.7339">insert(const value_type&amp; x) : std::pair&lt;iterator , bool&gt;</text><ellipse cx="3665" cy="2635.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="356" x="3674" y="2637.5386">equal_range(const key_type&amp; x) : std::pair&lt;iterator , iterator&gt;</text><ellipse cx="3665" cy="2648.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="3674" y="2650.3433">value_comp() : value_compare {query}</text><ellipse cx="3665" cy="2660.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3674" y="2663.1479">clear() : void</text><ellipse cx="3665" cy="2673.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="3674" y="2675.9526">insert(InputIterator first, InputIterator last) : void</text><ellipse cx="3665" cy="2686.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="3674" y="2688.7573">insert(std::initializer_list&lt;value_type&gt; il) : void</text><ellipse cx="3665" cy="2699.2539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="3674" y="2701.562">swap(String_Set&amp; s) : void</text><!--class nuspell.Substr_Replacer--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="201.6563" id="nuspell.Substr_Replacer" style="stroke: #A80036; stroke-width: 1.5;" width="290" x="1332" y="2096.5"/><ellipse cx="1347" cy="2112.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1349.9688,2118.1406 Q1349.3906,2118.4375 1348.75,2118.5781 Q1348.1094,2118.7344 1347.4063,2118.7344 Q1344.9063,2118.7344 1343.5781,2117.0938 Q1342.2656,2115.4375 1342.2656,2112.3125 Q1342.2656,2109.1875 1343.5781,2107.5313 Q1344.9063,2105.875 1347.4063,2105.875 Q1348.1094,2105.875 1348.75,2106.0313 Q1349.4063,2106.1875 1349.9688,2106.4844 L1349.9688,2109.2031 Q1349.3438,2108.625 1348.75,2108.3594 Q1348.1563,2108.0781 1347.5313,2108.0781 Q1346.1875,2108.0781 1345.5,2109.1563 Q1344.8125,2110.2188 1344.8125,2112.3125 Q1344.8125,2114.4063 1345.5,2115.4844 Q1346.1875,2116.5469 1347.5313,2116.5469 Q1348.1563,2116.5469 1348.75,2116.2813 Q1349.3438,2116 1349.9688,2115.4219 L1349.9688,2118.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="102" x="1361" y="2116.6543">Substr_Replacer</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="1471" y="2093.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="1472" y="2105.6387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1333" x2="1621" y1="2128.5" y2="2128.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340" y="2137.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="1352" y="2142.7104">table : Table_Pairs</text><ellipse cx="1343" cy="2153.207" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="1352" y="2155.5151">StrT : using</text><ellipse cx="1343" cy="2166.0117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="1352" y="2168.3198">Table_Pairs : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1333" x2="1621" y1="2174.9141" y2="2174.9141"/><ellipse cx="1343" cy="2186.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="1352" y="2189.1245">Substr_Replacer()</text><ellipse cx="1343" cy="2199.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="1352" y="2201.9292">Substr_Replacer(const Table_Pairs&amp; v)</text><ellipse cx="1343" cy="2212.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="1352" y="2214.7339">Substr_Replacer(const Table_Pairs&amp;&amp; v)</text><ellipse cx="1343" cy="2225.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="1352" y="2227.5386">replace(StrT&amp; s) : auto {query}</text><ellipse cx="1343" cy="2238.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="1352" y="2240.3433">replace_copy(StrT s) : auto {query}</text><ellipse cx="1343" cy="2250.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="1352" y="2253.1479">operator=(const Table_Pairs&amp; v) : auto&amp;</text><ellipse cx="1343" cy="2263.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="1352" y="2265.9526">operator=(const Table_Pairs&amp;&amp; v) : auto&amp;</text><ellipse cx="1343" cy="2276.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="1352" y="2278.7573">operator=(const Range&amp; range) : auto&amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1340" y="2286.2539"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="1352" y="2291.562">sort_uniq() : void</text><!--class nuspell.Suffix--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="240.0703" id="nuspell.Suffix" style="stroke: #A80036; stroke-width: 1.5;" width="782" x="4195" y="2077.5"/><ellipse cx="4487.25" cy="2093.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4490.2188,2099.1406 Q4489.6406,2099.4375 4489,2099.5781 Q4488.3594,2099.7344 4487.6563,2099.7344 Q4485.1563,2099.7344 4483.8281,2098.0938 Q4482.5156,2096.4375 4482.5156,2093.3125 Q4482.5156,2090.1875 4483.8281,2088.5313 Q4485.1563,2086.875 4487.6563,2086.875 Q4488.3594,2086.875 4489,2087.0313 Q4489.6563,2087.1875 4490.2188,2087.4844 L4490.2188,2090.2031 Q4489.5938,2089.625 4489,2089.3594 Q4488.4063,2089.0781 4487.7813,2089.0781 Q4486.4375,2089.0781 4485.75,2090.1563 Q4485.0625,2091.2188 4485.0625,2093.3125 Q4485.0625,2095.4063 4485.75,2096.4844 Q4486.4375,2097.5469 4487.7813,2097.5469 Q4488.4063,2097.5469 4489,2097.2813 Q4489.5938,2097 4490.2188,2096.4219 L4490.2188,2099.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="33" x="4507.75" y="2097.6543">Suffix</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="4826" y="2074.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="4827" y="2086.6387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4196" x2="4976" y1="2109.5" y2="2109.5"/><ellipse cx="4206" cy="2121.4023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="4215" y="2123.7104">condition : CondT</text><ellipse cx="4206" cy="2134.207" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="4215" y="2136.5151">cont_flags : Flag_Set</text><ellipse cx="4206" cy="2147.0117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="4215" y="2149.3198">appending : StrT</text><ellipse cx="4206" cy="2159.8164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="4215" y="2162.1245">stripping : StrT</text><ellipse cx="4206" cy="2172.6211" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="4215" y="2174.9292">cross_product : bool</text><ellipse cx="4206" cy="2185.4258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="4215" y="2187.7339">flag : char16_t</text><ellipse cx="4206" cy="2198.2305" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="4215" y="2200.5386">CondT : using</text><ellipse cx="4206" cy="2211.0352" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="4215" y="2213.3433">StrT : using</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4196" x2="4976" y1="2219.9375" y2="2219.9375"/><ellipse cx="4206" cy="2231.8398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="40" x="4215" y="2234.1479">Suffix()</text><ellipse cx="4206" cy="2244.6445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="756" x="4215" y="2246.9526">Suffix(char16_t flag, bool cross_product, const StrT&amp; strip, const StrT&amp; append, const Flag_Set&amp; cont_flags, const StrT&amp; condition)</text><ellipse cx="4206" cy="2257.4492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="4215" y="2259.7573">check_condition(const StrT&amp; word) : auto {query}</text><ellipse cx="4206" cy="2270.2539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="4215" y="2272.562">to_derived(StrT&amp; word) : auto {query}</text><ellipse cx="4206" cy="2283.0586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="4215" y="2285.3667">to_derived_copy(StrT word) : auto {query}</text><ellipse cx="4206" cy="2295.8633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="4215" y="2298.1714">to_root(StrT&amp; word) : auto {query}</text><ellipse cx="4206" cy="2308.668" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="4215" y="2310.9761">to_root_copy(StrT word) : auto {query}</text><!--class nuspell.Word_List--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="73.6094" id="nuspell.Word_List" style="stroke: #A80036; stroke-width: 1.5;" width="336" x="2548" y="1194.5"/><ellipse cx="2682.25" cy="1210.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2685.2188,1216.1406 Q2684.6406,1216.4375 2684,1216.5781 Q2683.3594,1216.7344 2682.6563,1216.7344 Q2680.1563,1216.7344 2678.8281,1215.0938 Q2677.5156,1213.4375 2677.5156,1210.3125 Q2677.5156,1207.1875 2678.8281,1205.5313 Q2680.1563,1203.875 2682.6563,1203.875 Q2683.3594,1203.875 2684,1204.0313 Q2684.6563,1204.1875 2685.2188,1204.4844 L2685.2188,1207.2031 Q2684.5938,1206.625 2684,1206.3594 Q2683.4063,1206.0781 2682.7813,1206.0781 Q2681.4375,1206.0781 2680.75,1207.1563 Q2680.0625,1208.2188 2680.0625,1210.3125 Q2680.0625,1212.4063 2680.75,1213.4844 Q2681.4375,1214.5469 2682.7813,1214.5469 Q2683.4063,1214.5469 2684,1214.2813 Q2684.5938,1214 2685.2188,1213.4219 L2685.2188,1216.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="59" x="2702.75" y="1214.6543">Word_List</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2549" x2="2883" y1="1226.5" y2="1226.5"/><ellipse cx="2559" cy="1238.4023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="2568" y="1240.7104">equal_range : using Word_List_Base::</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2549" x2="2883" y1="1247.3047" y2="1247.3047"/><ellipse cx="2559" cy="1259.207" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="2568" y="1261.5151">equal_range(const std::wstring&amp; word) : auto {query}</text><!--class nuspell.identity--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="60.8047" id="nuspell.identity" style="stroke: #A80036; stroke-width: 1.5;" width="233" x="5012.5" y="2167"/><ellipse cx="5101.75" cy="2183" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5104.7188,2188.6406 Q5104.1406,2188.9375 5103.5,2189.0781 Q5102.8594,2189.2344 5102.1563,2189.2344 Q5099.6563,2189.2344 5098.3281,2187.5938 Q5097.0156,2185.9375 5097.0156,2182.8125 Q5097.0156,2179.6875 5098.3281,2178.0313 Q5099.6563,2176.375 5102.1563,2176.375 Q5102.8594,2176.375 5103.5,2176.5313 Q5104.1563,2176.6875 5104.7188,2176.9844 L5104.7188,2179.7031 Q5104.0938,2179.125 5103.5,2178.8594 Q5102.9063,2178.5781 5102.2813,2178.5781 Q5100.9375,2178.5781 5100.25,2179.6563 Q5099.5625,2180.7188 5099.5625,2182.8125 Q5099.5625,2184.9063 5100.25,2185.9844 Q5100.9375,2187.0469 5102.2813,2187.0469 Q5102.9063,2187.0469 5103.5,2186.7813 Q5104.0938,2186.5 5104.7188,2185.9219 L5104.7188,2188.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="46" x="5122.25" y="2187.1543">identity</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5013.5" x2="5244.5" y1="2199" y2="2199"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="5013.5" x2="5244.5" y1="2207" y2="2207"/><ellipse cx="5023.5" cy="2218.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="5032.5" y="2221.2104">operator()(T&amp;&amp; t) : constexpr auto&amp;</text><!--class nuspell.sv_eq--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="60.8047" id="nuspell.sv_eq" style="stroke: #A80036; stroke-width: 1.5;" width="480" x="2354" y="2870.5"/><ellipse cx="2494.25" cy="2886.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2497.2188,2892.1406 Q2496.6406,2892.4375 2496,2892.5781 Q2495.3594,2892.7344 2494.6563,2892.7344 Q2492.1563,2892.7344 2490.8281,2891.0938 Q2489.5156,2889.4375 2489.5156,2886.3125 Q2489.5156,2883.1875 2490.8281,2881.5313 Q2492.1563,2879.875 2494.6563,2879.875 Q2495.3594,2879.875 2496,2880.0313 Q2496.6563,2880.1875 2497.2188,2880.4844 L2497.2188,2883.2031 Q2496.5938,2882.625 2496,2882.3594 Q2495.4063,2882.0781 2494.7813,2882.0781 Q2493.4375,2882.0781 2492.75,2883.1563 Q2492.0625,2884.2188 2492.0625,2886.3125 Q2492.0625,2888.4063 2492.75,2889.4844 Q2493.4375,2890.5469 2494.7813,2890.5469 Q2495.4063,2890.5469 2496,2890.2813 Q2496.5938,2890 2497.2188,2889.4219 L2497.2188,2892.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="35" x="2514.75" y="2890.6543">sv_eq</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="2683" y="2867.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="2684" y="2879.6387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2355" x2="2833" y1="2902.5" y2="2902.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2355" x2="2833" y1="2910.5" y2="2910.5"/><ellipse cx="2365" cy="2922.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="454" x="2374" y="2924.7104">operator()(my_string_view&lt;CharT&gt; l, my_string_view&lt;CharT&gt; r) : auto {query}</text><!--class nuspell.sv_hash--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="60.8047" id="nuspell.sv_hash" style="stroke: #A80036; stroke-width: 1.5;" width="381" x="2869.5" y="2870.5"/><ellipse cx="2952.75" cy="2886.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2955.7188,2892.1406 Q2955.1406,2892.4375 2954.5,2892.5781 Q2953.8594,2892.7344 2953.1563,2892.7344 Q2950.6563,2892.7344 2949.3281,2891.0938 Q2948.0156,2889.4375 2948.0156,2886.3125 Q2948.0156,2883.1875 2949.3281,2881.5313 Q2950.6563,2879.875 2953.1563,2879.875 Q2953.8594,2879.875 2954.5,2880.0313 Q2955.1563,2880.1875 2955.7188,2880.4844 L2955.7188,2883.2031 Q2955.0938,2882.625 2954.5,2882.3594 Q2953.9063,2882.0781 2953.2813,2882.0781 Q2951.9375,2882.0781 2951.25,2883.1563 Q2950.5625,2884.2188 2950.5625,2886.3125 Q2950.5625,2888.4063 2951.25,2889.4844 Q2951.9375,2890.5469 2953.2813,2890.5469 Q2953.9063,2890.5469 2954.5,2890.2813 Q2955.0938,2890 2955.7188,2889.4219 L2955.7188,2892.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="50" x="2973.25" y="2890.6543">sv_hash</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="154" x="3099.5" y="2867.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="152" x="3100.5" y="2879.6387">template &lt;class CharT&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2870.5" x2="3249.5" y1="2902.5" y2="2902.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2870.5" x2="3249.5" y1="2910.5" y2="2910.5"/><ellipse cx="2880.5" cy="2922.4023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="355" x="2889.5" y="2924.7104">operator()(boost::basic_string_view&lt;CharT&gt; s) : auto {query}</text><!--class nuspell.Affixing_Mode--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="99.2188" id="nuspell.Affixing_Mode" style="stroke: #A80036; stroke-width: 1.5;" width="145" x="3285.5" y="2851.5"/><ellipse cx="3313.55" cy="2867.5" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3317.6594,2873.5 L3309.9406,2873.5 L3309.9406,2861.1094 L3317.6594,2861.1094 L3317.6594,2863.2656 L3312.3938,2863.2656 L3312.3938,2865.9375 L3317.1594,2865.9375 L3317.1594,2868.0938 L3312.3938,2868.0938 L3312.3938,2871.3438 L3317.6594,2871.3438 L3317.6594,2873.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="3330.45" y="2871.6543">Affixing_Mode</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3286.5" x2="3429.5" y1="2883.5" y2="2883.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="3291.5" y="2897.7104">AT_COMPOUND_BEGIN</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="3291.5" y="2910.5151">AT_COMPOUND_END</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="3291.5" y="2923.3198">AT_COMPOUND_MIDDLE</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="3291.5" y="2936.1245">FULL_WORD</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3286.5" x2="3429.5" y1="2942.7188" y2="2942.7188"/><!--class nuspell.Flag_Type--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="99.2188" id="nuspell.Flag_Type" style="stroke: #A80036; stroke-width: 1.5;" width="128" x="3466" y="2851.5"/><ellipse cx="3496.75" cy="2867.5" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3500.8594,2873.5 L3493.1406,2873.5 L3493.1406,2861.1094 L3500.8594,2861.1094 L3500.8594,2863.2656 L3495.5938,2863.2656 L3495.5938,2865.9375 L3500.3594,2865.9375 L3500.3594,2868.0938 L3495.5938,2868.0938 L3495.5938,2871.3438 L3500.8594,2871.3438 L3500.8594,2873.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="3514.25" y="2871.6543">Flag_Type</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3467" x2="3593" y1="2883.5" y2="2883.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="3472" y="2897.7104">FLAG_DOUBLE_CHAR</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3472" y="2910.5151">FLAG_NUMBER</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="3472" y="2923.3198">FLAG_SINGLE_CHAR</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="3472" y="2936.1245">FLAG_UTF8</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3467" x2="3593" y1="2942.7188" y2="2942.7188"/><!--class nuspell.empty--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="48" id="nuspell.empty" style="stroke: #A80036; stroke-width: 1.5;" width="70" x="3629" y="2877"/><ellipse cx="3644" cy="2893" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3648.1094,2899 L3640.3906,2899 L3640.3906,2886.6094 L3648.1094,2886.6094 L3648.1094,2888.7656 L3642.8438,2888.7656 L3642.8438,2891.4375 L3647.6094,2891.4375 L3647.6094,2893.5938 L3642.8438,2893.5938 L3642.8438,2896.8438 L3648.1094,2896.8438 L3648.1094,2899 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="38" x="3658" y="2897.1543">empty</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3630" x2="3698" y1="2909" y2="2909"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3630" x2="3698" y1="2917" y2="2917"/><!--class nuspell::String_Set.String_Set::Char_Traits_Less_Than--><rect fill="#FEFECE" filter="url(#f1552kg1324s2n)" height="60.8047" id="nuspell::String_Set.String_Set::Char_Traits_Less_Than" style="stroke: #A80036; stroke-width: 1.5;" width="245" x="5269.5" y="395"/><ellipse cx="5284.5" cy="411" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5287.4688,416.6406 Q5286.8906,416.9375 5286.25,417.0781 Q5285.6094,417.2344 5284.9063,417.2344 Q5282.4063,417.2344 5281.0781,415.5938 Q5279.7656,413.9375 5279.7656,410.8125 Q5279.7656,407.6875 5281.0781,406.0313 Q5282.4063,404.375 5284.9063,404.375 Q5285.6094,404.375 5286.25,404.5313 Q5286.9063,404.6875 5287.4688,404.9844 L5287.4688,407.7031 Q5286.8438,407.125 5286.25,406.8594 Q5285.6563,406.5781 5285.0313,406.5781 Q5283.6875,406.5781 5283,407.6563 Q5282.3125,408.7188 5282.3125,410.8125 Q5282.3125,412.9063 5283,413.9844 Q5283.6875,415.0469 5285.0313,415.0469 Q5285.6563,415.0469 5286.25,414.7813 Q5286.8438,414.5 5287.4688,413.9219 L5287.4688,416.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="213" x="5298.5" y="415.1543">String_Set::Char_Traits_Less_Than</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5270.5" x2="5513.5" y1="427" y2="427"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="5270.5" x2="5513.5" y1="435" y2="435"/><ellipse cx="5280.5" cy="446.9023" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="5289.5" y="449.2104">operator()(CharT a, CharT b) : auto</text><!--link nuspell.Aff_Data to nuspell.Dict_Base--><path d="M1811.4804,826.3544 C1818.0666,840.2145 1824.6543,854.078 1831.2125,867.8793 " fill="none" id="nuspell.Aff_Data-nuspell.Dict_Base" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1805.0873,829.2099,1802.8258,808.1413,1817.7322,823.2011,1805.0873,829.2099" style="stroke: #A80036; stroke-width: 1.0;"/><!--link nuspell.Dict_Base to nuspell.Basic_Dictionary--><path d="M2004,1615.409 C2004,1789.8457 2004,1982.301 2004,2096.3919 " fill="none" id="nuspell.Dict_Base-nuspell.Basic_Dictionary" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1997.0001,1615.3267,2004,1595.3267,2011.0001,1615.3266,1997.0001,1615.3267" style="stroke: #A80036; stroke-width: 1.0;"/><!--link nuspell.Aff_Data to nuspell.Aff_Structures--><path d="M1386.0227,560.048 C1261.6963,638.9471 1112.2073,746.824 1001,868 C927.0086,948.6241 866.2142,1058.7922 828.3785,1136.6515 " fill="none" id="nuspell.Aff_Data-nuspell.Aff_Structures" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1397.2091,552.9838,1390.0002,552.8055,1387.0629,559.3912,1394.2718,559.5696,1397.2091,552.9838" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="1381.7347" y="553.9888">2</text><!--link nuspell.Aff_Data to nuspell.Compound_Rule_Table--><path d="M1434.0508,819.953 C1377.9905,938.2373 1321.4647,1057.5039 1283.8028,1136.9684 " fill="none" id="nuspell.Aff_Data-nuspell.Compound_Rule_Table" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1439.6489,808.1413,1433.4646,811.85,1434.5094,818.985,1440.6937,815.2763,1439.6489,808.1413" style="stroke: #A80036; stroke-width: 1.0;"/><!--link nuspell.Aff_Data to nuspell.Word_List--><path d="M1856.9991,493.5147 C2056.7912,561.1304 2340.1672,681.9127 2530,868 C2627.9563,964.0235 2684.0964,1122.5625 2705.6699,1194.2507 " fill="none" id="nuspell.Aff_Data-nuspell.Word_List" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1844.5614,489.3374,1848.9756,495.0396,1855.9369,493.158,1851.5227,487.4559,1844.5614,489.3374" style="stroke: #A80036; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Break_Table--><path d="M627.4621,1333.8458 C521.215,1410.2596 386.2113,1523.8231 304,1655 C225.058,1780.9603 186.9689,1948.7869 169.0558,2064.2437 " fill="none" id="nuspell.Aff_Structures-nuspell.Break_Table" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="638.3037,1326.1051,631.0963,1326.3361,628.5375,1333.078,635.7449,1332.8469,638.3037,1326.1051" style="stroke: #A80036; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Compound_Pattern--><path d="M750.5925,1338.3698 C722.3219,1423.9397 681.8184,1547.0778 647,1655 C591.0282,1828.4887 526.3955,2033.6913 494.6582,2134.7828 " fill="none" id="nuspell.Aff_Structures-nuspell.Compound_Pattern" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="754.6727,1326.0236,748.992,1330.4654,750.9072,1337.4175,756.5879,1332.9757,754.6727,1326.0236" style="stroke: #A80036; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Replacement_Table--><path d="M789.6832,1339.3175 C795.6261,1513.2826 807.338,1856.1222 814.0197,2051.7121 " fill="none" id="nuspell.Aff_Structures-nuspell.Replacement_Table" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="789.2394,1326.3248,785.4466,1332.4579,789.6491,1338.3178,793.4419,1332.1847,789.2394,1326.3248" style="stroke: #A80036; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Similarity_Group--><path d="M843.7893,1337.857 C888.1351,1422.2205 948.8694,1544.0005 992,1655 C1056.4933,1820.9778 1110.3684,2023.8702 1136.3319,2128.205 " fill="none" id="nuspell.Aff_Structures-nuspell.Similarity_Group" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="837.6442,1326.2063,836.9053,1333.3795,843.2425,1336.8204,843.9814,1329.6472,837.6442,1326.2063" style="stroke: #A80036; stroke-width: 1.0;"/><!--link nuspell.Aff_Structures to nuspell.Substr_Replacer--><path d="M821.4014,1338.3672 C854.5817,1421.4589 912.496,1532.7424 1001,1595 C1116.8515,1676.495 1208.844,1560.1041 1314,1655 C1439.3031,1768.0774 1469.8576,1973.3648 1476.3869,2096.4026 " fill="none" id="nuspell.Aff_Structures-nuspell.Substr_Replacer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="816.5855,1326.0629,815.0476,1333.1081,820.9593,1337.2374,822.4972,1330.1922,816.5855,1326.0629" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="8" x="810.621" y="1345.9548">2</text><!--link nuspell.Basic_Dictionary to nuspell.Encoding_Details--><path d="M2004,2311.8736 C2004,2481.301 2004,2788.4828 2004,2876.7086 " fill="none" id="nuspell.Basic_Dictionary-nuspell.Encoding_Details" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2004,2298.6687,2000,2304.6687,2004,2310.6687,2008,2304.6687,2004,2298.6687" style="stroke: #A80036; stroke-width: 1.0;"/><!--link nuspell.Compound_Pattern to nuspell.String_Pair--><path d="M475,2273.2576 C475,2400.5559 475,2657.3998 475,2799.9306 " fill="none" id="nuspell.Compound_Pattern-nuspell.String_Pair" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="475,2260.2402,471,2266.2402,475,2272.2402,479,2266.2402,475,2260.2402" style="stroke: #A80036; stroke-width: 1.0;"/><!--link nuspell.Affix to nuspell.Affix_Table--><!--link nuspell.Affix_Table to nuspell.Affixing_Result--><!--link nuspell.Affixing_Result to nuspell.Casing--><!--link nuspell.Casing to nuspell.Compound_Check_Pattern--><!--link nuspell.Affix to nuspell.Compounding_Result--><!--link nuspell.Compounding_Result to nuspell.Condition--><!--link nuspell.Condition to nuspell.Encoding--><!--link nuspell.Encoding to nuspell.Finder--><!--link nuspell.Finder to nuspell.Hash_Multiset--><!--link nuspell.Compounding_Result to nuspell.List_Strings--><!--link nuspell.List_Strings to nuspell.Prefix--><!--link nuspell.Prefix to nuspell.String_Set--><!--link nuspell.String_Set to nuspell.Suffix--><!--link nuspell.Suffix to nuspell.identity--><!--link nuspell.List_Strings to nuspell.sv_eq--><!--link nuspell.sv_eq to nuspell.sv_hash--><!--link nuspell.sv_hash to nuspell.Affixing_Mode--><!--link nuspell.Affixing_Mode to nuspell.Flag_Type--><!--link nuspell.Flag_Type to nuspell.empty--><!--
@startuml
namespace nuspell {
	class Aff_Data {
		+structures : Aff_Structures<char>
		+wide_structures : Aff_Structures<wchar_t>
		+compound_rules : Compound_Rule_Table
		+compound_syllable_num : Flag_Set
		+flag_type : Flag_Type
		+words : Word_List
		+get_structures() : auto {query}
		+parse_aff(istream& in) : auto
		+parse_aff_dic(std::istream& aff, std::istream& dic) : auto
		+parse_dic(istream& in) : auto
		+set_encoding_and_language(const string& enc, const string& lang) : auto
		+checksharps : bool
		+complex_prefixes : bool
		+compound_check_case : bool
		+compound_check_duplicate : bool
		+compound_check_rep : bool
		+compound_check_triple : bool
		+compound_more_suffixes : bool
		+compound_simplified_triple : bool
		+forbid_warn : bool
		+fullstrip : bool
		+no_split_suggestions : bool
		+only_max_diff : bool
		+suggest_with_dots : bool
		+circumfix_flag : char16_t
		+compound_begin_flag : char16_t
		+compound_flag : char16_t
		+compound_forbid_flag : char16_t
		+compound_force_uppercase : char16_t
		+compound_last_flag : char16_t
		+compound_middle_flag : char16_t
		+compound_onlyin_flag : char16_t
		+compound_permit_flag : char16_t
		+compound_root_flag : char16_t
		+forbiddenword_flag : char16_t
		+keepcase_flag : char16_t
		+need_affix_flag : char16_t
		+nosuggest_flag : char16_t
		+substandard_flag : char16_t
		+warn_flag : char16_t
		+internal_locale : std::locale
		+compound_syllable_vowels : string
		+wordchars : string
		+compound_max_word_count : unsigned short
		+compound_min_length : unsigned short
		+compound_syllable_max : unsigned short
		+max_compound_suggestions : unsigned short
		+max_diff_factor : unsigned short
		+max_ngram_suggestions : unsigned short
		+istream : using
		+pair : using
		+string : using
		+u16string : using
		+vector : using
		+flag_aliases : vector<Flag_Set>
		+phonetic_replacements : vector<pair<string, string> >
	}
}

namespace nuspell {
	class Aff_Structures <template <class CharT>> {
		+break_table : Break_Table<CharT>
		+prefixes : Prefix_Table<CharT>
		+replacements : Replacement_Table<CharT>
		+input_substr_replacer : Substr_Replacer<CharT>
		+output_substr_replacer : Substr_Replacer<CharT>
		+suffixes : Suffix_Table<CharT>
		+ignored_chars : std::basic_string<CharT>
		+keyboard_closeness : std::basic_string<CharT>
		+try_chars : std::basic_string<CharT>
		+compound_patterns : std::vector<Compound_Pattern<CharT> >
		+similarities : std::vector<Similarity_Group<CharT> >
	}
}

namespace nuspell {
	class Affix {
		+new_flags : Flag_Set
		+cross_product : bool
		+flag : char16_t
		+appending : string
		+condition : string
		+stripping : string
		+string : using
		+vector : using
		+morphological_fields : vector<string>
	}
}

namespace nuspell {
	class Affix_Table <template <class CharT, class AffixT>> {
		-all_cont_flags : Flag_Set
		+emplace(Args&& a) : auto
		+equal_range(my_string_view<CharT> appending) : auto {query}
		+has_continuation_flag(char16_t flag) : auto {query}
		+has_continuation_flags() : auto {query}
		+base : using
		+iterator : using
	}
}

namespace nuspell {
	class Affixing_Result <template <class... Affixes>> {
		+Affixing_Result()
		+Affixing_Result(Word_List::const_reference word_entry, const Affixes& affixes)
		+const_pointer() {query}
		+operator->() : auto {query}
		+operator*() : auto& {query}
		+base_type : using
	}
}

namespace nuspell {
	class Basic_Dictionary {
		+Basic_Dictionary()
		#Basic_Dictionary(std::istream& aff, std::istream& dic)
		#enc_details : Encoding_Details
		#external_to_internal_encoding(const std::string& in, std::wstring& wide_out, std::string& narrow_out) : auto {query}
		+imbue(const std::locale& loc) : auto
		#internal_to_external_encoding(std::string& in_out, std::wstring& wide_in_out) : auto {query}
		+{static} load_from_aff_dic(std::istream& aff, std::istream& dic) : auto
		+{static} load_from_aff_dic(const string& file_path_without_extension) : auto
		+spell(const std::string& word) : auto {query}
		+suggest(const std::string& word, List_Strings<char>& out) : auto {query}
		#List_Strings_Back_Inserter : friend struct
		#external_locale : std::locale
	}
}

namespace nuspell {
	class Break_Table <template <class CharT>> {
		+Break_Table()
		+Break_Table(const Table_Str& v)
		+Break_Table(Table_Str&& v)
		-table : Table_Str
		+end_word_breaks() : auto {query}
		+middle_word_breaks() : auto {query}
		-order_entries() : auto
		+start_word_breaks() : auto {query}
		+operator=(const Table_Str& v) : auto&
		+operator=(Table_Str&& v) : auto&
		+operator=(const Range& range) : auto&
		-end_word_breaks_last_idx : size_t
		-start_word_breaks_last_idx : size_t
		+StrT : using
		+Table_Str : using
		+const_iterator : using
		+iterator : using
	}
}

namespace nuspell {
	class Casing {
	}
}

namespace nuspell {
	class Compound_Check_Pattern {
		+first_word_flag : char16_t
		+second_word_flag : char16_t
		+first_word_end : string
		+replacement : string
		+second_word_begin : string
		+string : using
	}
}

namespace nuspell {
	class Compound_Pattern <template <class CharT>> {
		+replacement : StrT
		+begin_end_chars : String_Pair<CharT>
		+match_first_only_unaffixed_or_zero_affixed : bool
		+first_word_flag : char16_t
		+second_word_flag : char16_t
		+StrT : using
	}
}

namespace nuspell {
	class Compound_Rule_Table {
		+Compound_Rule_Table()
		+Compound_Rule_Table(const std::vector<std::u16string>& tbl)
		+Compound_Rule_Table(std::vector<std::u16string>&& tbl)
		-all_flags : Flag_Set
		+empty() : auto {query}
		-fill_all_flags() : auto
		+has_any_of_flags(const Flag_Set& f) : auto {query}
		+match_any_rule(const std::vector<const Flag_Set*> data) : auto {query}
		+operator=(const std::vector<std::u16string>& tbl) : auto
		+operator=(std::vector<std::u16string>&& tbl) : auto
		-rules : std::vector<std::u16string>
	}
}

namespace nuspell {
	class Compounding_Result {
		+const_pointer() {query}
		+operator->() : auto {query}
		+operator*() : auto& {query}
	}
}

namespace nuspell {
	class Condition <template <class CharT>> {
		+Condition()
		+Condition(const StrT& condition)
		+Condition(StrT&& condition)
		-cond : StrT
		-construct() : auto
		+match(const StrT& s, size_t pos, size_t len) : auto {query}
		+match_prefix(const StrT& s) : auto {query}
		+match_suffix(const StrT& s) : auto {query}
		-length : size_t
		+StrT : using
		+tuple : using
		+vector : using
		-spans : vector<tuple<size_t, size_t, Span_Type> >
	}
}

namespace nuspell {
	class Dict_Base {
		+Dict_Base()
		+add_sug_if_correct(std::basic_string<CharT>& word, OutIter& out) : auto {query}
		+affix_NOT_valid(const Prefix<CharT>& a) : auto {query}
		+affix_NOT_valid(const Suffix<CharT>& a) : auto {query}
		+bad_char_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+check_compound(std::basic_string<CharT>& word) : auto {query}
		+check_compound(std::basic_string<CharT>& word, size_t start_pos, size_t num_part, std::basic_string<CharT>& part) : auto {query}
		+check_compound_classic(std::basic_string<CharT>& word, size_t start_pos, size_t i, size_t num_part, std::basic_string<CharT>& part) : auto {query}
		+check_compound_with_pattern_replacements(std::basic_string<CharT>& word, size_t start_pos, size_t i, size_t num_part, std::basic_string<CharT>& part) : auto {query}
		+check_compound_with_rules(std::basic_string<CharT>& word, std::vector<const Flag_Set*>& words_data, size_t start_pos, std::basic_string<CharT>& part) : auto {query}
		+check_word(std::basic_string<CharT>& s) : auto {query}
		+check_word_in_compound(std::basic_string<CharT>& s) : auto {query}
		+extra_char_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+forgotten_char_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+is_circumfix(const AffixT& a) : auto {query}
		+is_valid_inside_compound(const Flag_Set& flags) : auto {query}
		+keyboard_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+map_suggest(std::basic_string<CharT>& word, OutIter out, size_t i) : auto {query}
		+outer_affix_NOT_valid(const AffixT& a) : auto {query}
		+rep_suggest(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+spell_break(std::basic_string<CharT>& s, size_t depth) : auto {query}
		+spell_casing(std::basic_string<CharT>& s) : auto {query}
		+spell_casing_title(std::basic_string<CharT>& s) : auto {query}
		+spell_casing_upper(std::basic_string<CharT>& s) : auto {query}
		+spell_priv(const std::basic_string<CharT>& s) : auto {query}
		+spell_priv(std::basic_string<CharT>& s) : auto {query}
		+spell_sharps(std::basic_string<CharT>& base, size_t n_pos, size_t n, size_t rep) : auto {query}
		+strip_2_pfx_sfx_3(const Prefix<CharT>& pe1, const Prefix<CharT>& pe2, std::basic_string<CharT>& word) : auto {query}
		+strip_2_prefixes_then_suffix(std::basic_string<CharT>& word) : auto {query}
		+strip_2_sfx_pfx_3(const Suffix<CharT>& se1, const Suffix<CharT>& se2, std::basic_string<CharT>& word) : auto {query}
		+strip_2_suffixes_then_prefix(std::basic_string<CharT>& s) : auto {query}
		+strip_p_s_p_3(const Prefix<CharT>& pe1, const Suffix<CharT>& se1, std::basic_string<CharT>& word) : auto {query}
		+strip_pfx_2_sfx_3(const Prefix<CharT>& pe1, const Suffix<CharT>& se1, std::basic_string<CharT>& s) : auto {query}
		+strip_pfx_then_pfx_2(const Prefix<CharT>& pe1, std::basic_string<CharT>& s) : auto {query}
		+strip_pfx_then_sfx_2(const Prefix<CharT>& pe, std::basic_string<CharT>& s) : auto {query}
		+strip_pfx_then_sfx_comm_2(const Prefix<CharT>& pe, std::basic_string<CharT>& word) : auto {query}
		+strip_prefix_only(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_suffix_prefix(std::basic_string<CharT>& word) : auto {query}
		+strip_prefix_then_2_suffixes(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_then_prefix(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_then_suffix(std::basic_string<CharT>& s) : auto {query}
		+strip_prefix_then_suffix_commutative(std::basic_string<CharT>& word) : auto {query}
		+strip_s_p_s_3(const Suffix<CharT>& se1, const Prefix<CharT>& pe1, std::basic_string<CharT>& word) : auto {query}
		+strip_sfx_2_pfx_3(const Suffix<CharT>& se1, const Prefix<CharT>& pe1, std::basic_string<CharT>& s) : auto {query}
		+strip_sfx_then_pfx_2(const Suffix<CharT>& se, std::basic_string<CharT>& s) : auto {query}
		+strip_sfx_then_sfx_2(const Suffix<CharT>& se1, std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_only(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_prefix_suffix(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_then_2_prefixes(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_then_prefix(std::basic_string<CharT>& s) : auto {query}
		+strip_suffix_then_suffix(std::basic_string<CharT>& s) : auto {query}
		+suggest_priv(std::basic_string<CharT>& word, OutIter out) : auto {query}
		+try_rep_suggestion(std::basic_string<CharT>& word, OutIter out) : auto {query}
	}
}

namespace nuspell {
	class Encoding {
		+Encoding()
		+Encoding(const std::string& e)
		+Encoding(std::string&& e)
		+Encoding(const char* e)
		+operatorEnc_Type() {query}
		+string&() {query}
		+empty() : auto {query}
		+is_utf8() : auto {query}
		-normalize_name() : auto
		+value_or_default() : auto
		+operator=(const std::string& e) : auto&
		+operator=(std::string&& e) : auto&
		+operator=(const char* e) : auto&
		+value() : auto& {query}
		-name : std::string
	}
}

namespace nuspell {
	class Encoding_Details {
	}
}

namespace nuspell {
	class Finder {
		-dictionaries : Dict_List
		+add_apacheopenoffice_paths() : auto
		+add_default_paths() : auto
		+add_libreoffice_paths() : auto
		+add_mozilla_paths() : auto
		+begin() : auto {query}
		+end() : auto {query}
		+equal_range(const std::string& dict) : auto {query}
		+find(const std::string& dict) : auto {query}
		+get_dictionary(const std::string& dict) : auto {query}
		+search_dictionaries() : auto
		+{static} search_dictionaries_in_all_paths() : auto
		+get_all_dictionaries() : auto& {query}
		+get_all_paths() : auto& {query}
		-paths : std::vector<std::string>
		-Dict_List : using
		+const_iterator : using
	}
}

namespace nuspell {
	class Hash_Multiset <template <class Value, class Key = Value, class KeyExtract = identity, class Hash = std::hash<Key>, class KeyEqual = std::equal_to<Key>>> {
		+Hash_Multiset()
		+emplace(Args&& a) : auto
		+empty() : auto {query}
		+equal_range(const CompatibleKey& key) : auto {query}
		+equal_range_nonconst_unsafe(const CompatibleKey& key) : auto
		+insert(const_reference value) : auto
		+rehash(size_t count) : auto
		+reserve(size_t count) : auto
		+size() : auto {query}
		-max_load_factor_capacity : size_t
		-sz : size_t
		-{static} max_load_fact : static constexpr float
		-data : std::vector<bucket_type>
		-bucket_type : using
		+const_pointer : using
		+const_reference : using
		+difference_type : using
		+hasher : using
		+key_type : using
		+local_const_iterator : using
		+local_iterator : using
		+pointer : using
		+reference : using
		+size_type : using
		+value_type : using
	}
}

namespace nuspell {
	class List_Strings <template <class CharT>> {
		+List_Strings()
		+List_Strings(size_type n)
		+List_Strings(size_type n, const_reference value)
		+List_Strings(InputIterator first, InputIterator last)
		+List_Strings(std::initializer_list<value_type> il)
		+List_Strings(const List_Strings& other)
		+List_Strings(List_Strings&& other)
		-d : VecT
		+assign(InputIterator first, InputIterator last) : auto
		+begin() : auto
		+begin() : auto {query}
		+capacity() : auto {query}
		+cbegin() : auto {query}
		+cend() : auto {query}
		+clear() : auto
		+crbegin() : auto {query}
		+crend() : auto {query}
		+data() : auto
		+data() : auto {query}
		+emplace(const_iterator pos, Args&& args) : auto
		+empty() : auto {query}
		+end() : auto
		+end() : auto {query}
		+erase(const_iterator position) : auto
		+erase(const_iterator first, const_iterator last) : auto
		+get_allocator() : auto {query}
		+insert(const_iterator pos, const_reference x) : auto
		+insert(const_iterator pos, value_type&& x) : auto
		+insert(const_iterator pos, size_type n, const_reference x) : auto
		+insert(const_iterator pos, InputIterator first, InputIterator last) : auto
		+insert(const_iterator pos, std::initializer_list<value_type> il) : auto
		-insert_priv(const_iterator pos, U&& val) : auto
		+max_size() : auto {query}
		+operator!=(const List_Strings& other) : auto {query}
		+operator<(const List_Strings& other) : auto {query}
		+operator<=(const List_Strings& other) : auto {query}
		+operator==(const List_Strings& other) : auto {query}
		+operator>(const List_Strings& other) : auto {query}
		+operator>=(const List_Strings& other) : auto {query}
		+pop_back() : auto
		+push_back(const_reference x) : auto
		+push_back(value_type&& x) : auto
		+rbegin() : auto
		+rbegin() : auto {query}
		+rend() : auto
		+rend() : auto {query}
		+resize(size_type new_sz) : auto
		+resize(size_type new_sz, const_reference c) : auto
		+size() : auto {query}
		+swap(List_Strings& other) : auto
		+at(size_type n) : auto&
		+at(size_type n) : auto& {query}
		+back() : auto&
		+back() : auto& {query}
		+emplace_back(Args&& args) : auto&
		+emplace_back() : auto&
		+front() : auto&
		+front() : auto& {query}
		+operator=(const List_Strings& other) : auto&
		+operator=(List_Strings&& other) : auto&
		+operator=(std::initializer_list<value_type> il) : auto&
		+operator[](size_type n) : auto&
		+operator[](size_type n) : auto& {query}
		-sz : size_t
		-VecT : using
		+allocator_type : using
		+const_iterator : using
		+const_pointer : using
		+const_reference : using
		+const_reverse_iterator : using
		+difference_type : using
		+iterator : using
		+pointer : using
		+reference : using
		+reverse_iterator : using
		+size_type : using
		+value_type : using
		+assign(size_type n, const_reference value) : void
		+assign(std::initializer_list<value_type> il) : void
		+reserve(size_type n) : void
		+shrink_to_fit() : void
	}
}

namespace nuspell {
	class Prefix <template <class CharT>> {
		+Prefix()
		+Prefix(char16_t flag, bool cross_product, const StrT& strip, const StrT& append, const Flag_Set& cont_flags, const StrT& condition)
		+condition : CondT
		+cont_flags : Flag_Set
		+appending : StrT
		+stripping : StrT
		+check_condition(const StrT& word) : auto {query}
		+to_derived(StrT& word) : auto {query}
		+to_derived_copy(StrT word) : auto {query}
		+to_root(StrT& word) : auto {query}
		+to_root_copy(StrT word) : auto {query}
		+cross_product : bool
		+flag : char16_t
		+CondT : using
		+StrT : using
	}
}

namespace nuspell {
	class Replacement_Table <template <class CharT>> {
		+Replacement_Table()
		+Replacement_Table(const Table_Str& v)
		+Replacement_Table(Table_Str&& v)
		-table : Table_Str
		+any_place_replacements() : auto {query}
		+end_word_replacements() : auto {query}
		-order_entries() : auto
		+start_word_replacements() : auto {query}
		+whole_word_replacements() : auto {query}
		+operator=(const Table_Str& v) : auto&
		+operator=(Table_Str&& v) : auto&
		+operator=(const Range& range) : auto&
		-end_word_reps_last_idx : size_t
		-start_word_reps_last_idx : size_t
		-whole_word_reps_last_idx : size_t
		+StrT : using
		+Table_Str : using
		+const_iterator : using
		+iterator : using
	}
}

namespace nuspell {
	class Similarity_Group <template <class CharT>> {
		+Similarity_Group()
		+Similarity_Group(const StrT& s)
		+chars : StrT
		+parse(const StrT& s) : auto
		+operator=(const StrT& s) : auto&
		+strings : std::vector<StrT>
		+StrT : using
	}
}

namespace nuspell {
	class String_Pair <template <class CharT>> {
		+String_Pair()
		+String_Pair(Str1&& str, size_t i)
		+String_Pair(Str1&& first, Str2&& second)
		-s : StrT
		+first() : auto {query}
		+first(my_string_view<CharT> x) : auto
		+idx() : auto {query}
		+second() : auto {query}
		+second(my_string_view<CharT> x) : auto
		+str() : auto& {query}
		-i : size_t
		-StrT : using
	}
}

namespace nuspell {
	class String_Set <template <class CharT>> {
		+String_Set()
		+String_Set(const StrT& s)
		+String_Set(StrT&& s)
		+String_Set(InputIterator first, InputIterator last)
		+String_Set(std::initializer_list<value_type> il)
		+operatorconstStrT&() {query}
		+insert(const StrT& s) : auto
		-lookup(const key_type& x) : auto {query}
		+operator+=(const StrT& s) : auto
		-sort_uniq() : auto
		+data() : auto& {query}
		+operator=(const StrT& s) : auto&
		+operator=(StrT&& s) : auto&
		+operator=(std::initializer_list<value_type> il) : auto&
		+contains(const key_type& x) : bool {query}
		+empty() : bool {query}
		+operator!=(const String_Set& rhs) : bool {query}
		+operator<(const String_Set& rhs) : bool {query}
		+operator<=(const String_Set& rhs) : bool {query}
		+operator==(const String_Set& rhs) : bool {query}
		+operator>(const String_Set& rhs) : bool {query}
		+operator>=(const String_Set& rhs) : bool {query}
		+begin() : const_iterator {query}
		+cbegin() : const_iterator {query}
		+cend() : const_iterator {query}
		+end() : const_iterator {query}
		+find(const key_type& x) : const_iterator {query}
		+lower_bound(const key_type& x) : const_iterator {query}
		+upper_bound(const key_type& x) : const_iterator {query}
		+crbegin() : const_reverse_iterator {query}
		+crend() : const_reverse_iterator {query}
		+rbegin() : const_reverse_iterator {query}
		+rend() : const_reverse_iterator {query}
		+begin() : iterator
		+emplace_hint(iterator hint, Args&& args) : iterator
		+end() : iterator
		+erase(iterator position) : iterator
		+erase(iterator first, iterator last) : iterator
		+find(const key_type& x) : iterator
		+insert(iterator hint, const value_type& x) : iterator
		+lower_bound(const key_type& x) : iterator
		+upper_bound(const key_type& x) : iterator
		+key_comp() : key_compare {query}
		+rbegin() : reverse_iterator
		+rend() : reverse_iterator
		+count(const key_type& x) : size_type {query}
		+erase(const key_type& x) : size_type
		+max_size() : size_type {query}
		+size() : size_type {query}
		-d : std::basic_string<CharT>
		+equal_range(const key_type& x) : std::pair<const_iterator , const_iterator> {query}
		+emplace(Args&& args) : std::pair<iterator , bool>
		+insert(const value_type& x) : std::pair<iterator , bool>
		+equal_range(const key_type& x) : std::pair<iterator , iterator>
		+StrT : using
		+allocator_type : using
		+const_iterator : using
		+const_pointer : using
		+const_reference : using
		+const_reverse_iterator : using
		+difference_type : using
		+iterator : using
		+key_compare : using
		+key_type : using
		+pointer : using
		+reference : using
		+reverse_iterator : using
		+size_type : using
		+traits_type : using
		+value_compare : using
		+value_type : using
		+value_comp() : value_compare {query}
		+clear() : void
		+insert(InputIterator first, InputIterator last) : void
		+insert(std::initializer_list<value_type> il) : void
		+swap(String_Set& s) : void
	}
}

namespace nuspell::String_Set {
	class String_Set::Char_Traits_Less_Than {
		+operator()(CharT a, CharT b) : auto
	}
}

namespace nuspell {
	class Substr_Replacer <template <class CharT>> {
		+Substr_Replacer()
		+Substr_Replacer(const Table_Pairs& v)
		+Substr_Replacer(const Table_Pairs&& v)
		-table : Table_Pairs
		+replace(StrT& s) : auto {query}
		+replace_copy(StrT s) : auto {query}
		+operator=(const Table_Pairs& v) : auto&
		+operator=(const Table_Pairs&& v) : auto&
		+operator=(const Range& range) : auto&
		+StrT : using
		+Table_Pairs : using
		-sort_uniq() : void
	}
}

namespace nuspell {
	class Suffix <template <class CharT>> {
		+Suffix()
		+Suffix(char16_t flag, bool cross_product, const StrT& strip, const StrT& append, const Flag_Set& cont_flags, const StrT& condition)
		+condition : CondT
		+cont_flags : Flag_Set
		+appending : StrT
		+stripping : StrT
		+check_condition(const StrT& word) : auto {query}
		+to_derived(StrT& word) : auto {query}
		+to_derived_copy(StrT word) : auto {query}
		+to_root(StrT& word) : auto {query}
		+to_root_copy(StrT word) : auto {query}
		+cross_product : bool
		+flag : char16_t
		+CondT : using
		+StrT : using
	}
}

namespace nuspell {
	class Word_List {
		+equal_range(const std::wstring& word) : auto {query}
		+equal_range : using Word_List_Base::
	}
}

namespace nuspell {
	class identity {
		+operator()(T&& t) : constexpr auto&
	}
}

namespace nuspell {
	class sv_eq <template <class CharT>> {
		+operator()(my_string_view<CharT> l, my_string_view<CharT> r) : auto {query}
	}
}

namespace nuspell {
	class sv_hash <template <class CharT>> {
		+operator()(boost::basic_string_view<CharT> s) : auto {query}
	}
}

namespace nuspell {
	enum Affixing_Mode {
		AT_COMPOUND_BEGIN
		AT_COMPOUND_END
		AT_COMPOUND_MIDDLE
		FULL_WORD
	}
}

namespace nuspell {
	enum Flag_Type {
		FLAG_DOUBLE_CHAR
		FLAG_NUMBER
		FLAG_SINGLE_CHAR
		FLAG_UTF8
	}
}

namespace nuspell {
	enum empty {
	}
}

namespace nuspell {
	Aff_Data <|- - Dict_Base
}

namespace nuspell {
	Dict_Base <|- - Basic_Dictionary
}

namespace nuspell {
	Aff_Data "2" o- - Aff_Structures
}

namespace nuspell {
	Aff_Data o- - Compound_Rule_Table
}

namespace nuspell {
	Aff_Data o- - Word_List
}

namespace nuspell {
	Aff_Structures o- - Break_Table
}

namespace nuspell {
	Aff_Structures o- - Compound_Pattern
}

namespace nuspell {
	Aff_Structures o- - Replacement_Table
}

namespace nuspell {
	Aff_Structures o- - Similarity_Group
}

namespace nuspell {
	Aff_Structures "2" o- - Substr_Replacer
}

namespace nuspell {
	Basic_Dictionary o- - Encoding_Details
}

namespace nuspell {
	Compound_Pattern o- - String_Pair
}


@enduml

PlantUML version 1.2018.06(Mon May 21 12:34:53 CEST 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 10.0.2+13-Ubuntu-1ubuntu0.18.04.2
Operating System: Linux
OS Version: 4.15.0-34-generic
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>