@startuml
skinparam backgroundcolor White|White

title Hunspell - Spell (spell)

start

partition "limitation" {
	if (length of word >= maximum word length) then (yes)
		:return FALSE;
		stop
	else (no)
	endif
}

partition "input conversion" {
	if (affix manager exists) then (yes)
		:get input conversion list from affix manager;
		if (input conversion list exists) then (yes)
			:perform input conversion on word;
		else (no)
		endif
	else (no)
	endif
	if (input conversion has changed word) then (yes)
		:clean converted word and store:\n- cleaned word length\n- cleaned word\n- capitalization type\n- abbr. count;
	else (no)
		:clean (original) word and store:\n- cleaned word length\n- cleaned word\n- capitalization type\n- abbr. count;
	endif

	if (client is Mozilla) then (yes)
		:set abbr. count to 1;
	else (no)
	endif

	if (cleaned word length is 0 or hash manager is empty) then (yes)
		:return TRUE;
		stop
	else (no)
	endif
	:empty root;
	note left: can this move\nup to initialization?
}

partition "number state" {
	:determine number state;
	if (number state is NNUM) then (yes)
		:return TRUE;
		note left: word consists\nof only numbers
		stop
	else (no)
	endif
}

partition "check word" {
	:set root value to result of check_word\naccording depending on cleaned word case;
	note left: see other activity diagrams
}

partition "forbidden words" {
	:TODO deal with forbidden words;
}

partition "spell" {
	:return result recursive call to this spell algorithm depending on break patterns;
	note left: see other activity diagram
}

partition "default" {
	:return FALSE;
}

stop

@enduml
