@startuml
!include skin.iuml

title Nuspell - segmentation - //""word_breakables(s)""//\n

start

:initialize empty vector **""result""** which can hold integers;
if (**""s""** is empty?) then (yes)
    :return **""result""**;
    stop
else (no)
endif

floating note left
    __""1""__ for "break" and __""0""__ for "do not break". The length of
    the vector will be the same as len(s).

    **""s""** must be a Unicode string
    
    ""assert(list(word_breakables(u"ABC")) ==""
    "        {1, 0, 0});""

    ""assert(list(word_breakables(u"Hello, world.")) ==""
    ""       {1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1});""

    ""assert(list(word_breakables(u"\x01\u0308\x01")) ==""
    ""       {1, 0, 1});""
end note

:set **""primitive_boundaties""** to list of //""preprocess_boundaries(s)""//;
:set **""prev_prev_wb""** to __""nullptr""__;
:set **""prev_wb""** to __""nullptr""__;
:set **""prev_pos""** to __""0""__;

while (iterate **""i, pair<pos, wb>""** over <back:skyblue>//""enumerate(primitive_boundaries)""//</back>?) is (yes)
    :set **""next_pos, next_wb""** to <back:skyblue>//""<TODO>""//</back>;
    if (**""prev_wn""** is in ""__(Newline, CR, LF)__"" or **""wb""** is in __""(Newline, CR, LF)""__?) then (yes)
        :set **""do_break""** to __""TODO""__;
    elseif (**""prev_wb""** equals **""wb""** equals __""ALetter""__?) then (yes)
        :TODO;
    elseif (TODO?) then (yes)
        :TODO;
    elseif (TODO?) then (yes)
        -[#black]-> WB6;
        :set **""do_break""** to __""false__"";
    elseif (TODO?) then (yes)
        -[#black]-> WB7;
        :set **""do_break""** to __""false__"";
    elseif (TODO?) then (yes)
        -[#black]-> WB8;
        :set **""do_break""** to __""false__"";
    elseif (TODO?) then (yes)
        -[#black]-> WB9;
        :set **""do_break""** to __""false__"";
    else (no)
    endif

    if (TODO?) then (yes)
        -[#black]-> WB10;
        :set **""do_break""** to __""false__"";
    elseif (TODO?) then (yes)
        -[#black]-> WB11;
        :set **""do_break""** to __""false__"";
    elseif (TODO?) then (yes)
        -[#black]-> WB12;
        :set **""do_break""** to __""false__"";
    elseif (**""prev_wb""** is **""wb""** is __""Katakana""__\nor (**""prev_wb""** is in __""(ALetter, Numeric, Katakana, ExtendNumLet)""__ and **""wb""** is __""ExtendNumLet""__)\nor (**""prev_wb""** is __""ExtendNumLet""__ and **""wb""** is in __""(ALetter, Numeric, Katakana)""__?) then (yes)
        -[#black]-> WB13, WB13a, WB13b;
        :set **""do_break""** to __""false__"";
    elseif (**""prev_wb""** is **""wb""** is __""Regional_Indicator""__?) then (yes)
        -[#black]-> WB13c;
        :set **""do_break""** to __""false__"";
    else (no)
        -[#black]-> WB14;
        :set **""do_break""** to __""true__"";
    endif

    while (iterate **""j""** over //""range(next_pos-pos)""//?) is (yes)
        :add pair **""i, prop""** to **""result""**;
    endwhile (no)
    :set **""prev_pos""** to **""pos""**;
    :set **""prev_prev_wb""** to **""prev_wb""**;
    :set **""prev_wb""** to **""wb""**;
endwhile (no)

    :return **""result""**;

stop

@enduml
