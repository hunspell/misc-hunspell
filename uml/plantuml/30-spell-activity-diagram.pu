@startuml
skinparam backgroundcolor White|White

title Hunspell - Check Spelling - bool spell(word, info, root)

start
floating note: Return FALSE is implied.

partition "initialazition" {
	:reset I/O parameter info;
	if (word length exceeds maximum?) then (yes)
		stop
	else (no)
	endif
}

partition "input conversion" {
	if (input conversion available?) then (yes)
		:perform input conversion on word;
	else (no)
	endif
	if (input conversion changed word?) then (yes)
		:clean converted word and store:\n- cleaned word length\n- cleaned word\n- capitalization type "captype"\n- abbreviation count "abbv";
	else (no)
		:clean (original) word and store:\n- cleaned word length\n- cleaned word\n- capitalization type "captype"\n- abbreviation count "abbv";
	endif

	if (client is Mozilla) then (yes)
		:set abbreviation count to 1;
	else (no)
	endif

	if (cleaned word length is 0 OR hash manager is empty?) then (yes)
		:return TRUE;
		stop
	else (no)
	endif
	:reset root;
}

partition "numbers and numeric separators" {
	:determine number state for cleaned word;
	if (cleaned word is a number?) then (yes)
		:return TRUE;
		stop
	else (no)
	endif
}

partition "capitalization type" {
	if (captype is camel case, pascal case OR lower/neutral case?) then(yes)
		if (captype is camel case OR pascal case?) then(yes)
			:add SPELL_ORIGCAP to info;
		else (no)
		endif
		#skyblue:root = check_word(cleaned word, info, root);
		if (abbv > 0 AND no root?) then (yes)
			#skyblue:root = check_word(cleaned word period added at end, info, root);
		else (no)
		endif
	else (no)
		#skyblue:Check Spelling A\nspell upper or capitalized;
	endif
}

partition "forbidden words" {
	if (root?) then (yes)
		if (warning flag is present in root's flags?) then (yes)
			:add SPELL_WARN to info;
			if (generic setting forbids warnings?) then (yes)
				stop
			else (no)
			endif
			:return TRUE;
			stop
		else (no)
		endif
		:return TRUE;
		stop
	else (no)
	endif
}

partition "recursive breaking at break points" {
	#skyblue:Check Spelling B\nrecurse breakpoints;
}

stop

@enduml
