@startuml
skinparam backgroundcolor White|White

title Hunspell - AffixMgr::suffix_check(word)\n"check word for suffixes"\n

start
floating note: When called from affix_check(word) default is\nalways used for in_compound, needflag, sfxopts, ppfx, cclass.\nReturn NULL is implied.

#silver:do not reset any compound helpers;
while (iterate zero-length suffixes?) is (yes)
	if (
no continuation classes are provided to this method
OR
the suffix entry under consideration has continuation classes
	) then (yes)
		if (
    1.a this method was not called from compounding related to the beginning part "suffixes are not allowed in beginning of compounds"
    OR
    1.b continuation classes of the suffix entry under consideration does contain generic compoundpermitflag flag
AND
    2.a there is no generic circumfix flag
    OR
    2.b continuation classes of the provided prefix entry and suffix entry under consideration do not contain generic circumfix flag
    OR
    2.c continuation classes of the provided prefix entry and suffix entry under consideration do both contain generic circumfix flag	
AND
    3 the continuation classes of the suffix entry under consideration does not contain generic onlyincompound flag "fogemorpheme"
AND
    "needaffix on prefix or first suffix"
    4.a continuation class is provided to this method
    OR
    4.b continuation classes of the provided prefix entry does not contain generic needaffix flag
    OR
    4.c continuation classes of the suffix entry under consideration does not contain generic needaffix flag
		) then (yes)
			#tomato:root = SuffixEntry::checkword(word,(in_compound?0:onlyincompound));
			if (root?) then (yes)
				#silver:set compound helper sfx;
				:return root;
				stop
			else (no)
			endif
		else (no)
		endif
	else (no)
	endif
endwhile (no)

if (length of word is 0? "full strip") then (yes)
	floating note: TODO Figure out what triggers this
	stop
else (no)
endif

:iterator starts at (word + len - 1) instead of (word);
floating note: TODO Figure out\nwhat this does,\nprobably to skip\nunimportant part
while (iterate non-zero-length suffixes?) is (yes)
	if (
is SuffixEntry.getKey() a revsubset of word?
	) then (yes)
		floating note: getKey() returns rappnd\nbeing reverse append,\nrevsubset is tested with\nAffixMgr::isRevSubset
		if (SAME CONDITIONS AS ABOVE) then (yes)
			if (
this method was not called from compounding related to the end part
OR
prefix entry was provided
OR
continuation classes of the suffix entry under consideration does not contain generic onlyincompound flag
			) then (yes)
				#tomato:root = SuffixEntry::checkword(word,(in_compound?0:onlyincompound));
				if (root?) then (yes)
					#silver:set compound helper sfx, sfxflag;
					if (
the suffix entry under consideration has no continuation classes?
					) then (yes)
						#silver:set compound helper sfxappend to SuffixEntry.getKey();
					else (no)
						if (TODO: SOME HUNGARIAN CONDITION?) then (yes)
							#violet:set compound helper sfxextra;
						else (no)
						endif
					endif
					:return root;
					stop
				else (no)
				endif
			else (no)
			endif
		else (no)
		endif
	else (no)
	endif
endwhile (no)

stop

@enduml
