<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="129px" preserveAspectRatio="none" style="width:938px;height:129px;background:#000000;" version="1.1" viewBox="0 0 938 129" width="938px" zoomAndPan="magnify"><defs/><g><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="931" x="5" y="17.9951">[From /home/sander/workspace/misc-hunspell/uml/plantuml/spell-recurse-breakpoints-activity-diagram.pu (line 24) ]</text><line style="stroke: #33FF02; stroke-width: 1.0;" x1="5" x2="936" y1="26.2969" y2="26.2969"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="187" x="5" y="44.292">... (skipping 20 lines) ...</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="236" x="45" y="60.5889">while (iterate TODO?) is (yes)</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="165" x="85" y="76.8857">:increment nbr by 1;</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="538" x="85" y="93.1826">:increment pos with length of the word break under consideration;</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="100" x="45" y="109.4795">endwile (no)</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="10" y="125.7764"/><text fill="#FF0000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="108" x="10" y="125.7764">Syntax Error?</text><!--
@startuml
skinparam backgroundcolor White|White

title Hunspell - Check Spelling B - recurse breakpoints

start

if (word breaks are not available OR info holds SPELL_FORBIDDEN) then (yes)
	stop
else (no)
endif

:set number of breaks to 0 "nbr";
:set word length for cleaned word "wl";

while (iterate word breaks?) is (yes)
	note left
"calculate break points for recursion limit"
	end note
	:set pos to 0;
	while (iterate TODO?) is (yes)
		:increment nbr by 1;
		:increment pos with length of the word break under consideration;
	endwile (no)

      while ((pos = scw.find(wordbreak[j], pos)) != std::string::npos) {
        ++nbr;
        pos += wordbreak[j].size();
      }
endwhile (no)

    // 
    for (size_t j = 0; j < wordbreak.size(); ++j) {
    }
    if (nbr >= 10)
      return false;

    // check boundary patterns (^begin and end$)
    for (size_t j = 0; j < wordbreak.size(); ++j) {
      size_t plen = wordbreak[j].size();
      if (plen == 1 || plen > wl)
        continue;

      if (wordbreak[j][0] == '^' &&
          scw.compare(0, plen - 1, wordbreak[j], 1, plen -1) == 0 && spell(scw.substr(plen - 1)))
        return true;

      if (wordbreak[j][plen - 1] == '$' &&
          scw.compare(wl - plen + 1, plen - 1, wordbreak[j], 0, plen - 1) == 0) {
        std::string suffix(scw.substr(wl - plen + 1));
        scw.resize(wl - plen + 1);
        if (spell(scw))
          return true;
        scw.append(suffix);
      }
    }

    // other patterns
    for (size_t j = 0; j < wordbreak.size(); ++j) {
      size_t plen = wordbreak[j].size();
      size_t found = scw.find(wordbreak[j]);
      if ((found > 0) && (found < wl - plen)) {
        if (!spell(scw.substr(found + plen)))
          continue;
        std::string suffix(scw.substr(found));
        scw.resize(found);
        // examine 2 sides of the break point
        if (spell(scw))
          return true;
        scw.append(suffix);

        // LANG_hu: spec. dash rule
        if (langnum == LANG_hu && wordbreak[j] == "-") {
          suffix = scw.substr(found + 1);
          scw.resize(found + 1);
          if (spell(scw))
            return true;  // check the first part with dash
          scw.append(suffix);
        }
        // end of LANG specific region
      }
    }


stop

@enduml

PlantUML version 1.2018.01(Sun Jan 28 19:08:22 CET 2018)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 1.8.0_151-8u151-b12-0ubuntu0.17.10.2-b12
Operating System: Linux
OS Version: 4.13.0-36-generic
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>