AffixFile
         ::= Compounding



Compounding
         ::=
         BreakDefinition?
         CompoundRule*
         CompoundMin?
         CompoundFlag?
         CompoundBegin?
         CompoundLast?
         CompoundMiddle?
         OnlyinCompound?
         CompoundPermitFlag?
         CompoundForbidFlag?
         CompoundRoot?
         CompoundWordMax?
         SimplifiedTriple?
         CheckCompoundTriple?
         CheckCompoundCase?
         CheckCompoundRep?
         CheckCompoundDup?
         CheckCompoundPattern?
         CompoundSyllable?
         SyllableNum?



BreakDefinition
         ::= 'BREAK' WS PosNumberInclZero LE
           ( 'BREAK' WS BreakChar BreakChar? LE )*
CompoundRule
         ::= 'COMPOUNDRULE' WS PosNumberInclZero LE
           ( 'COMPOUNDRULE ' Compound LE )*
CompoundMin
         ::= 'COMPOUNDMIN ' WS PosNumberInclZero LE
CompoundFlag
         ::= 'COMPOUNDFLAG' WS Flag LE
CompoundBegin
         ::= 'COMPOUNDBEGIN' WS Flag LE
CompoundLast
         ::= 'COMPOUNDLAST' WS Flag LE
CompoundMiddle
         ::= 'COMPOUNDMIDDLE' WS Flag LE
OnlyinCompound
         ::= 'ONLYINCOMPOUND' WS Flag LE
CompoundPermitFlag
         ::= 'COMPOUNDPERMITFLAG' WS Flag LE
CompoundForbidFlag
         ::= 'COMPOUNDFORBIDFLAG' WS Flag LE
CompoundRoot
         ::= 'COMPOUNDROOT' WS Flag LE
CompoundWordMax
         ::= 'COMPOUNDWORDMAX' WS PosNumberExclZero LE
SimplifiedTriple
         ::= 'SIMPLIFIEDTRIPLE' LE
CheckCompoundTriple
         ::= 'CHECKCOMPOUNDTRIPLE' LE
CheckCompoundCase
         ::= 'CHECKCOMPOUNDCASE' LE
CheckCompoundRep
         ::= 'CHECKCOMPOUNDREP' LE
CheckCompoundDup
         ::= 'CHECKCOMPOUNDDUP' LE
CheckCompoundPattern
         ::= 'CHECKCOMPOUNDPATTERN' WS PosNumberInclZero
           ( 'CHECKCOMPOUNDPATTERN' WS CompoundPattern )*
CompoundSyllable
         ::= 'COMPOUNDSYLLABLE' WS PosNumberExclZero WS Char+ LE
SyllableNum
         ::= 'SYLLABLENUM' WS Flag+ LE



BreakChar
         ::= NonWhiteSpaceCharASCII
Compound
         ::= ( ( FlagASCII | FlagUTF8 | '(' ( FlagASCII FlagASCII? | PosNumberExclZero ) ')' ) ( '*' | '?' )? )+
Flag
         ::= FlagASCII FlagASCII?
           | FlagUTF8
           | PosNumberExclZero ( ',' PosNumberExclZero )*
FlagASCII
         ::= NonWhiteSpaceCharASCII
FlagUTF8
         ::= NonWhiteSpaceCharUTF8
CompoundPattern
         ::= Pattern WS Pattern ( WS NonWhiteSpaceCharUTF8+ )?
Pattern
         ::= ( NonWhiteSpaceCharUTF8+ | NonWhiteSpaceCharUTF8* '/' Flag )
LE
         ::= ( Comment? EOL )+ /* line ending */
Comment
         ::= ( WS CharUTF8* )? ( '#' CharUTF8* )?



CharUTF8
         ::= TODO /* space, tap, no control chars  */
NonWhiteSpaceCharUTF8
         ::= TODO /* no control chars, no tab, no space, etc. */
NonWhiteSpaceCharASCII
         ::= [#x21-#x7e] /* no control chars, no tab, no space */
PosNumberInclZero
         ::= '0' | DigitExclZero DigitInclZero*
PosNumberExclZero
         ::= DigitExclZero DigitInclZero*
DigitInclZero
         ::= '0' | DigitExclZero
DigitExclZero
         ::= [1-9]
WS
         ::= ( WhiteSpaceChars )+
WhiteSpaceChars
         ::= [#x09#x20] /* tab, space */
EOL
         ::= ( #x0d #x0a? | #x0a ) /* carriage return, line feed */
