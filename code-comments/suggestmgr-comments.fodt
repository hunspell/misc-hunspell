<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rpt="http://openoffice.org/2005/report" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:officeooo="http://openoffice.org/2009/office" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:css3t="http://www.w3.org/TR/css3-text/" office:version="1.2" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><dc:date>2018-09-20T12:14:15.169728462</dc:date><meta:editing-duration>P1DT10H12M30S</meta:editing-duration><meta:editing-cycles>39</meta:editing-cycles><meta:generator>LibreOffice/6.0.3.2$Linux_X86_64 LibreOffice_project/00m0$Build-2</meta:generator><meta:document-statistic meta:table-count="0" meta:image-count="0" meta:object-count="0" meta:page-count="34" meta:paragraph-count="2159" meta:word-count="10316" meta:character-count="71096" meta:non-whitespace-character-count="52773"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">463412</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">1783</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">24901</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">23982</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">8019</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">470849</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">1783</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">463412</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">26682</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">487392</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">1</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">95</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
     <config:config-item config:name="AnchoredTextOverflowLegacy" config:type="boolean">false</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TreatSingleColumnBreakAsPageBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">1026170</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="ForbiddenCharacters">
    <config:config-item-map-entry>
     <config:config-item config:name="Language" config:type="string">zxx</config:config-item>
     <config:config-item config:name="Country" config:type="string"/>
     <config:config-item config:name="Variant" config:type="string"/>
     <config:config-item config:name="BeginLine" config:type="string"/>
     <config:config-item config:name="EndLine" config:type="string"/>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbeddedDatabaseName" config:type="string"/>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DisableOffPagePositioning" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="Rsid" config:type="int">6202309</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="MsWordCompTrailingBlanks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PropLineSpacingShrinksFirstLine" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SubtractFlysAnchoredAtFlys" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddVerticalFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink">
    <ooo:library-embedded ooo:name="Standard"/>
   </ooo:libraries>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="Lohit Devanagari1" svg:font-family="&apos;Lohit Devanagari&apos;"/>
  <style:font-face style:name="Courier New" svg:font-family="&apos;Courier New&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="DejaVu Sans Mono" svg:font-family="&apos;DejaVu Sans Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Mono" svg:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Times New Roman" svg:font-family="&apos;Times New Roman&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Lohit Devanagari" svg:font-family="&apos;Lohit Devanagari&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans CJK SC Regular" svg:font-family="&apos;Noto Sans CJK SC Regular&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans Devanagari" svg:font-family="&apos;Noto Sans Devanagari&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#3465a4" draw:fill-color="#729fcf" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.1181in" draw:shadow-offset-y="0.1181in" draw:start-line-spacing-horizontal="0.1114in" draw:start-line-spacing-vertical="0.1114in" draw:end-line-spacing-horizontal="0.1114in" draw:end-line-spacing-vertical="0.1114in" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="zxx" fo:country="none" style:letter-kerning="true" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.4925in" style:writing-mode="page"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="zxx" fo:country="none" style:letter-kerning="true" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text"/>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" loext:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Liberation Sans" fo:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="Noto Sans CJK SC Regular" style:font-family-asian="&apos;Noto Sans CJK SC Regular&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0972in" loext:contextual-spacing="false" fo:line-height="120%"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.0835in" fo:margin-bottom="0.0835in" loext:contextual-spacing="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="12pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;"/>
  </style:style>
  <style:style style:name="Preformatted_20_Text" style:display-name="Preformatted Text" style:family="paragraph" style:parent-style-name="Standard" style:class="html">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Mono" fo:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed" fo:font-size="10pt" style:font-name-asian="DejaVu Sans Mono" style:font-family-asian="&apos;DejaVu Sans Mono&apos;" style:font-family-generic-asian="modern" style:font-pitch-asian="fixed" style:font-size-asian="10pt" style:font-name-complex="Liberation Mono" style:font-family-complex="&apos;Liberation Mono&apos;" style:font-family-generic-complex="modern" style:font-pitch-complex="fixed" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="Numbering_20_Symbols" style:display-name="Numbering Symbols" style:family="text"/>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:list-style style:name="Numbering_20_2" style:display-name="Numbering 2">
   <text:list-level-style-number text:level="1" text:style-name="Numbering_20_Symbols" style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment" fo:text-align="end">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.1965in" fo:text-indent="-0.1965in" fo:margin-left="0.1965in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="2">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.3929in" fo:text-indent="-0.1965in" fo:margin-left="0.3929in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="3">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.7866in" fo:text-indent="-0.3937in" fo:margin-left="0.7866in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="4">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.2791in" fo:text-indent="-0.4925in" fo:margin-left="1.2791in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="5">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.8693in" fo:text-indent="-0.5902in" fo:margin-left="1.8693in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="6">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.5783in" fo:text-indent="-0.7091in" fo:margin-left="2.5783in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="7">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="3.4839in" fo:text-indent="-0.9055in" fo:margin-left="3.4839in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="8">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="4.5075in" fo:text-indent="-1.0236in" fo:margin-left="4.5075in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="9">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="5.6102in" fo:text-indent="-1.1028in" fo:margin-left="5.6102in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="10">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="6.8311in" fo:text-indent="-1.2209in" fo:margin-left="6.8311in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
  </text:list-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.1965in" style:num-format="1" text:number-position="left" text:increment="5"/>
 </office:styles>
 <office:automatic-styles>
  <style:style style:name="P1" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:line-height="100%" fo:text-align="start" style:justify-single-word="false" fo:hyphenation-ladder-count="no-limit" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:writing-mode="lr-tb">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:style>
  <style:style style:name="P2" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:line-height="100%" fo:text-align="start" style:justify-single-word="false" fo:hyphenation-ladder-count="no-limit" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="ideograph-alpha" style:punctuation-wrap="simple" style:line-break="strict" style:writing-mode="lr-tb">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:style>
  <style:style style:name="P3" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:background-color="#fff200"/>
  </style:style>
  <style:style style:name="P4" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:background-color="transparent"/>
  </style:style>
  <style:style style:name="P5" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:background-color="#b2b2b2"/>
  </style:style>
  <style:style style:name="P6" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties fo:font-size="12pt"/>
  </style:style>
  <style:style style:name="P7" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="Numbering_20_2"/>
  <style:style style:name="P8" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="Numbering_20_2">
   <style:text-properties fo:background-color="#b2b2b2"/>
  </style:style>
  <style:style style:name="P9" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="Numbering_20_2">
   <style:text-properties fo:background-color="#b2b2b2"/>
  </style:style>
  <style:style style:name="P10" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="Numbering_20_2">
   <style:text-properties fo:background-color="transparent"/>
  </style:style>
  <style:style style:name="P11" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="Numbering_20_2">
   <style:text-properties fo:background-color="#fff200"/>
  </style:style>
  <style:style style:name="P12" style:family="paragraph">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" fo:line-height="100%" fo:text-align="start" fo:text-indent="0in" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:writing-mode="lr-tb">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:hyphenate="false"/>
  </style:style>
  <style:style style:name="P13" style:family="paragraph">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" fo:line-height="100%" fo:text-align="start" fo:text-indent="0in" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:writing-mode="lr-tb">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:hyphenate="false"/>
  </style:style>
  <style:style style:name="T1" style:family="text">
   <style:text-properties fo:background-color="#fff200" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T2" style:family="text">
   <style:text-properties fo:background-color="#fff200" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T3" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" style:use-window-font-color="true" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Liberation Serif" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" loext:char-shading-value="0" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T4" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" style:use-window-font-color="true" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Courier New" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" loext:char-shading-value="0" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T5" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Liberation Serif" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" loext:char-shading-value="0" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T6" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Times New Roman" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" loext:char-shading-value="0" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Noto Sans Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T7" style:family="text">
   <style:text-properties fo:background-color="#ffffff" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T8" style:family="text">
   <style:text-properties fo:font-weight="bold" fo:background-color="#fff200" loext:char-shading-value="0" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T9" style:family="text">
   <style:text-properties fo:background-color="transparent" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T10" style:family="text">
   <style:text-properties fo:background-color="#faa61a" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T11" style:family="text">
   <style:text-properties fo:background-color="#ef413d" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T12" style:family="text">
   <style:text-properties fo:background-color="#adc5e7" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T13" style:family="text">
   <style:text-properties fo:background-color="#e0efd4" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T14" style:family="text">
   <style:text-properties fo:background-color="#72bf44" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T15" style:family="text">
   <style:text-properties fo:background-color="#bcaed5" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T16" style:family="text">
   <style:text-properties fo:background-color="#c7a0cb" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T17" style:family="text">
   <style:text-properties fo:background-color="#b2b2b2" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T18" style:family="text">
   <style:text-properties fo:background-color="#7da7d8" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T19" style:family="text">
   <style:text-properties fo:background-color="#7da7d8" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T20" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" style:use-window-font-color="true" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Liberation Serif" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T21" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" style:use-window-font-color="true" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Liberation Serif" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T22" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" style:use-window-font-color="true" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Courier New" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="8.2681in" fo:page-height="11.6929in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="0.5118in" fo:margin-bottom="0.5118in" fo:margin-left="0.5902in" fo:margin-right="0.5902in" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="20" style:layout-grid-base-height="0.278in" style:layout-grid-ruby-height="0.139in" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="false" style:layout-grid-display="false" style:footnote-max-height="0in">
    <style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1"/>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <office:forms form:automatic-focus="false" form:apply-design-mode="false"/>
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
   </text:sequence-decls>
   <text:list xml:id="list3121169007" text:style-name="Numbering_20_2">
    <text:list-item>
     <text:p text:style-name="P8">/* ***** BEGIN LICENSE BLOCK *****</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* Version: MPL 1.1/GPL 2.0/LGPL 2.1</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* Copyright (C) 2002-2017 Németh László</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* The contents of this file are subject to the Mozilla Public License Version</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* 1.1 (the &quot;License&quot;); you may not use this file except in compliance with</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* the License. You may obtain a copy of the License at</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* http://www.mozilla.org/MPL/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* Software distributed under the License is distributed on an &quot;AS IS&quot; basis,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* for the specific language governing rights and limitations under the</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* License.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* Hunspell is based on MySpell which is Copyright (C) 2002 Kevin Hendricks.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* Contributor(s): David Einstein, Davide Prina, Giuseppe Modugno,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* Gianluca Turconi, Simon Brouwer, Noll János, Bíró Árpád,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* Goldman Eleonóra, Sarlós Tamás, Bencsáth Boldizsár, Halácsy Péter,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* Dvornik László, Gefferth András, Nagy Viktor, Varga Dániel, Chris Halls,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* Rene Engelhard, Bram Moolenaar, Dafydd Jones, Harri Pitkänen</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* Alternatively, the contents of this file may be used under the terms of</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* either the GNU General Public License Version 2 or later (the &quot;GPL&quot;), or</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* the GNU Lesser General Public License Version 2.1 or later (the &quot;LGPL&quot;),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* in which case the provisions of the GPL or the LGPL are applicable instead</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* of those above. If you wish to allow use of your version of this file only</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* under the terms of either the GPL or the LGPL, and not to allow others to</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* use your version of this file under the terms of the MPL, indicate your</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* decision by deleting the provisions above and replace them with the notice</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* and other provisions required by the GPL or the LGPL. If you do not delete</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* the provisions above, a recipient may use your version of this file under</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* the terms of any one of the MPL, the GPL or the LGPL.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* ***** END LICENSE BLOCK ***** */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">/*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* Copyright 2002 Kevin B. Hendricks, Stratford, Ontario, Canada</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* And Contributors. <text:s/>All rights reserved.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* Redistribution and use in source and binary forms, with or without</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* modification, are permitted provided that the following conditions</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* are met:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* 1. Redistributions of source code must retain the above copyright</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* <text:s text:c="3"/>notice, this list of conditions and the following disclaimer.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* 2. Redistributions in binary form must reproduce the above copyright</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* <text:s text:c="3"/>notice, this list of conditions and the following disclaimer in the</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* <text:s text:c="3"/>documentation and/or other materials provided with the distribution.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* 3. All modifications to the source code must be clearly marked as</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* <text:s text:c="3"/>such. <text:s/>Binary redistributions based on modified source code</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* <text:s text:c="3"/>must be clearly marked as modified versions in the documentation</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* <text:s text:c="3"/>and/or other materials provided with the distribution.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* THIS SOFTWARE IS PROVIDED BY KEVIN B. HENDRICKS AND CONTRIBUTORS</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* ``AS IS&apos;&apos; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. <text:s/>IN NO EVENT SHALL</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* KEVIN B. HENDRICKS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:soft-page-break/><text:s/>* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>* SUCH DAMAGE.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">#include &lt;stdlib.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">#include &lt;string.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">#include &lt;stdio.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">#include &lt;ctype.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">#include &quot;suggestmgr.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">#include &quot;htypes.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">#include &quot;csutil.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">const w_char W_VLINE = {&apos;\0&apos;, &apos;|&apos;};</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">SuggestMgr::<office:annotation office:name="__Annotation__10618_3335985759">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T10:02:32.486093822</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Construct and initialize</text:span></text:p>
      </office:annotation><text:span text:style-name="T10">SuggestMgr</text:span><office:annotation-end office:name="__Annotation__10618_3335985759"/>(<office:annotation office:name="__Annotation__10617_3335985759">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T10:01:04.476462057</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">For </text:span><text:span text:style-name="T22">en_US</text:span><text:span text:style-name="T20">.aff the value for </text:span><text:span text:style-name="T22">TRY</text:span><text:span text:style-name="T20"> is </text:span><text:span text:style-name="T22">esianrtolcdugmphbyfvkwzESIANRTOLCDUGMPHBYFVKWZ&apos;</text:span></text:p>
      </office:annotation>const char* tryme<office:annotation-end office:name="__Annotation__10617_3335985759"/>, <office:annotation office:name="__Annotation__10616_3335985759">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T09:58:30.297607383</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MAXSUGGESTION 15</text:span></text:p>
      </office:annotation>unsigned int maxn<office:annotation-end office:name="__Annotation__10616_3335985759"/>, AffixMgr* aptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// register affix manager and check in string of chars to</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// try when building candidate suggestions</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>pAMgr = aptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>csconv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>ckeyl = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>ckey = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>ctryl = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>ctry = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>utf8<text:span text:style-name="T7"> =</text:span> 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>langnum = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>complexprefixes = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>maxSug = maxn;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>nosplitsugs = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><office:annotation office:name="__Annotation__10615_3335985759">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T09:56:08.935057657</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MAXNGRAMSUGS 4</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MAXPHONSUGS 2</text:span></text:p>
      </office:annotation><text:s text:c="2"/>maxngramsugs = MAXNGRAMSUGS;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>maxcpdsugs = MAXCOMPOUNDSUGS;<office:annotation-end office:name="__Annotation__10615_3335985759"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (pAMgr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>langnum = pAMgr-&gt;<text:span text:style-name="T18">get_langnum</text:span>();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>ckey = pAMgr-&gt;<office:annotation office:name="__Annotation__6076_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T16:01:37.654305018</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define SPELL_KEYSTRING &quot;qwertyuiop|asdfghjkl|zxcvbnm&quot;</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20"/></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Overwritten by </text:span><text:span text:style-name="T22">KEY</text:span><text:span text:style-name="T20"> definitiona in affix file.</text:span></text:p>
      </office:annotation><text:span text:style-name="T18">get_key_string</text:span><office:annotation-end office:name="__Annotation__6076_2571519391"/>();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>nosplitsugs = pAMgr-&gt;<text:span text:style-name="T18">get_nosplitsugs</text:span>();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (pAMgr-&gt;<text:span text:style-name="T18">get_maxngramsugs</text:span>() &gt;= 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>maxngramsugs = pAMgr-&gt;<text:span text:style-name="T18">get_maxngramsugs</text:span>();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>utf8 = pAMgr-&gt;get_utf8();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (pAMgr-&gt;<text:span text:style-name="T18">get_maxcpdsugs</text:span>() &gt;= 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>maxcpdsugs = pAMgr-&gt;<text:span text:style-name="T18">get_maxcpdsugs</text:span>();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (!utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>csconv = get_current_cs(pAMgr-&gt;<text:span text:style-name="T18">get_encoding</text:span>());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>complexprefixes = pAMgr-&gt;<text:span text:style-name="T18">get_complexprefixes</text:span>();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P10"><text:s text:c="2"/>if (ckey) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>ckeyl = u8_u16(ckey_utf, ckey);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>ckeyl = strlen(ckey);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (tryme) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>ctry = mystrdup(tryme);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (ctry)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>ctryl = strlen(ctry);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:soft-page-break/><text:s text:c="4"/>if (ctry &amp;&amp; utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>ctryl = u8_u16(ctry_utf, tryme);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">SuggestMgr::<office:annotation office:name="__Annotation__10619_3335985759">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T10:02:44.662291256</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Destruct and free memory</text:span></text:p>
      </office:annotation><text:span text:style-name="T10">~SuggestMgr</text:span><office:annotation-end office:name="__Annotation__10619_3335985759"/>() {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>pAMgr = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (ckey)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>free(ckey);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>ckey = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>ckeyl = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (ctry)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>free(ctry);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>ctry = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>ctryl = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>maxSug = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">#ifdef MOZILLA_CLIENT</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>delete[] csconv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">void SuggestMgr::<office:annotation office:name="__Annotation__5076_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T14:03:35.058291526</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Add a candidate word to list of suggestion only if it checks out to be a correct word and maximum of canidates hasn&apos;t been reached yet</text:span></text:p>
      </office:annotation><text:span text:style-name="T10">testsug</text:span><office:annotation-end office:name="__Annotation__5076_2571519391"/>(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="24"/>const std::string&amp; candidate,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="24"/>int cpdsuggest,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="24"/>int* timer,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="24"/>clock_t* timelimit) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int cwrd = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (wlst.size() == maxSug)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (size_t k = 0; k &lt; wlst.size(); ++k) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (wlst[k] == candidate) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>cwrd = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if ((cwrd) &amp;&amp; <text:span text:style-name="T11">checkword</text:span>(candidate, cpdsuggest, timer, timelimit)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>wlst.push_back(candidate);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// generate suggestions for a misspelled word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// <text:s text:c="3"/>pass in address of array of char * pointers</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// onlycompoundsug: probably bad suggestions (need for ngram sugs, too)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">void SuggestMgr::<office:annotation office:name="__Annotation__5077_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T14:04:28.083188617</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">This method attempts to find canidates by using several techniques for finding candidates in a specific order. For each technique, certain conditions have to be met.</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20"/></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20">This method is the entry point for getting suggestions.</text:span></text:p>
      </office:annotation><text:span text:style-name="T10">suggest</text:span><office:annotation-end office:name="__Annotation__5077_2571519391"/>(std::vector&lt;std::string&gt;&amp; slst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="24"/>const char* w,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="24"/>int* onlycompoundsug) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int nocompoundtwowords = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::vector&lt;w_char&gt; word_utf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int wl = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>size_t nsugorig = slst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string w2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>const char* word = w;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>size_t oldSug = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// word reversing wrapper for complex prefixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>w2.assign(w);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>reverseword_utf(w2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T14">reverseword(w2);</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>word = w2.c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:soft-page-break/><text:s text:c="2"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>wl = u8_u16(word_utf, word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (wl == -1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>return;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (int cpdsuggest = 0; (cpdsuggest &lt; 2) &amp;&amp; (nocompoundtwowords == 0);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="7"/>cpdsuggest++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// limit compound suggestion</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (cpdsuggest &gt; 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>oldSug = slst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// suggestions for an uppercase word (html -&gt; HTML)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (slst.size() &lt; maxSug) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>capchars_utf(slst, &amp;word_utf[0], wl, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T11">capchars</text:span>(slst, word, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// perhaps we made a typical fault of spelling</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((slst.size() &lt; maxSug) &amp;&amp; (!cpdsuggest || (slst.size() &lt; oldSug + maxcpdsugs))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T11">replchars</text:span>(slst, word, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// perhaps we made chose the wrong char from a related set</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((slst.size() &lt; maxSug) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>(!cpdsuggest || (slst.size() &lt; oldSug + maxcpdsugs))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T11">mapchars</text:span>(slst, word, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// only suggest compound words when no other suggestion</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((cpdsuggest == 0) &amp;&amp; (slst.size() &gt; nsugorig))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>nocompoundtwowords = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// did we swap the order of chars by mistake</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((slst.size() &lt; maxSug) &amp;&amp; (!cpdsuggest || (slst.size() &lt; oldSug + maxcpdsugs))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>swapchar_utf(slst, &amp;word_utf[0], wl, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T11">swapchar</text:span>(slst, word, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// did we swap the order of non adjacent chars by mistake</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((slst.size() &lt; maxSug) &amp;&amp; (!cpdsuggest || (slst.size() &lt; oldSug + maxcpdsugs))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>longswapchar_utf(slst, &amp;word_utf[0], wl, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T11">longswapchar</text:span>(slst, word, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// did we just hit the wrong key in place of a good char (case and keyboard)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((slst.size() &lt; maxSug) &amp;&amp; (!cpdsuggest || (slst.size() &lt; oldSug + maxcpdsugs))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>badcharkey_utf(slst, &amp;word_utf[0], wl, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T11">badcharkey</text:span>(slst, word, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// did we add a char that should not be there</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="4"/>if ((slst.size() &lt; maxSug) &amp;&amp; (!cpdsuggest || (slst.size() &lt; oldSug + maxcpdsugs))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>extrachar_utf(slst, &amp;word_utf[0], wl, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T11">extrachar</text:span>(slst, word, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// did we forgot a char</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((slst.size() &lt; maxSug) &amp;&amp; (!cpdsuggest || (slst.size() &lt; oldSug + maxcpdsugs))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>forgotchar_utf(slst, &amp;word_utf[0], wl, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T11">forgotchar</text:span>(slst, word, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// did we move a char</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((slst.size() &lt; maxSug) &amp;&amp; (!cpdsuggest || (slst.size() &lt; oldSug + maxcpdsugs))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>movechar_utf(slst, &amp;word_utf[0], wl, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T11">movechar</text:span>(slst, word, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// did we just hit the wrong key in place of a good char</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((slst.size() &lt; maxSug) &amp;&amp; (!cpdsuggest || (slst.size() &lt; oldSug + maxcpdsugs))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>badchar_utf(slst, &amp;word_utf[0], wl, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T11">badchar</text:span>(slst, word, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// did we double two characters</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((slst.size() &lt; maxSug) &amp;&amp; (!cpdsuggest || (slst.size() &lt; oldSug + maxcpdsugs))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>doubletwochars_utf(slst, &amp;word_utf[0], wl, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T11">doubletwochars</text:span>(slst, word, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// perhaps we forgot to hit space and two words ran together</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!nosplitsugs &amp;&amp; (slst.size() &lt; maxSug) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>(!cpdsuggest || (slst.size() &lt; oldSug + maxcpdsugs))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T11">twowords</text:span>(slst, word, cpdsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>} <text:s/><text:span text:style-name="T1">// repeating ``for&apos;&apos; statement compounding support</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!nocompoundtwowords &amp;&amp; (!slst.empty()) &amp;&amp; onlycompoundsug)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>*onlycompoundsug = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">// suggestions for an uppercase word (html -&gt; HTML)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">void SuggestMgr::capchars_utf(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="30"/>const w_char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="30"/>int wl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="30"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>std::vector&lt;w_char&gt; candidate_utf(word, word + wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>mkallcap_utf(candidate_utf, langnum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>std::string candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:soft-page-break/><text:s text:c="2"/>testsug(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// suggestions for an uppercase word (html -&gt; HTML)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">void SuggestMgr::<text:span text:style-name="T10">capchars</text:span>(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="26"/>const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="26"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string candidate(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><office:annotation office:name="__Annotation__5075_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T14:03:05.473590886</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Simply try word in all capitals</text:span></text:p>
      </office:annotation><text:span text:style-name="T14">mkallcap</text:span>(candidate, csconv);<office:annotation-end office:name="__Annotation__5075_2571519391"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// suggestions for when chose the wrong char out of a related set</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<text:span text:style-name="T10">mapchars</text:span>(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="25"/>const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="25"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>clock_t timelimit;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int timer;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int wl = strlen(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (wl &lt; 2 || !pAMgr)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>const std::vector&lt;mapentry&gt;&amp; <office:annotation office:name="__Annotation__5248_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T14:18:46.467295793</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">The </text:span><text:span text:style-name="T22">MAP</text:span><text:span text:style-name="T20"> definitons of the affix file are loaded here</text:span></text:p>
      </office:annotation>maptable<office:annotation-end office:name="__Annotation__5248_2571519391"/> = pAMgr-&gt;<text:span text:style-name="T18">get_maptable</text:span>();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (maptable.empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>timelimit = clock();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>timer = <office:annotation office:name="__Annotation__4373_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T10:19:07.544474330</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MINTIMER 100</text:span></text:p>
      </office:annotation>MINTIMER<office:annotation-end office:name="__Annotation__4373_3395360522"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return <text:span text:style-name="T11">map_related</text:span>(word, candidate, 0, wlst, cpdsuggest,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="21"/>maptable, &amp;timer, &amp;timelimit);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<office:annotation office:name="__Annotation__5246_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T14:16:07.504524926</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Note that this is a recursive method. The running duration is limited by a timer.</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20"/></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Here is where the actual mapping is done and all correclt spelled words are added to a list.</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20"/></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20">For example for French, there are 25 mapping definitions. One of these is </text:span><text:span text:style-name="T22">eéèêëEÉÈÊË</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T22"/></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Note that </text:span><text:span text:style-name="T22">testsug</text:span><text:span text:style-name="T20"> is not used here, but check is done directly.</text:span></text:p>
      </office:annotation><text:span text:style-name="T10">map_related</text:span><office:annotation-end office:name="__Annotation__5246_2571519391"/>(const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="28"/>std::string&amp; candidate,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="28"/>int wn,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="28"/>std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="28"/>int cpdsuggest,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="28"/>const std::vector&lt;mapentry&gt;&amp; maptable,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="28"/>int* timer,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="28"/>clock_t* timelimit) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (*(word + wn) == &apos;\0&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>int cwrd = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (size_t m = 0; m &lt; wlst.size(); ++m) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (wlst[m] == candidate) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>cwrd = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((cwrd) &amp;&amp; <text:span text:style-name="T11">checkword</text:span>(candidate, cpdsuggest, timer, timelimit)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (wlst.size() &lt; maxSug) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>wlst.push_back(candidate);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int in_map = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (size_t j = 0; j &lt; maptable.size(); ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (size_t k = 0; k &lt; maptable[j].size(); ++k) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>size_t len = maptable[j][k].size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (strncmp(maptable[j][k].c_str(), word + wn, len) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>in_map = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>size_t cn = candidate.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>for (size_t l = 0; l &lt; maptable[j].size(); ++l) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="10"/>candidate.resize(cn);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>candidate.append(maptable[j][l]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T11">map_related</text:span>(word, candidate, wn + len, wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="27"/>cpdsuggest, maptable, timer, timelimit);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (!(*timer))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!in_map) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>candidate.push_back(*(word + wn));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T11">map_related</text:span>(word, candidate, wn + 1, wlst, cpdsuggest,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>maptable, timer, timelimit);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// suggestions for a typical fault of spelling, that</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// differs with more, than 1 letter from the right form.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<office:annotation office:name="__Annotation__5250_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T14:26:08.507552518</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Replacement definitions </text:span><text:span text:style-name="T22">REP</text:span><text:span text:style-name="T20"> are used to find suggestions.</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20"/></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20">For example for Ameirican, there are 90 replacement definitions. Two of these are </text:span><text:span text:style-name="T22">k qu</text:span><text:span text:style-name="T20"> and </text:span><text:span text:style-name="T22">qu k</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20"/></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Note that opposite to </text:span><text:span text:style-name="T22">MAP</text:span><text:span text:style-name="T20"> definiton, a </text:span><text:span text:style-name="T22">REP</text:span><text:span text:style-name="T20"> definition is directional and need to be processed as such. Hence, using mappings can result in much more combination and additionally with a recursion, a time limit is needed there, but not here.</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20"/></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Iterate over all replacement patterns and see if they turn up with valid suggestions.</text:span></text:p>
      </office:annotation><text:span text:style-name="T10">replchars</text:span><office:annotation-end office:name="__Annotation__5250_2571519391"/>(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="26"/>const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="26"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int wl = strlen(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (wl &lt; 2 || !pAMgr)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>const std::vector&lt;replentry&gt;&amp; reptable = pAMgr-&gt;<text:span text:style-name="T18">get_reptable</text:span>();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (size_t i = 0; i &lt; reptable.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>const char* r = word;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// search every occurence of the pattern in the word</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>while ((r = strstr(r, reptable[i].pattern.c_str())) != NULL) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>int type = (r == word) ? 1 : 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (r - word + reptable[i].pattern.size() == strlen(word))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>type += 2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>while (type &amp;&amp; reptable[i].outstrings[type].empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>type = (type == 2 &amp;&amp; r != word) ? 0 : type - 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>const std::string&amp;out = reptable[i].outstrings[type];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (out.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>++r;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>candidate.assign(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>candidate.resize(r - word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>candidate.append(reptable[i].outstrings[type]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>candidate.append(r + reptable[i].pattern.size());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T1">// check REP suggestions with space</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>size_t sp = candidate.find(&apos; &apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (sp != std::string::npos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>size_t prev = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>while (sp != std::string::npos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>std::string prev_chunk = candidate.substr(prev, sp - prev);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><office:annotation office:name="__Annotation__5472_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T14:30:22.368291054</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Also try the candidate with applied replacement of which all the parts separated by spaces are valid suggestions.</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__5472_2571519391"/> (<text:span text:style-name="T11">checkword</text:span>(prev_chunk, 0, NULL, NULL)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>size_t oldns = wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>std::string post_chunk = candidate.substr(sp + 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/><text:span text:style-name="T11">testsug</text:span>(wlst, post_chunk, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>if (oldns &lt; wlst.size()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>wlst[wlst.size() - 1] = candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>prev = sp + 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>sp = candidate.find(&apos; &apos;, prev);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="6"/>r++; <text:s/><text:span text:style-name="T1">// search for the next letter</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// perhaps we doubled two characters (pattern aba -&gt; ababa, for example vacation</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// -&gt; vacacation)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<office:annotation office:name="__Annotation__5608_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T14:47:19.026579137</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Add correct word without the doubled two characters to the list of suggestions. The arrows in the examples point in direction of the spelling mistake.</text:span></text:p>
      </office:annotation><text:span text:style-name="T10">doubletwochars</text:span><office:annotation-end office:name="__Annotation__5608_2571519391"/>(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="31"/>const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="31"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int state = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int wl = strlen(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (wl &lt; 5 || !pAMgr)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (int i = 2; i &lt; wl; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (word[i] == word[i - 2]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>state++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (state == 3) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>std::string candidate(word, word + i - 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>candidate.insert(candidate.end(), word + i + 1, word + wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>state = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>state = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">// perhaps we doubled two characters (pattern aba -&gt; ababa, for example vacation</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">// -&gt; vacacation)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">int SuggestMgr::doubletwochars_utf(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="35"/>const w_char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="35"/>int wl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="35"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>int state = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>if (wl &lt; 5 || !pAMgr)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>for (int i = 2; i &lt; wl; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (word[i] == word[i - 2]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>state++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (state == 3) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>std::vector&lt;w_char&gt; candidate_utf(word, word + i - 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>candidate_utf.insert(candidate_utf.end(), word + i + 1, word + wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>std::string candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>testsug(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>state = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>state = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// error is wrong char in place of correct one (case and keyboard related</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// version)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<office:annotation office:name="__Annotation__5931_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T15:55:15.727174852</dc:date>
       <text:p><text:span text:style-name="T20">Will iterate over all characters and try upper casing that characters to find suggestion. Then (after restoring that character) it will try all other characters from the related part from ckey, see also top of this file relating </text:span><text:span text:style-name="T22">KEY</text:span><text:span text:style-name="T20">.</text:span></text:p>
      </office:annotation><text:span text:style-name="T10">badcharkey</text:span><office:annotation-end office:name="__Annotation__5931_2571519391"/>(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="27"/>const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="27"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string candidate(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="2"/><text:span text:style-name="T1">// swap out each char one by one and try uppercase and neighbor</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// keyboard chars in its place to see if that makes a good word</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (size_t i = 0; i &lt; candidate.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>char tmpc = candidate[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// check with uppercase letters</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>candidate[i] = csconv[((unsigned char)tmpc)].<text:span text:style-name="T14">cupper</text:span>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (tmpc != candidate[i]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>candidate[i] = tmpc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// check neighbor characters in keyboard string</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!ckey)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>char* loc = strchr(ckey, tmpc);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>while (loc) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if ((loc &gt; ckey) &amp;&amp; (*(loc - 1) != &apos;|&apos;)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>candidate[i] = *(loc - 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if ((*(loc + 1) != &apos;|&apos;) &amp;&amp; (*(loc + 1) != &apos;\0&apos;)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>candidate[i] = *(loc + 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>loc = strchr(loc + 1, tmpc);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>candidate[i] = tmpc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">// error is wrong char in place of correct one (case and keyboard related</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">// version)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">int SuggestMgr::badcharkey_utf(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="31"/>const w_char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="31"/>int wl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="31"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>std::string candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>std::vector&lt;w_char&gt; candidate_utf(word, word + wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>// swap out each char one by one and try all the tryme</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>// chars in its place to see if that makes a good word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>for (int i = 0; i &lt; wl; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>w_char tmpc = candidate_utf[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>// check with uppercase letters</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>candidate_utf[i] = upper_utf(candidate_utf[i], 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (tmpc != candidate_utf[i]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>testsug(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>candidate_utf[i] = tmpc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>// check neighbor characters in keyboard string</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (!ckey)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>size_t loc = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>while ((loc &lt; ckeyl) &amp;&amp; ckey_utf[loc] != tmpc)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>++loc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>while (loc &lt; ckeyl) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if ((loc &gt; 0) &amp;&amp; ckey_utf[loc - 1] != W_VLINE) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>candidate_utf[i] = ckey_utf[loc - 1];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>testsug(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (((loc + 1) &lt; ckeyl) &amp;&amp; (ckey_utf[loc + 1] != W_VLINE)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>candidate_utf[i] = ckey_utf[loc + 1];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>testsug(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:soft-page-break/><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>do {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>loc++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>} while ((loc &lt; ckeyl) &amp;&amp; ckey_utf[loc] != tmpc);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>candidate_utf[i] = tmpc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// error is wrong char in place of correct one</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<office:annotation office:name="__Annotation__6221_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T16:13:34.115508709</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">The try characters are loaded in a similar way as the key characters. The try characters can be a long list, therefore a time limit is used here. General consideration is to add different time limits where time limits are needed as this one is less intensive than e.g. MAP. Other general consideration is to use character frequency (and ngram frequencies) to optimise the order of iteration (Both are feature requests of version after 2.0)</text:span></text:p>
      </office:annotation><text:span text:style-name="T10">badchar</text:span><office:annotation-end office:name="__Annotation__6221_2571519391"/>(std::vector&lt;std::string&gt;&amp; wlst, const char* word, int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string candidate(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>clock_t timelimit = clock();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int timer = <office:annotation office:name="__Annotation__4474_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T10:51:31.298588674</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MINTIMER 100</text:span></text:p>
      </office:annotation>MINTIMER<office:annotation-end office:name="__Annotation__4474_3395360522"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// swap out each char one by one and try all the tryme</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// chars in its place to see if that makes a good word</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (size_t j = 0; j &lt; ctryl; ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (std::string::reverse_iterator aI = candidate.rbegin(), aEnd = candidate.rend(); aI != aEnd; ++aI) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>char tmpc = *aI;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (ctry[j] == tmpc)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>*aI = ctry[j];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, &amp;timer, &amp;timelimit);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (!timer)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>*aI = tmpc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">// error is wrong char in place of correct one</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">int SuggestMgr::badchar_utf(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="28"/>const w_char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="28"/>int wl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="28"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>std::vector&lt;w_char&gt; candidate_utf(word, word + wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>std::string candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>clock_t timelimit = clock();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>int timer = MINTIMER;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>// swap out each char one by one and try all the tryme</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>// chars in its place to see if that makes a good word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>for (size_t j = 0; j &lt; ctryl; ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>for (int i = wl - 1; i &gt;= 0; i--) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>w_char tmpc = candidate_utf[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (tmpc == ctry_utf[j])</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>candidate_utf[i] = ctry_utf[j];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>testsug(wlst, candidate, cpdsuggest, &amp;timer, &amp;timelimit);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (!timer)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>candidate_utf[i] = tmpc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">// error is word has an extra letter it does not need</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">int SuggestMgr::extrachar_utf(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="30"/>const w_char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="30"/>int wl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:soft-page-break/><text:s text:c="30"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>std::vector&lt;w_char&gt; candidate_utf(word, word + wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>if (candidate_utf.size() &lt; 2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>// try omitting one char of word at a time</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>for (size_t i = 0; i &lt; candidate_utf.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>size_t index = candidate_utf.size() - 1 - i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>w_char tmpc = candidate_utf[index];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>candidate_utf.erase(candidate_utf.begin() + index);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>std::string candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>testsug(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>candidate_utf.insert(candidate_utf.begin() + index, tmpc);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// error is word has an extra letter it does not need</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<office:annotation office:name="__Annotation__6222_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T16:18:03.480525264</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Enumerate omitting each character and seeing of suggestion results. General consideration, document order of each suggestion method.</text:span></text:p>
      </office:annotation><text:span text:style-name="T10">extrachar</text:span><office:annotation-end office:name="__Annotation__6222_2571519391"/>(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="26"/>const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="26"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string candidate(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (candidate.size() &lt; 2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// try omitting one char of word at a time</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (size_t i = 0; i &lt; candidate.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>size_t index = candidate.size() - 1 - i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>char tmpc = candidate[index];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>candidate.erase(candidate.begin() + index);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>candidate.insert(candidate.begin() + index, tmpc);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// error is missing a letter it needs</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<office:annotation office:name="__Annotation__6323_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T16:25:22.864671596</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">The opposite of the extrachar method, however, this method is restricted in execution time. Reason is that not one character is changed, but each character is changed time all characters from TRY.</text:span></text:p>
      </office:annotation><text:span text:style-name="T10">forgotchar</text:span><office:annotation-end office:name="__Annotation__6323_2571519391"/>(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="27"/>const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="27"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string candidate(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>clock_t timelimit = clock();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int timer = <office:annotation office:name="__Annotation__4472_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T10:51:16.866326017</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MINTIMER 100</text:span></text:p>
      </office:annotation>MINTIMER<office:annotation-end office:name="__Annotation__4472_3395360522"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// try inserting a tryme character before every letter (and the null</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// terminator)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (size_t k = 0; k &lt; ctryl; ++k) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (size_t i = 0; i &lt;= candidate.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>size_t index = candidate.size() - i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>candidate.insert(candidate.begin() + index, ctry[k]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, &amp;timer, &amp;timelimit);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (!timer)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>candidate.erase(candidate.begin() + index);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">// error is missing a letter it needs</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">int SuggestMgr::forgotchar_utf(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="31"/>const w_char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="31"/>int wl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="31"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>std::vector&lt;w_char&gt; candidate_utf(word, word + wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>clock_t timelimit = clock();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:soft-page-break/><text:s text:c="2"/>int timer = MINTIMER;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>// try inserting a tryme character at the end of the word and before every</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>// letter</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>for (size_t k = 0; k &lt; ctryl; ++k) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>for (size_t i = 0; i &lt;= candidate_utf.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>size_t index = candidate_utf.size() - i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>candidate_utf.insert(candidate_utf.begin() + index, ctry_utf[k]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>std::string candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>testsug(wlst, candidate, cpdsuggest, &amp;timer, &amp;timelimit);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (!timer)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>candidate_utf.erase(candidate_utf.begin() + index);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">/* error is should have been two words */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<text:span text:style-name="T10">twowords</text:span>(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="25"/>const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="25"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int c2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int forbidden = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int cwrd;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int wl = strlen(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (wl &lt; 3)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (<office:annotation office:name="__Annotation__6478_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T16:29:41.877391371</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Why only for Hungarian? These exceptions have to be reviewed in later releases.</text:span></text:p>
      </office:annotation>langnum == LANG_hu<office:annotation-end office:name="__Annotation__6478_2571519391"/>)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>forbidden = <text:span text:style-name="T11">check_forbidden</text:span>(word, wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>char* candidate = (char*)malloc(wl + 2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>strcpy(candidate + 1, word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// split the string into two pieces after every char</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// if both pieces are good words make them a suggestion</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (char* p = candidate + 1; p[1] != &apos;\0&apos;; p++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>p[-1] = *p;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>// go to end of the UTF-8 character</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>while (utf8 &amp;&amp; ((p[1] &amp; 0xc0) == 0x80)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>*p = p[1];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>p++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (utf8 &amp;&amp; p[1] == &apos;\0&apos;)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>break; <text:s/>// last UTF-8 character</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>*p = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>int c1 = <text:span text:style-name="T11">checkword</text:span>(candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (c1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>c2 = <text:span text:style-name="T11">checkword</text:span>((p + 1), cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (c2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>*p = &apos; &apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T1">// spec. Hungarian code (need a better compound word support)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if ((langnum == LANG_hu) &amp;&amp; !forbidden &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/><text:span text:style-name="T1">// if 3 repeating letter, use - instead of space</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>(((p[-1] == p[1]) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>(((p &gt; candidate + 1) &amp;&amp; (p[-1] == p[-2])) || (p[-1] == p[2]))) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="13"/><text:span text:style-name="T1">// or multiple compounding, with more, than 6 </text:span><office:annotation office:name="__Annotation__6480_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T16:32:03.496065419</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">How are syllables detected?</text:span></text:p>
      </office:annotation><text:span text:style-name="T1">syllables</text:span><office:annotation-end office:name="__Annotation__6480_2571519391"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="13"/>((c1 == 3) &amp;&amp; (c2 &gt;= 2))))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>*p = &apos;-&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>cwrd = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="8"/>for (size_t k = 0; k &lt; wlst.size(); ++k) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (wlst[k] == candidate) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>cwrd = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (wlst.size() &lt; maxSug) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (cwrd) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>wlst.push_back(candidate);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>free(candidate);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T1">// add two word suggestion with dash, if TRY string contains</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T1">// &quot;a&quot; or &quot;-&quot;</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:tab/><text:span text:style-name="T1">// Note that cwrd doesn&apos;t modified for REP twoword sugg.</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (ctry &amp;&amp; (<office:annotation office:name="__Annotation__6479_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T16:31:47.527691010</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Why &apos;a&apos;? Need some examples. Or is it to detect a Latin script?</text:span></text:p>
      </office:annotation>strchr(ctry, &apos;a&apos;<office:annotation-end office:name="__Annotation__6479_2571519391"/>) || strchr(ctry, &apos;-&apos;)) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>mystrlen(p + 1) &gt; 1 &amp;&amp; mystrlen(candidate) - mystrlen(p) &gt; 1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>*p = &apos;-&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>for (size_t k = 0; k &lt; wlst.size(); ++k) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>if (wlst[k] == candidate) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>cwrd = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (wlst.size() &lt; maxSug) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>if (cwrd) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>wlst.push_back(candidate);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>free(candidate);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>free(candidate);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// error is adjacent letter were swapped</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<office:annotation office:name="__Annotation__6481_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T16:36:25.549002241</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Note the support for double swapping of two characters. That does not need to be adjecent! Could perhaps be reimplemented in a more generic way.</text:span></text:p>
      </office:annotation><text:span text:style-name="T10">swapchar</text:span><office:annotation-end office:name="__Annotation__6481_2571519391"/>(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="25"/>const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="25"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string candidate(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (candidate.size() &lt; 2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// try swapping adjacent chars one by one</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (size_t i = 0; i &lt; candidate.size() - 1; ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>std::swap(candidate[i], candidate[i+1]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>std::swap(candidate[i], candidate[i+1]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// try double swaps for short words</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// ahev -&gt; have, owudl -&gt; would</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (candidate.size() == 4 || candidate.size() == 5) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>candidate[0] = word[1];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>candidate[1] = word[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>candidate[2] = word[2];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>candidate[candidate.size() - 2] = word[candidate.size() - 1];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>candidate[candidate.size() - 1] = word[candidate.size() - 2];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="4"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (candidate.size() == 5) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>candidate[0] = word[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>candidate[1] = word[2];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>candidate[2] = word[1];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">// error is adjacent letter were swapped</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">int SuggestMgr::swapchar_utf(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="29"/>const w_char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="29"/>int wl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="29"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>std::vector&lt;w_char&gt; candidate_utf(word, word + wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>if (candidate_utf.size() &lt; 2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>std::string candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>// try swapping adjacent chars one by one</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>for (size_t i = 0; i &lt; candidate_utf.size() - 1; ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>std::swap(candidate_utf[i], candidate_utf[i+1]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>testsug(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>std::swap(candidate_utf[i], candidate_utf[i+1]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>// try double swaps for short words</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>// ahev -&gt; have, owudl -&gt; would, suodn -&gt; sound</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>if (candidate_utf.size() == 4 || candidate_utf.size() == 5) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>candidate_utf[0] = word[1];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>candidate_utf[1] = word[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>candidate_utf[2] = word[2];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>candidate_utf[candidate_utf.size() - 2] = word[candidate_utf.size() - 1];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>candidate_utf[candidate_utf.size() - 1] = word[candidate_utf.size() - 2];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>testsug(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (candidate_utf.size() == 5) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>candidate_utf[0] = word[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>candidate_utf[1] = word[2];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>candidate_utf[2] = word[1];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>testsug(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// error is not adjacent letter were swapped</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<office:annotation office:name="__Annotation__6592_2571519391">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-18T16:38:38.223353264</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">Striaght forward. Question for later releases, is swapping over long distances useful? Perhaps limit algorithm or iterate in such as way that distance is increased gradually.</text:span></text:p>
      </office:annotation><text:span text:style-name="T10">longswapchar</text:span><office:annotation-end office:name="__Annotation__6592_2571519391"/>(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="29"/>const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="29"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string candidate(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// try swapping not adjacent chars one by one</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (std::string::iterator p = candidate.begin(); p &lt; candidate.end(); ++p) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (std::string::iterator q = candidate.begin(); q &lt; candidate.end(); ++q) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (std::abs(std::distance(q, p)) &gt; 1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>std::swap(*p, *q);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>std::swap(*p, *q);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">// error is adjacent letter were swapped</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">int SuggestMgr::longswapchar_utf(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="33"/>const w_char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="33"/>int wl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="33"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>std::vector&lt;w_char&gt; candidate_utf(word, word + wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>// try swapping not adjacent chars</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>for (std::vector&lt;w_char&gt;::iterator p = candidate_utf.begin(); p &lt; candidate_utf.end(); ++p) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>for (std::vector&lt;w_char&gt;::iterator q = candidate_utf.begin(); q &lt; candidate_utf.end(); ++q) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (std::abs(std::distance(q, p)) &gt; 1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>std::swap(*p, *q);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>std::string candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>testsug(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>std::swap(*p, *q);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// error is a letter was moved</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<text:span text:style-name="T10">movechar</text:span>(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="25"/>const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="25"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string candidate(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (candidate.size() &lt; 2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// try moving a char</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (std::string::iterator p = candidate.begin(); p &lt; candidate.end(); ++p) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (std::string::iterator q = p + 1; q &lt; candidate.end() &amp;&amp; <office:annotation office:name="__Annotation__5284_166794943">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-20T11:51:40.508585642</dc:date>
       <text:p text:style-name="P13"><text:span text:style-name="T21">Character has to be moved two or more places but less than ten places.</text:span></text:p>
      </office:annotation>std::distance(p, q) &lt; 10; ++q) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>std::swap(*q, *(q - 1));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (std::distance(p, q) &lt; 2<office:annotation-end office:name="__Annotation__5284_166794943"/>)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>continue; <text:s/><text:span text:style-name="T2">// omit swap char</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>std::copy(word, word + candidate.size(), candidate.begin());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (std::string::<office:annotation office:name="__Annotation__5285_166794943">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-20T11:52:07.676954912</dc:date>
       <text:p text:style-name="P13"><text:span text:style-name="T21">Attempt the same but starting from the other end of the word, i.e. the reverse approach.</text:span></text:p>
      </office:annotation>reverse_iterator<office:annotation-end office:name="__Annotation__5285_166794943"/> p = candidate.rbegin(), pEnd = candidate.rend() - 1; p != pEnd; ++p) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (std::string::reverse_iterator q = p + 1, qEnd = candidate.rend(); q != qEnd &amp;&amp; std::distance(p, q) &lt; 10; ++q) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>std::swap(*q, *(q - 1));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (std::distance(p, q) &lt; 2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>continue; <text:s/><text:span text:style-name="T1">// omit swap char</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T11">testsug</text:span>(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>std::copy(word, word + candidate.size(), candidate.begin());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">// error is a letter was moved</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">int SuggestMgr::movechar_utf(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="29"/>const w_char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:soft-page-break/><text:s text:c="29"/>int wl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="29"/>int cpdsuggest) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>std::vector&lt;w_char&gt; candidate_utf(word, word + wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>if (candidate_utf.size() &lt; 2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>// try moving a char</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>for (std::vector&lt;w_char&gt;::iterator p = candidate_utf.begin(); p &lt; candidate_utf.end(); ++p) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>for (std::vector&lt;w_char&gt;::iterator q = p + 1; q &lt; candidate_utf.end() &amp;&amp; std::distance(p, q) &lt; 10; ++q) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>std::swap(*q, *(q - 1));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (std::distance(p, q) &lt; 2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>continue; <text:s/>// omit swap char</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>std::string candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>testsug(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>std::copy(word, word + candidate_utf.size(), candidate_utf.begin());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>for (std::vector&lt;w_char&gt;::reverse_iterator p = candidate_utf.rbegin(); p &lt; candidate_utf.rend(); ++p) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>for (std::vector&lt;w_char&gt;::reverse_iterator q = p + 1; q &lt; candidate_utf.rend() &amp;&amp; std::distance(p, q) &lt; 10; ++q) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>std::swap(*q, *(q - 1));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (std::distance(p, q) &lt; 2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>continue; <text:s/>// omit swap char</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>std::string candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>u16_u8(candidate, candidate_utf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>testsug(wlst, candidate, cpdsuggest, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>std::copy(word, word + candidate_utf.size(), candidate_utf.begin());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>return wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// generate a set of suggestions for very poorly spelled words</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">void SuggestMgr::<text:span text:style-name="T10"><office:annotation office:name="__Annotation__5413_166794943">
        <dc:creator>Unknown Author</dc:creator>
        <dc:date>2018-09-20T12:08:04.654833323</dc:date>
        <text:p text:style-name="P13"><text:span text:style-name="T21">Called after all conventional techniques have </text:span></text:p>
       </office:annotation></text:span><text:span text:style-name="T10">ngsuggest</text:span><office:annotation-end office:name="__Annotation__5413_166794943"/>(std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="26"/>const char* w,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="26"/>const std::vector&lt;HashMgr*&gt;&amp; rHMgr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int lval;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int sc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int lp, lpphon;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int nonbmp = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// exhaustively search through all root words</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// keeping track of the MAX_ROOTS most similar root words</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><office:annotation office:name="__Annotation__4538_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:22:15.301567265</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MAX_ROOTS 100</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T22"/></text:p>
      </office:annotation><text:s text:c="2"/>struct hentry* roots[MAX_ROOTS];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>char* rootsphon[MAX_ROOTS];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int scores[MAX_ROOTS];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int scoresphon[MAX_ROOTS];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (int i = 0; i &lt; MAX_ROOTS; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>roots[i] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>scores[i] = -100 * i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>rootsphon[i] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>scoresphon[i] = -100 * i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>lp = MAX_ROOTS - 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>lpphon = MAX_ROOTS - 1;<office:annotation-end office:name="__Annotation__4538_3395360522"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int low = <office:annotation office:name="__Annotation__4539_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:22:44.854004753</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
      </office:annotation>NGRAM_LOWERING<office:annotation-end office:name="__Annotation__4539_3395360522"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string w2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>const char* word = w;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// word reversing wrapper for complex prefixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>w2.assign(w);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>reverseword_utf(w2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T14">reverseword(w2);</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>word = w2.c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::vector&lt;w_char&gt; u8;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int nc = strlen(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int n = <text:span text:style-name="T17">(utf8) ? u8_u16(u8, word)</text:span> : nc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// set character based ngram suggestion for words with non-BMP Unicode</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// characters</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (n == -1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>utf8 = 0; <text:s/><text:span text:style-name="T1">// XXX not state-free</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>n = nc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>nonbmp = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>low = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>struct hentry* hp = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int col = -1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>phonetable* ph = (pAMgr) ? pAMgr-&gt;<text:span text:style-name="T18">get_phonetable</text:span>() : NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string target;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::vector&lt;w_char&gt; w_candidate;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (ph) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>u8_u16(w_candidate, word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>mkallcap_utf(w_candidate, langnum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>u16_u8(candidate, w_candidate);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>candidate.assign(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (!nonbmp)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T14">mkallcap</text:span>(candidate, csconv);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>target = phonet(candidate, *ph); <text:s/><text:span text:style-name="T1">// XXX phonet() is 8-bit (nc, not n)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>FLAG forbiddenword = pAMgr ? pAMgr-&gt;<text:span text:style-name="T18">get_forbiddenword</text:span>() : FLAG_NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>FLAG nosuggest = pAMgr ? pAMgr-&gt;<text:span text:style-name="T18">get_nosuggest</text:span>() : FLAG_NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>FLAG nongramsuggest = pAMgr ? pAMgr-&gt;<text:span text:style-name="T18">get_nongramsuggest</text:span>() : FLAG_NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>FLAG onlyincompound = pAMgr ? pAMgr-&gt;<text:span text:style-name="T18">get_onlyincompound</text:span>() : FLAG_NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::vector&lt;w_char&gt; w_word, w_target;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>u8_u16(w_word, word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>u8_u16(w_target, target);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string f;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::vector&lt;w_char&gt; w_f;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (size_t i = 0; i &lt; rHMgr.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>while (0 != (hp = rHMgr[i]-&gt;walk_hashtable(col, hp))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if ((hp-&gt;astr) &amp;&amp; (pAMgr) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>(TESTAFF(hp-&gt;astr, forbiddenword, hp-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="11"/>TESTAFF(hp-&gt;astr, ONLYUPCASEFLAG, hp-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="11"/>TESTAFF(hp-&gt;astr, nosuggest, hp-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="11"/>TESTAFF(hp-&gt;astr, nongramsuggest, hp-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="11"/>TESTAFF(hp-&gt;astr, onlyincompound, hp-&gt;alen)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="8"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>u8_u16(w_f, HENTRY_WORD(hp));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>int leftcommon = leftcommonsubstring(w_word, w_f);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>if (low) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>// lowering dictionary word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>mkallsmall_utf(w_f, langnum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>sc = ngram(3, w_word, w_f, NGRAM_LONGER_WORSE) + leftcommon;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>f.assign(HENTRY_WORD(hp));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>int leftcommon = <text:span text:style-name="T11">leftcommonsubstring</text:span>(word, f.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (low) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T1">// lowering dictionary word</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T14">mkallsmall(f, csconv);</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>sc = ngram(3, word, f, <office:annotation office:name="__Annotation__4540_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:23:22.886746343</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
      </office:annotation>NGRAM_LONGER_WORSE<office:annotation-end office:name="__Annotation__4540_3395360522"/>) + leftcommon;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T1">// check special pronounciation</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>f.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if ((hp-&gt;var &amp; H_OPT_PHON) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>copy_field(f, HENTRY_DATA(hp), MORPH_PHON)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>int sc2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>u8_u16(w_f, f);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>int leftcommon = leftcommonsubstring(w_word, w_f);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>if (low) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="12"/>// lowering dictionary word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="12"/>mkallsmall_utf(w_f, langnum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>sc2 = ngram(3, w_word, w_f, NGRAM_LONGER_WORSE) + leftcommon;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>int leftcommon = <text:span text:style-name="T11">leftcommonsubstring</text:span>(word, f.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (low) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/><text:span text:style-name="T1">// lowering dictionary word</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/><text:span text:style-name="T14">mkallsmall(f, csconv);</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>sc2 = <text:span text:style-name="T11">ngram</text:span>(3, word, f, <office:annotation office:name="__Annotation__4541_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:23:38.695030850</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T22"/></text:p>
      </office:annotation>NGRAM_LONGER_WORSE<office:annotation-end office:name="__Annotation__4541_3395360522"/>) + leftcommon;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (sc2 &gt; sc)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>sc = sc2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>int scphon = -20000;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (ph &amp;&amp; (sc &gt; 2) &amp;&amp; (abs(n - (int)hp-&gt;clen) &lt;= 3)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>u8_u16(w_candidate, HENTRY_WORD(hp));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>mkallcap_utf(w_candidate, langnum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>u16_u8(candidate, w_candidate);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>candidate = HENTRY_WORD(hp);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T14">mkallcap</text:span>(candidate, csconv);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>f = phonet(candidate, *ph);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>u8_u16(w_f, f);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>scphon = 2 * ngram(3, w_target, w_f,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="29"/>NGRAM_LONGER_WORSE);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>scphon = 2 * <text:span text:style-name="T11">ngram</text:span>(3, target, f,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="29"/><office:annotation office:name="__Annotation__4543_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:23:59.943470032</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
      </office:annotation>NGRAM_LONGER_WORSE<office:annotation-end office:name="__Annotation__4543_3395360522"/>);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (sc &gt; scores[lp]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>scores[lp] = sc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>roots[lp] = hp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>lval = sc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>for (int j = 0; j &lt; MAX_ROOTS; j++)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (scores[j] &lt; lval) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>lp = j;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>lval = scores[j];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (scphon &gt; scoresphon[lpphon]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>scoresphon[lpphon] = scphon;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>rootsphon[lpphon] = HENTRY_WORD(hp);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>lval = scphon;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>for (int j = 0; j &lt; MAX_ROOTS; j++)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (scoresphon[j] &lt; lval) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>lpphon = j;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>lval = scoresphon[j];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// find minimum threshold for a passable suggestion</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// mangle original word three differnt ways</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// and score them to generate a minimum acceptable score</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::vector&lt;w_char&gt; w_mw;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int thresh = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (int sp = 1; sp &lt; 4; sp++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>w_mw = w_word;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>for (int k = sp; k &lt; n; k += 4) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>w_mw[k].l = &apos;*&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>w_mw[k].h = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (low) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>// lowering dictionary word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>mkallsmall_utf(w_mw, langnum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>thresh += ngram(n, w_word, w_mw, NGRAM_ANY_MISMATCH);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>std::string mw = word;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>for (int k = sp; k &lt; n; k += 4)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>mw[k] = &apos;*&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (low) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T1">// lowering dictionary word</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T14">mkallsmall(mw, csconv);</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>thresh += <text:span text:style-name="T11">ngram</text:span>(n, word, mw, <office:annotation office:name="__Annotation__4547_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:26:40.058413852</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
      </office:annotation>NGRAM_ANY_MISMATCH<office:annotation-end office:name="__Annotation__4547_3395360522"/>);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>thresh = thresh / 3;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>thresh--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// now expand affixes on each of these root words and</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// and use length adjusted ngram scores to select</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="2"/><text:span text:style-name="T1">// possible suggestions</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><office:annotation office:name="__Annotation__4424_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T10:36:28.002009628</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MAX_GUESS 200</text:span></text:p>
      </office:annotation><text:s text:c="2"/>char* guess[MAX_GUESS];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>char* guessorig[MAX_GUESS];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int gscore[MAX_GUESS];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (int i = 0; i &lt; MAX_GUESS; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>guess[i] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>guessorig[i] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>gscore[i] = -100 * i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>lp = MAX_GUESS - 1;<office:annotation-end office:name="__Annotation__4424_3395360522"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>struct guessword* glst;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>glst = (struct guessword*)calloc(MAX_WORDS, sizeof(struct guessword));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!glst) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (nonbmp)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>utf8 = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (int i = 0; i &lt; MAX_ROOTS; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (roots[i]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>struct hentry* rp = roots[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>f.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>const char *field = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if ((rp-&gt;var &amp; H_OPT_PHON) &amp;&amp; copy_field(f, HENTRY_DATA(rp), MORPH_PHON))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>field = f.c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>int nw = pAMgr-&gt;<text:span text:style-name="T18">expand_rootword</text:span>(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>glst, MAX_WORDS, HENTRY_WORD(rp), rp-&gt;blen, rp-&gt;astr, rp-&gt;alen, word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>nc, field);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>for (int k = 0; k &lt; nw; k++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>u8_u16(w_f, glst[k].word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>int leftcommon = leftcommonsubstring(w_word, w_f);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>if (low) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="12"/>// lowering dictionary word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="12"/>mkallsmall_utf(w_f, langnum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>sc = ngram(n, w_word, w_f, NGRAM_ANY_MISMATCH) + leftcommon;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>f = glst[k].word;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>int leftcommon = <text:span text:style-name="T11">leftcommonsubstring</text:span>(word, f.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (low) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/><text:span text:style-name="T1">// lowering dictionary word</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/><text:span text:style-name="T14">mkallsmall(f, csconv);</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>sc = <text:span text:style-name="T11">ngram</text:span>(n, word, f, <office:annotation office:name="__Annotation__4548_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:26:46.826573824</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
      </office:annotation>NGRAM_ANY_MISMATCH<office:annotation-end office:name="__Annotation__4548_3395360522"/>) + leftcommon;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (sc &gt; thresh) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (sc &gt; gscore[lp]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>if (guess[lp]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>free(guess[lp]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>if (guessorig[lp]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>free(guessorig[lp]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>guessorig[lp] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>gscore[lp] = sc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="12"/>guess[lp] = glst[k].word;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>guessorig[lp] = glst[k].orig;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>lval = sc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>for (int j = 0; j &lt; MAX_GUESS; j++)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>if (gscore[j] &lt; lval) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>lp = j;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>lval = gscore[j];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>free(glst[k].word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>if (glst[k].orig)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>free(glst[k].orig);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>free(glst[k].word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (glst[k].orig)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>free(glst[k].orig);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>free(glst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// now we are done generating guesses</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// sort in order of decreasing score</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>bubblesort(&amp;guess[0], &amp;guessorig[0], &amp;gscore[0], MAX_GUESS);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (ph)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>bubblesort(&amp;rootsphon[0], NULL, &amp;scoresphon[0], MAX_ROOTS);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// weight suggestions with a similarity index, based on</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// the longest common subsequent algorithm and resort</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int is_swap = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int re = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>double fact = 1.0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (pAMgr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>int maxd = pAMgr-&gt;<text:span text:style-name="T18">get_maxdiff</text:span>();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (maxd &gt;= 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>fact = (10.0 - maxd) / 5.0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::vector&lt;w_char&gt; w_gl;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (int i = 0; i &lt; MAX_GUESS; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (guess[i]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T1">// lowering guess[i]</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>std::string gl;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>int len;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>len = u8_u16(w_gl, guess[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>mkallsmall_utf(w_gl, langnum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>u16_u8(gl, w_gl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>gl.assign(guess[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (!nonbmp)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T14">mkallsmall(gl, csconv);</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>len = strlen(guess[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>int _lcs = lcslen(word, gl.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T1">// same characters with different casing</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if ((n == len) &amp;&amp; (n == _lcs)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>gscore[i] += 2000;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T1">// using 2-gram instead of 3, and other weightening</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>u8_u16(w_gl, gl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>//w_gl is lowercase already at this point</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>re = ngram(2, w_word, w_gl, NGRAM_ANY_MISMATCH + NGRAM_WEIGHTED);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>if (low) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>w_f = w_word;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>// lowering dictionary word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>mkallsmall_utf(w_f, langnum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>re += ngram(2, w_gl, w_f, NGRAM_ANY_MISMATCH + NGRAM_WEIGHTED);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>re += ngram(2, w_gl, w_word, NGRAM_ANY_MISMATCH + NGRAM_WEIGHTED);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T1">//gl is lowercase already at this point</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>re = <text:span text:style-name="T11">ngram</text:span>(2, word, gl, <office:annotation office:name="__Annotation__4549_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:26:57.402777793</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
      </office:annotation>NGRAM_ANY_MISMATCH + NGRAM_WEIGHTED<office:annotation-end office:name="__Annotation__4549_3395360522"/>);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (low) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>f = word;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T1">// lowering dictionary word</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T14">mkallsmall(f, csconv);</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>re += <text:span text:style-name="T11">ngram</text:span>(2, gl, f, <office:annotation office:name="__Annotation__4551_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:27:08.699085171</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
      </office:annotation>NGRAM_ANY_MISMATCH + NGRAM_WEIGHTED<office:annotation-end office:name="__Annotation__4551_3395360522"/>);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>re += <text:span text:style-name="T11">ngram</text:span>(2, gl, word, <office:annotation office:name="__Annotation__4552_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:27:13.163133444</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
      </office:annotation>NGRAM_ANY_MISMATCH + NGRAM_WEIGHTED<office:annotation-end office:name="__Annotation__4552_3395360522"/>);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>int ngram_score, leftcommon_score;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>//w_gl is lowercase already at this point</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>ngram_score = ngram(4, w_word, w_gl, NGRAM_ANY_MISMATCH);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>leftcommon_score = leftcommonsubstring(w_word, w_gl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T1">//gl is lowercase already at this point</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>ngram_score = <text:span text:style-name="T11">ngram</text:span>(4, word, gl, <office:annotation office:name="__Annotation__4553_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:27:18.619214634</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
      </office:annotation>NGRAM_ANY_MISMATCH<office:annotation-end office:name="__Annotation__4553_3395360522"/>);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>leftcommon_score = leftcommonsubstring(word, gl.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>gscore[i] =</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T1">// length of longest common subsequent minus length difference</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>2 * _lcs - abs((int)(n - len)) +</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T1">// weight length of the left common substring</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>leftcommon_score +</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T1">// weight equal character positions</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>(!nonbmp &amp;&amp; <text:span text:style-name="T11">commoncharacterpositions</text:span>(word, gl.c_str(), &amp;is_swap)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="15"/>? 1</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="15"/>: 0) +</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T1">// swap character (not neighboring)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>((is_swap) ? 10 : 0) +</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T1">// ngram</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>ngram_score +</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T1">// weighted ngrams</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>re +</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T1">// different limit for dictionaries with PHONE rules</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>(ph ? (re &lt; len * fact ? -1000 : 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>: (re &lt; (n + len) * fact ? -1000 : 0));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>bubblesort(&amp;guess[0], &amp;guessorig[0], &amp;gscore[0], MAX_GUESS);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// phonetic version</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (ph)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (int i = 0; i &lt; MAX_ROOTS; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (rootsphon[i]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="8"/><text:span text:style-name="T1">// lowering rootphon[i]</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>std::string gl;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>int len;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>len = u8_u16(w_gl, rootsphon[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>mkallsmall_utf(w_gl, langnum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>u16_u8(gl, w_gl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>gl.assign(rootsphon[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (!nonbmp)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/><text:span text:style-name="T14">mkallsmall(gl, csconv);</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>len = strlen(rootsphon[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T1">// weight length of the left common substring</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>int leftcommon_score;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>leftcommon_score = leftcommonsubstring(w_word, w_gl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>leftcommon_score = leftcommonsubstring(word, gl.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T1">// heuristic weigthing of ngram scores</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>scoresphon[i] += 2 * lcslen(word, gl) - abs((int)(n - len)) +</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="25"/>leftcommon_score;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (ph)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>bubblesort(&amp;rootsphon[0], NULL, &amp;scoresphon[0], MAX_ROOTS);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// copy over</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>size_t oldns = wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int same = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (int i = 0; i &lt; MAX_GUESS; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (guess[i]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if ((wlst.size() &lt; oldns + maxngramsugs) &amp;&amp; (wlst.size() &lt; maxSug) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>(!same || (gscore[i] &gt; 1000))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>int unique = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T1">// leave only excellent suggestions, if exists</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (gscore[i] &gt; 1000)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>same = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>else if (gscore[i] &lt; -100) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>same = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T1">// keep the best ngram suggestions, unless in ONLYMAXDIFF mode</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (wlst.size() &gt; oldns || (pAMgr &amp;&amp; pAMgr-&gt;<text:span text:style-name="T18">get_onlymaxdiff</text:span>())) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>free(guess[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>if (guessorig[i])</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>free(guessorig[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>for (size_t j = 0; j &lt; wlst.size(); ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T1">// don&apos;t suggest previous suggestions or a previous suggestion with</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/><text:span text:style-name="T1">// prefixes or affixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if ((!guessorig[i] &amp;&amp; strstr(guess[i], wlst[j].c_str())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>(guessorig[i] &amp;&amp; strstr(guessorig[i], wlst[j].c_str())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/><text:span text:style-name="T1">// check forbidden words</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>!<text:span text:style-name="T11">checkword</text:span>(guess[i], 0, NULL, NULL)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>unique = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (unique) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (guessorig[i]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>wlst.push_back(guessorig[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>wlst.push_back(guess[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>free(guess[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (guessorig[i])</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>free(guessorig[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>free(guess[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (guessorig[i])</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>free(guessorig[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>oldns = wlst.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (ph)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (int i = 0; i &lt; MAX_ROOTS; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (rootsphon[i]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if ((wlst.size() &lt; oldns + MAXPHONSUGS) &amp;&amp; (wlst.size() &lt; maxSug)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>int unique = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>for (size_t j = 0; j &lt; wlst.size(); ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/><text:span text:style-name="T1">// don&apos;t suggest previous suggestions or a previous suggestion with</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/><text:span text:style-name="T1">// prefixes or affixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>if (strstr(rootsphon[i], wlst[j].c_str()) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/><text:span text:style-name="T1">// check forbidden words</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>!<text:span text:style-name="T11">checkword</text:span>(rootsphon[i], 0, NULL, NULL)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>unique = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (unique) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>wlst.push_back(rootsphon[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>if (nonbmp)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>utf8 = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// see if a candidate suggestion is spelled correctly</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// needs to check both root words and words with affixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// obsolote MySpell-HU modifications:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// return value 2 and 3 marks compounding with hyphen (-)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// `3&apos; marks roots without suffix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<text:span text:style-name="T10"><office:annotation office:name="__Annotation__5286_166794943">
        <dc:creator>Unknown Author</dc:creator>
        <dc:date>2018-09-20T11:54:40.975787501</dc:date>
        <text:p text:style-name="P13"><text:span text:style-name="T21">Special checkwork for finding suggestions</text:span></text:p>
       </office:annotation></text:span><text:span text:style-name="T10">checkword</text:span><office:annotation-end office:name="__Annotation__5286_166794943"/>(const std::string&amp; word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="26"/>int cpdsuggest,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="26"/>int* timer,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="26"/>clock_t* timelimit) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// check time limit</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (timer) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>(*timer)--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!(*timer) &amp;&amp; timelimit) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if ((clock() - *timelimit) &gt; <office:annotation office:name="__Annotation__4515_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:15:50.430177863</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">// timelimit: max ~1/4 sec (process time on Linux) for a time consuming function</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T22"/></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define TIMELIMIT (CLOCKS_PER_SEC / 4)</text:span></text:p>
      </office:annotation>TIMELIMIT<office:annotation-end office:name="__Annotation__4515_3395360522"/>)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>*timer = MAXPLUSTIMER;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (pAMgr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>struct hentry* rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>int nosuffix = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (cpdsuggest == 1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (pAMgr-&gt;<text:span text:style-name="T18">get_compound</text:span>()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>struct hentry* rv2 = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>struct hentry* rwords[100]; <text:s/><text:span text:style-name="T1">// buffer for COMPOUND pattern checking</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>rv = pAMgr-&gt;<text:span text:style-name="T18">compound_check</text:span>(word, 0, 0, 100, 0, NULL, (hentry**)&amp;rwords, 0, 1, 0); <text:s/><text:span text:style-name="T1">// EXT</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (rv &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>(!(rv2 = pAMgr-&gt;<text:span text:style-name="T18">lookup</text:span>(word.c_str())) || !rv2-&gt;astr ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="13"/>!(TESTAFF(rv2-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_forbiddenword</text:span>(), rv2-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="15"/>TESTAFF(rv2-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_nosuggest</text:span>(), rv2-&gt;alen))))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>return 3; <text:s/><text:span text:style-name="T1">// XXX obsolote categorisation + only ICONV needs affix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="21"/><text:span text:style-name="T1">// flag check?</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>rv = pAMgr-&gt;<text:span text:style-name="T18">lookup</text:span>(word.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if ((rv-&gt;astr) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>(TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_forbiddenword</text:span>(), rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="11"/>TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_nosuggest</text:span>(), rv-&gt;alen)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>while (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (rv-&gt;astr &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>(TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_needaffix</text:span>(), rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="13"/>TESTAFF(rv-&gt;astr, ONLYUPCASEFLAG, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="13"/>TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_onlyincompound</text:span>(), rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>rv = rv-&gt;next_homonym;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>rv = pAMgr-&gt;<text:span text:style-name="T18">prefix_check</text:span>(word.c_str(), word.size(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="31"/>0); <text:s/><text:span text:style-name="T1">// only prefix, and prefix + suffix XXX</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>nosuffix = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>rv = pAMgr-&gt;<text:span text:style-name="T18">suffix_check</text:span>(word.c_str(), word.size(), 0, NULL,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="31"/>FLAG_NULL, FLAG_NULL, IN_CPD_NOT); <text:s/><text:span text:style-name="T1">// only suffix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!rv &amp;&amp; pAMgr-&gt;<text:span text:style-name="T18">have_contclass</text:span>()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>rv = pAMgr-&gt;<text:span text:style-name="T18">suffix_check_twosfx</text:span>(word.c_str(), word.size(), 0, NULL, FLAG_NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (!rv)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>rv = pAMgr-&gt;<text:span text:style-name="T18">prefix_check_twosfx</text:span>(word.c_str(), word.size(), 1, FLAG_NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// check forbidden words</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((rv) &amp;&amp; (rv-&gt;astr) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>(TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_forbiddenword</text:span>(), rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="9"/>TESTAFF(rv-&gt;astr, ONLYUPCASEFLAG, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="9"/>TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_nosuggest</text:span>(), rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="9"/>TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_onlyincompound</text:span>(), rv-&gt;alen)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (rv) { <text:s/><text:span text:style-name="T1">// XXX obsolote</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if ((pAMgr-&gt;<text:span text:style-name="T18">get_compoundflag</text:span>()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_compoundflag</text:span>(), rv-&gt;alen))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>return 2 + nosuffix;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<text:span text:style-name="T10"><office:annotation office:name="__Annotation__5287_166794943">
        <dc:creator>Unknown Author</dc:creator>
        <dc:date>2018-09-20T11:55:03.232158220</dc:date>
        <text:p text:style-name="P13"><text:span text:style-name="T21">Special check for forbidden words for suggestions</text:span></text:p>
       </office:annotation></text:span><text:span text:style-name="T10">check_forbidden</text:span><office:annotation-end office:name="__Annotation__5287_166794943"/>(const char* word, int len) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (pAMgr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>struct hentry* rv = pAMgr-&gt;<text:span text:style-name="T18">lookup</text:span>(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (rv &amp;&amp; rv-&gt;astr &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>(TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_needaffix</text:span>(), rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="9"/>TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_onlyincompound</text:span>(), rv-&gt;alen)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!(pAMgr-&gt;<text:span text:style-name="T18">prefix_check</text:span>(word, len, 1)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>rv = pAMgr-&gt;<text:span text:style-name="T18">suffix_check</text:span>(word, len, 0, NULL,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="31"/>FLAG_NULL, FLAG_NULL, IN_CPD_NOT); <text:s/><text:span text:style-name="T1">// prefix+suffix, suffix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// check forbidden words</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((rv) &amp;&amp; (rv-&gt;astr) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_forbiddenword</text:span>(), rv-&gt;alen))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">std::string SuggestMgr::<text:span text:style-name="T10"><office:annotation office:name="__Annotation__5288_166794943">
        <dc:creator>Unknown Author</dc:creator>
        <dc:date>2018-09-20T11:55:27.376780411</dc:date>
        <text:p text:style-name="P13"><text:span text:style-name="T21">These and other morph methods are out of scope for version 2.0</text:span></text:p>
       </office:annotation></text:span><text:span text:style-name="T10">suggest_morph</text:span><office:annotation-end office:name="__Annotation__5288_166794943"/>(const std::string&amp; in_w) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>struct hentry* rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!pAMgr)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return std::string();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string w(in_w);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// word reversing wrapper for complex prefixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>reverseword_utf(w);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T14">reverseword(w);</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>rv = pAMgr-&gt;<text:span text:style-name="T18">lookup</text:span>(w.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>while (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((!rv-&gt;astr) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>!(TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_forbiddenword</text:span>(), rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_needaffix(</text:span>), rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>TESTAFF(rv-&gt;astr, pAMgr-&gt;<text:span text:style-name="T18">get_onlyincompound</text:span>(), rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (!HENTRY_FIND(rv, MORPH_STEM)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>result.append(<office:annotation office:name="__Annotation__4766_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T17:14:36.893711759</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MORPH_STEM &quot;st:&quot;</text:span></text:p>
      </office:annotation>MORPH_STEM<office:annotation-end office:name="__Annotation__4766_3395360522"/>);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>result.append(w);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (HENTRY_DATA(rv)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>result.append(HENTRY_DATA2(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>result.append(&quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>rv = rv-&gt;<text:span text:style-name="T19">next_homonym</text:span>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string st = pAMgr-&gt;<text:span text:style-name="T18">affix_check_morph</text:span>(w.c_str(), w.size());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!st.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>result.append(st);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (pAMgr-&gt;<text:span text:style-name="T18">get_compound</text:span>() &amp;&amp; result.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>struct hentry* rwords[100]; <text:s/><text:span text:style-name="T1">// buffer for COMPOUND pattern checking</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>pAMgr-&gt;<text:span text:style-name="T18">compound_check_morph</text:span>(w.c_str(), w.size(), 0, 0, 100, 0, NULL, (hentry**)&amp;rwords, 0, result,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="32"/>NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T19">line_uniq</text:span>(result, MSEP_REC);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">static int <text:span text:style-name="T10">get_sfxcount</text:span>(const char* morph) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!morph || !*morph)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int n = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>const char* old = morph;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><office:annotation office:name="__Annotation__4765_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T17:13:44.125131228</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MORPH_DERI_PFX &quot;dp:&quot;</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MORPH_INFL_PFX &quot;ip:&quot;</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MORPH_TERM_PFX &quot;tp:&quot;</text:span></text:p>
      </office:annotation><text:s text:c="2"/>morph = strstr(morph, MORPH_DERI_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!morph)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>morph = strstr(old, MORPH_INFL_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!morph)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>morph = strstr(old, MORPH_TERM_SFX);<office:annotation-end office:name="__Annotation__4765_3395360522"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>while (morph) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>n++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>old = morph;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>morph = strstr(morph + 1, MORPH_DERI_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!morph)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>morph = strstr(old + 1, MORPH_INFL_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!morph)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>morph = strstr(old + 1, MORPH_TERM_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return n;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">/* affixation */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">std::string SuggestMgr::<text:span text:style-name="T10">suggest_hentry_gen</text:span>(hentry* rv, const char* pattern) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int sfxcount = <text:span text:style-name="T11">get_sfxcount</text:span>(pattern);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (<text:span text:style-name="T11">get_sfxcount</text:span>(HENTRY_DATA(rv)) &gt; sfxcount)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (HENTRY_DATA(rv)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>std::string aff = pAMgr-&gt;<text:span text:style-name="T18">morphgen</text:span>(HENTRY_WORD(rv), rv-&gt;blen, rv-&gt;astr, rv-&gt;alen,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="38"/>HENTRY_DATA(rv), pattern, 0);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!aff.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>result.append(aff);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>result.append(&quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// check all allomorphs</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>char* p = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (HENTRY_DATA(rv))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>p = (char*)strstr(HENTRY_DATA2(rv), <office:annotation office:name="__Annotation__4768_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T17:15:13.262359497</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MORPH_ALLOMORPH &quot;al:&quot;</text:span></text:p>
      </office:annotation>MORPH_ALLOMORPH<office:annotation-end office:name="__Annotation__4768_3395360522"/>);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>while (p) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>p += <office:annotation office:name="__Annotation__4887_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T17:19:41.251372044</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MORPH_STEM &quot;st:&quot;</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MORPH_TAG_LEN strlen(MORPH_STEM)</text:span></text:p>
      </office:annotation>MORPH_TAG_LEN<office:annotation-end office:name="__Annotation__4887_3395360522"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>int plen = fieldlen(p);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>std::string allomorph(p, plen);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>struct hentry* rv2 = pAMgr-&gt;<text:span text:style-name="T18">lookup</text:span>(allomorph.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>while (rv2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>// <text:s text:c="11"/>if (HENTRY_DATA(rv2) &amp;&amp; get_sfxcount(HENTRY_DATA(rv2)) &lt;=</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:soft-page-break/><text:s text:c="6"/>// <text:s text:c="11"/>sfxcount) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (HENTRY_DATA(rv2)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>char* st = (char*)strstr(HENTRY_DATA2(rv2), MORPH_STEM);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (st &amp;&amp; (strncmp(st + MORPH_TAG_LEN, HENTRY_WORD(rv),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="27"/>fieldlen(st + MORPH_TAG_LEN)) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>std::string aff = pAMgr-&gt;<text:span text:style-name="T18">morphgen</text:span>(HENTRY_WORD(rv2), rv2-&gt;blen, rv2-&gt;astr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="44"/>rv2-&gt;alen, HENTRY_DATA(rv2), pattern, 0);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (!aff.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>result.append(aff);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>result.append(&quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>rv2 = rv2-&gt;next_homonym;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>p = strstr(p + plen, MORPH_ALLOMORPH);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">std::string SuggestMgr::<text:span text:style-name="T10">suggest_gen</text:span>(const std::vector&lt;std::string&gt;&amp; desc, const std::string&amp; in_pattern) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (desc.empty() || !pAMgr)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return std::string();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>const char* pattern = in_pattern.c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string result2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string newpattern;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>struct hentry* rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><text:span text:style-name="T1">// search affixed forms with and without derivational suffixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>while (1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (size_t k = 0; k &lt; desc.size(); ++k) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>std::string result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T1">// add compound word parts (except the last one)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>const char* s = desc[k].c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>const char* part = strstr(s, <office:annotation office:name="__Annotation__4890_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T17:20:38.596202892</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T22">#define MORPH_PART &quot;pa:&quot;</text:span></text:p>
       <text:p text:style-name="P12"><text:span text:style-name="T22"/></text:p>
      </office:annotation>MORPH_PART<office:annotation-end office:name="__Annotation__4890_3395360522"/>);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (part) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>const char* nextpart = strstr(part + 1, MORPH_PART);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>while (nextpart) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>std::string field;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>copy_field(field, part, MORPH_PART);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>result.append(field);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>part = nextpart;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>nextpart = strstr(part + 1, MORPH_PART);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>s = part;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>std::string tok(s);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>size_t pos = tok.find(&quot; | &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>while (pos != std::string::npos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>tok[pos + 1] = MSEP_ALT;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>pos = tok.find(&quot; | &quot;, pos);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>std::vector&lt;std::string&gt; pl = line_tok(tok,<office:annotation office:name="__Annotation__4891_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T17:21:05.204783791</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">#define MSEP_ALT &apos;\v&apos;</text:span></text:p>
      </office:annotation> MSEP_ALT<office:annotation-end office:name="__Annotation__4891_3395360522"/>);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>for (size_t i = 0; i &lt; pl.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/><text:span text:style-name="T1">// remove inflectional and terminal suffixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>size_t is = pl[i].find(MORPH_INFL_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (is != std::string::npos)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>pl[i].resize(is);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="8"/>size_t ts = pl[i].find(MORPH_TERM_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>while (ts != std::string::npos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>pl[i][ts] = &apos;_&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>ts = pl[i].find(MORPH_TERM_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>const char* st = strstr(s, MORPH_STEM);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (st) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>copy_field(tok, st, MORPH_STEM);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>rv = pAMgr-&gt;<text:span text:style-name="T18">lookup</text:span>(tok.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>while (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>std::string newpat(pl[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>newpat.append(pattern);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>std::string sg = <text:span text:style-name="T11">suggest_hentry_gen</text:span>(rv, newpat.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>if (sg.empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>sg = <text:span text:style-name="T11">suggest_hentry_gen</text:span>(rv, pattern);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>if (!sg.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>std::vector&lt;std::string&gt; gen = line_tok(sg, MSEP_REC);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>for (size_t j = 0; j &lt; gen.size(); ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>result2.push_back(MSEP_REC);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>result2.append(result);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>if (pl[i].find(MORPH_SURF_PFX) != std::string::npos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="18"/>std::string field;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="18"/>copy_field(field, pl[i], MORPH_SURF_PFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="18"/>result2.append(field);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>result2.append(gen[j]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>rv = rv-&gt;next_homonym;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!result2.empty() || !strstr(pattern, MORPH_DERI_SFX))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>newpattern.assign(pattern);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>mystrrep(newpattern, MORPH_DERI_SFX, MORPH_TERM_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>pattern = newpattern.c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return result2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">// generate an n-gram score comparing s1 and s2, UTF16 version</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">int SuggestMgr::ngram(int n,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="22"/>const std::vector&lt;w_char&gt;&amp; su1,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="22"/>const std::vector&lt;w_char&gt;&amp; su2,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="22"/>int opt) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>int nscore = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>int ns;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>int l1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>int l2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>int test = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>l1 = su1.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>l2 = su2.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>if (l2 == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>for (int j = 1; j &lt;= n; j++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>ns = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>for (int i = 0; i &lt;= (l1 - j); i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>int k = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>for (int l = 0; l &lt;= (l2 - j); l++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>for (k = 0; k &lt; j; k++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:soft-page-break/><text:s text:c="10"/>const w_char&amp; c1 = su1[i + k];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>const w_char&amp; c2 = su2[l + k];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>if ((c1.l != c2.l) || (c1.h != c2.h))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>if (k == j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>ns++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (k != j &amp;&amp; opt &amp; NGRAM_WEIGHTED) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>ns--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>test++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>if (i == 0 || i == l1 - j)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>ns--; <text:s/>// side weight</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>nscore = nscore + ns;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (ns &lt; 2 &amp;&amp; !(opt &amp; NGRAM_WEIGHTED))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>ns = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>if (opt &amp; NGRAM_LONGER_WORSE)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>ns = (l2 - l1) - 2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>if (opt &amp; NGRAM_ANY_MISMATCH)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>ns = abs(l2 - l1) - 2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>ns = (nscore - ((ns &gt; 0) ? ns : 0));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>return ns;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// generate an n-gram score comparing s1 and s2, non-UTF16 version</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<text:span text:style-name="T10">ngram</text:span>(int n,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="22"/>const std::string&amp; s1,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="22"/>const std::string&amp; s2,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="22"/>int opt) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int nscore = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int ns;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int l1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int l2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int test = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>l2 = s2.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (l2 == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>l1 = s1.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (int j = 1; j &lt;= n; j++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>ns = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (int i = 0; i &lt;= (l1 - j); i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T1">//s2 is haystack, s1[i..i+j) is needle</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (s2.find(s1.c_str()+i, 0, j) != std::string::npos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>ns++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>} else if (opt &amp; <office:annotation office:name="__Annotation__4558_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:27:59.692016567</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
      </office:annotation>NGRAM_WEIGHTED<office:annotation-end office:name="__Annotation__4558_3395360522"/>) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>ns--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>test++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (i == 0 || i == l1 - j)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>ns--; <text:s/><text:span text:style-name="T1">// side weight</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>nscore = nscore + ns;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (ns &lt; 2 &amp;&amp; !(opt &amp; <office:annotation office:name="__Annotation__4557_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:27:54.699918926</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
      </office:annotation>NGRAM_WEIGHTED<office:annotation-end office:name="__Annotation__4557_3395360522"/>))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>ns = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="2"/>if (opt &amp; <office:annotation office:name="__Annotation__4545_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:25:54.281584866</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
      </office:annotation>NGRAM_LONGER_WORSE<office:annotation-end office:name="__Annotation__4545_3395360522"/>)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>ns = (l2 - l1) - 2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (opt &amp; <office:annotation office:name="__Annotation__4546_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:25:59.257860747</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">bitmasked flag NGRAM_...</text:span></text:p>
      </office:annotation>NGRAM_ANY_MISMATCH<office:annotation-end office:name="__Annotation__4546_3395360522"/>)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>ns = abs(l2 - l1) - 2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>ns = (nscore - ((ns &gt; 0) ? ns : 0));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return ns;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9">// length of the left common substring of s1 and (decapitalised) s2, UTF version</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9">int SuggestMgr::leftcommonsubstring(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="4"/>const std::vector&lt;w_char&gt;&amp; su1,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="4"/>const std::vector&lt;w_char&gt;&amp; su2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="2"/>int l1 = su1.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="2"/>int l2 = su2.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="2"/>// decapitalize dictionary word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="2"/>if (complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="4"/>if (su1[l1 - 1] == su2[l2 - 1])</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="6"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="4"/>unsigned short idx = su2.empty() ? 0 : (su2[0].h &lt;&lt; 8) + su2[0].l;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="4"/>unsigned short otheridx = su1.empty() ? 0 : (su1[0].h &lt;&lt; 8) + su1[0].l;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="4"/>if (otheridx != idx &amp;&amp; (otheridx != unicodetolower(idx, langnum)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="6"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="4"/>int i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="4"/>for (i = 1; (i &lt; l1) &amp;&amp; (i &lt; l2) &amp;&amp; (su1[i].l == su2[i].l) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="16"/>(su1[i].h == su2[i].h);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="9"/>i++)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="6"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="4"/>return i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P9">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// length of the left common substring of s1 and (decapitalised) s2, non-UTF</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<text:span text:style-name="T10">leftcommonsubstring</text:span>(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>const char* s1,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>const char* s2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>int l1 = strlen(s1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>int l2 = strlen(s2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (l1 &lt;= l2 &amp;&amp; s2[l1 - 1] == s2[l2 - 1])</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>} else if (csconv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>const char* olds = s1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// decapitalise dictionary word</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((*s1 != *s2) &amp;&amp; (*s1 != csconv[((unsigned char)*s2)].<text:span text:style-name="T14">clower</text:span>))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>do {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>s1++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>s2++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>} while ((*s1 == *s2) &amp;&amp; (*s1 != &apos;\0&apos;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return (int)(s1 - olds);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">int SuggestMgr::<text:span text:style-name="T10">commoncharacterpositions</text:span>(const char* s1,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="41"/>const char* s2,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="41"/>int* is_swap) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int num = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int diff = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int diffpos[2];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>*is_swap = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>std::vector&lt;w_char&gt; su1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:soft-page-break/><text:s text:c="4"/>std::vector&lt;w_char&gt; su2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>int l1 = u8_u16(su1, s1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>int l2 = u8_u16(su2, s2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (l1 &lt;= 0 || l2 &lt;= 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>// decapitalize dictionary word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if (complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>su2[l2 - 1] = lower_utf(su2[l2 - 1], langnum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>su2[0] = lower_utf(su2[0], langnum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>for (int i = 0; (i &lt; l1) &amp;&amp; (i &lt; l2); i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>if (su1[i] == su2[i]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>num++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>if (diff &lt; 2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="10"/>diffpos[diff] = i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>diff++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>if ((diff == 2) &amp;&amp; (l1 == l2) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>(su1[diffpos[0]] == su2[diffpos[1]]) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="8"/>(su1[diffpos[1]] == su2[diffpos[0]]))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="6"/>*is_swap = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>size_t i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>std::string t(s2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/><text:span text:style-name="T1">// decapitalize dictionary word</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>size_t l2 = t.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>t[l2 - 1] = csconv[(unsigned char)t[l2 - 1]].<text:span text:style-name="T14">clower</text:span>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/><text:span text:style-name="T14">mkallsmall(t, csconv);</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (i = 0; i &lt; t.size() &amp;&amp; (*(s1 + i) != 0); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (*(s1 + i) == t[i]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>num++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (diff &lt; 2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>diffpos[diff] = i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>diff++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if ((diff == 2) &amp;&amp; (*(s1 + i) == 0) &amp;&amp; i == t.size() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>(*(s1 + diffpos[0]) == t[diffpos[1]]) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>(*(s1 + diffpos[1]) == t[diffpos[0]]))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>*is_swap = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return num;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><office:annotation office:name="__Annotation__4691_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:46:33.440865909</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">determine length of string</text:span></text:p>
      </office:annotation>int SuggestMgr::mystrlen(const char* word) {<office:annotation-end office:name="__Annotation__4691_3395360522"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>std::vector&lt;w_char&gt; w;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>return u8_u16(w, word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return strlen(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// sort in decreasing order of score</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><office:annotation office:name="__Annotation__4690_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:45:53.984141754</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">These and methods following are simple helper functions.</text:span><text:span text:style-name="T20"><text:line-break/></text:span><text:span text:style-name="T20"><text:line-break/></text:span><text:span text:style-name="T20">standard implementation will be used, not a custom implementation</text:span></text:p>
      </office:annotation>void SuggestMgr::<text:span text:style-name="T10">bubblesort</text:span>(char** rword, char** rword2, int* rsc, int n) {<office:annotation-end office:name="__Annotation__4690_3395360522"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int m = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>while (m &lt; n) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="4"/>int j = m;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>while (j &gt; 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (rsc[j - 1] &lt; rsc[j]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>int sctmp = rsc[j - 1];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>char* wdtmp = rword[j - 1];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>rsc[j - 1] = rsc[j];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>rword[j - 1] = rword[j];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>rsc[j] = sctmp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>rword[j] = wdtmp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (rword2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>wdtmp = rword2[j - 1];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>rword2[j - 1] = rword2[j];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>rword2[j] = wdtmp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>j--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>m++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P11">// longest common subsequence</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">void SuggestMgr::<text:span text:style-name="T10">lcs</text:span>(const char* s,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="21"/>const char* s2,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="21"/>int* l1,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="21"/>int* l2,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="21"/>char** result) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int n, m;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::vector&lt;w_char&gt; su;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::vector&lt;w_char&gt; su2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>char* b;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>char* c;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int j;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>m = u8_u16(su, s);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="4"/>n = u8_u16(su2, s2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P8"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>m = strlen(s);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>n = strlen(s2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>c = (char*)malloc((m + 1) * (n + 1));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>b = (char*)malloc((m + 1) * (n + 1));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><office:annotation office:name="__Annotation__4687_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:42:35.212425909</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">validation of useful allocation</text:span></text:p>
      </office:annotation>if (!c || !b) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (c)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>free(c);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (b)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>free(b);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>*result = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}<office:annotation-end office:name="__Annotation__4687_3395360522"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><office:annotation office:name="__Annotation__4688_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:43:24.653309710</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">initalization</text:span></text:p>
      </office:annotation><text:s text:c="2"/>for (i = 1; i &lt;= m; i++)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>c[i * (n + 1)] = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (j = 0; j &lt;= n; j++)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>c[j] = 0;<office:annotation-end office:name="__Annotation__4688_3395360522"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/><office:annotation office:name="__Annotation__4689_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:43:36.221548491</dc:date>
       <text:p text:style-name="P12"><text:span text:style-name="T20">the actual algorithm for finding longest common subsequence</text:span></text:p>
      </office:annotation>for (i = 1; i &lt;= m; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (j = 1; j &lt;= n; j++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (<text:span text:style-name="T17">((utf8) &amp;&amp; (su[i - 1] == su2[j - 1])) ||</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:span text:style-name="T17"><text:s text:c="10"/>((!utf8) &amp;&amp;</text:span> (s[i - 1] == s2[j - 1]))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>c[i * (n + 1) + j] = c[(i - 1) * (n + 1) + j - 1] + 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>b[i * (n + 1) + j] = LCS_UPLEFT;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>} else if (c[(i - 1) * (n + 1) + j] &gt;= c[i * (n + 1) + j - 1]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>c[i * (n + 1) + j] = c[(i - 1) * (n + 1) + j];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="8"/>b[i * (n + 1) + j] = LCS_UP;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>c[i * (n + 1) + j] = c[i * (n + 1) + j - 1];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>b[i * (n + 1) + j] = LCS_LEFT;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}<office:annotation-end office:name="__Annotation__4689_3395360522"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>*result = b;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>free(c);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>*l1 = m;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>*l2 = n;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><office:annotation office:name="__Annotation__4623_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:39:52.809424572</dc:date>
       <text:p><text:span text:style-name="T20">longest common subsequence for c_str</text:span></text:p>
      </office:annotation>int SuggestMgr::<text:span text:style-name="T10">lcslen</text:span>(const char* s, const char* s2) {<office:annotation-end office:name="__Annotation__4623_3395360522"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int m;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int n;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int j;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>char* result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int len = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>lcs(s, s2, &amp;m, &amp;n, &amp;result);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!result)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>i = m;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>j = n;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>while ((i != 0) &amp;&amp; (j != 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (result[i * (n + 1) + j] == LCS_UPLEFT) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>len++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>i--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>j--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>} else if (result[i * (n + 1) + j] == LCS_UP) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>i--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>j--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>free(result);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return len;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><office:annotation office:name="__Annotation__4624_3395360522">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-09-17T11:40:08.441655344</dc:date>
       <text:p><text:span text:style-name="T20">longest common subsequence for C++ string</text:span></text:p>
      </office:annotation>int SuggestMgr::<text:span text:style-name="T10">lcslen</text:span>(const std::string&amp; s, const std::string&amp; s2) {<office:annotation-end office:name="__Annotation__4624_3395360522"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return lcslen(s.c_str(), s2.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
   </text:list>
  </office:text>
 </office:body>
</office:document>