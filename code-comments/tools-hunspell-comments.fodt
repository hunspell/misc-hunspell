<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rpt="http://openoffice.org/2005/report" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:officeooo="http://openoffice.org/2009/office" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:css3t="http://www.w3.org/TR/css3-text/" office:version="1.2" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><dc:date>2018-03-11T16:29:09.881547595</dc:date><meta:editing-duration>P1DT3H5M13S</meta:editing-duration><meta:editing-cycles>25</meta:editing-cycles><meta:generator>LibreOffice/5.4.5.1$Linux_X86_64 LibreOffice_project/40m0$Build-1</meta:generator><meta:document-statistic meta:table-count="0" meta:image-count="0" meta:object-count="0" meta:page-count="35" meta:paragraph-count="2207" meta:word-count="9745" meta:character-count="74226" meta:non-whitespace-character-count="55483"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">14</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">24901</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">23564</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">6283</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">7555</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">14</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">24899</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">23576</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">1</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">95</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
     <config:config-item config:name="AnchoredTextOverflowLegacy" config:type="boolean">false</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TreatSingleColumnBreakAsPageBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">1026170</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="ForbiddenCharacters">
    <config:config-item-map-entry>
     <config:config-item config:name="Language" config:type="string">zxx</config:config-item>
     <config:config-item config:name="Country" config:type="string"/>
     <config:config-item config:name="Variant" config:type="string"/>
     <config:config-item config:name="BeginLine" config:type="string"/>
     <config:config-item config:name="EndLine" config:type="string"/>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbeddedDatabaseName" config:type="string"/>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="Rsid" config:type="int">4553819</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="MsWordCompTrailingBlanks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PropLineSpacingShrinksFirstLine" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SubtractFlysAnchoredAtFlys" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddVerticalFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink">
    <ooo:library-embedded ooo:name="Standard"/>
   </ooo:libraries>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="Lohit Devanagari1" svg:font-family="&apos;Lohit Devanagari&apos;"/>
  <style:font-face style:name="DejaVu Sans Mono" svg:font-family="&apos;DejaVu Sans Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Mono" svg:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Times New Roman" svg:font-family="&apos;Times New Roman&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Lohit Devanagari" svg:font-family="&apos;Lohit Devanagari&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans CJK SC Regular" svg:font-family="&apos;Noto Sans CJK SC Regular&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans Devanagari" svg:font-family="&apos;Noto Sans Devanagari&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#3465a4" draw:fill-color="#729fcf" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.1181in" draw:shadow-offset-y="0.1181in" draw:start-line-spacing-horizontal="0.1114in" draw:start-line-spacing-vertical="0.1114in" draw:end-line-spacing-horizontal="0.1114in" draw:end-line-spacing-vertical="0.1114in" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="zxx" fo:country="none" style:letter-kerning="true" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.4925in" style:writing-mode="page"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="zxx" fo:country="none" style:letter-kerning="true" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text"/>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" loext:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Liberation Sans" fo:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="Noto Sans CJK SC Regular" style:font-family-asian="&apos;Noto Sans CJK SC Regular&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0972in" loext:contextual-spacing="false" fo:line-height="120%"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.0835in" fo:margin-bottom="0.0835in" loext:contextual-spacing="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="12pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;"/>
  </style:style>
  <style:style style:name="Preformatted_20_Text" style:display-name="Preformatted Text" style:family="paragraph" style:parent-style-name="Standard" style:class="html">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Mono" fo:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed" fo:font-size="10pt" style:font-name-asian="DejaVu Sans Mono" style:font-family-asian="&apos;DejaVu Sans Mono&apos;" style:font-family-generic-asian="modern" style:font-pitch-asian="fixed" style:font-size-asian="10pt" style:font-name-complex="Liberation Mono" style:font-family-complex="&apos;Liberation Mono&apos;" style:font-family-generic-complex="modern" style:font-pitch-complex="fixed" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="Numbering_20_Symbols" style:display-name="Numbering Symbols" style:family="text"/>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:list-style style:name="Numbering_20_2" style:display-name="Numbering 2">
   <text:list-level-style-number text:level="1" text:style-name="Numbering_20_Symbols" style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment" fo:text-align="end">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.1965in" fo:text-indent="-0.1965in" fo:margin-left="0.1965in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="2">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.3929in" fo:text-indent="-0.1965in" fo:margin-left="0.3929in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="3">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.7866in" fo:text-indent="-0.3937in" fo:margin-left="0.7866in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="4">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.2791in" fo:text-indent="-0.4925in" fo:margin-left="1.2791in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="5">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.8693in" fo:text-indent="-0.5902in" fo:margin-left="1.8693in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="6">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.5783in" fo:text-indent="-0.7091in" fo:margin-left="2.5783in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="7">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="3.4839in" fo:text-indent="-0.9055in" fo:margin-left="3.4839in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="8">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="4.5075in" fo:text-indent="-1.0236in" fo:margin-left="4.5075in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="9">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="5.6102in" fo:text-indent="-1.1028in" fo:margin-left="5.6102in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="10">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="6.8311in" fo:text-indent="-1.2209in" fo:margin-left="6.8311in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
  </text:list-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.1965in" style:num-format="1" text:number-position="left" text:increment="5"/>
 </office:styles>
 <office:automatic-styles>
  <style:style style:name="P1" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:line-height="100%" fo:text-align="start" style:justify-single-word="false" fo:hyphenation-ladder-count="no-limit" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:writing-mode="lr-tb">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:style>
  <style:style style:name="P2" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:line-height="100%" fo:text-align="start" style:justify-single-word="false" fo:hyphenation-ladder-count="no-limit" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="ideograph-alpha" style:punctuation-wrap="simple" style:line-break="strict" style:writing-mode="lr-tb">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:style>
  <style:style style:name="P3" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:background-color="#fff200"/>
  </style:style>
  <style:style style:name="P4" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:background-color="transparent"/>
  </style:style>
  <style:style style:name="P5" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="Numbering_20_2"/>
  <style:style style:name="P6" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="Numbering_20_2">
   <style:text-properties fo:background-color="#fff200"/>
  </style:style>
  <style:style style:name="P7" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="Numbering_20_2">
   <style:text-properties fo:background-color="transparent"/>
  </style:style>
  <style:style style:name="T1" style:family="text">
   <style:text-properties fo:background-color="#fff200" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T2" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" style:use-window-font-color="true" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Liberation Serif" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" loext:char-shading-value="0" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T3" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Liberation Serif" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" loext:char-shading-value="0" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T4" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Times New Roman" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" loext:char-shading-value="0" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Noto Sans Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T5" style:family="text">
   <style:text-properties fo:background-color="#ffffff" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T6" style:family="text">
   <style:text-properties fo:font-weight="bold" fo:background-color="#fff200" loext:char-shading-value="0" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T7" style:family="text">
   <style:text-properties fo:background-color="transparent" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T8" style:family="text">
   <style:text-properties fo:background-color="#faa61a" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T9" style:family="text">
   <style:text-properties fo:background-color="#ef413d" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T10" style:family="text">
   <style:text-properties fo:background-color="#adc5e7" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T11" style:family="text">
   <style:text-properties fo:background-color="#e0efd4" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T12" style:family="text">
   <style:text-properties fo:background-color="#72bf44" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T13" style:family="text">
   <style:text-properties fo:background-color="#bcaed5" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T14" style:family="text">
   <style:text-properties fo:background-color="#c7a0cb" loext:char-shading-value="0"/>
  </style:style>
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="8.2681in" fo:page-height="11.6929in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="0.5118in" fo:margin-bottom="0.5118in" fo:margin-left="0.5902in" fo:margin-right="0.5902in" style:writing-mode="lr-tb" style:footnote-max-height="0in">
    <style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1"/>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <office:forms form:automatic-focus="false" form:apply-design-mode="false"/>
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
   </text:sequence-decls>
   <text:list xml:id="list981731325" text:style-name="Numbering_20_2">
    <text:list-item>
     <text:p text:style-name="P5">/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">/* ***** BEGIN LICENSE BLOCK *****</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Version: MPL 1.1/GPL 2.0/LGPL 2.1</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Copyright (C) 2002-2017 Németh László</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* The contents of this file are subject to the Mozilla Public License Version</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* 1.1 (the &quot;License&quot;); you may not use this file except in compliance with</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* the License. You may obtain a copy of the License at</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* http://www.mozilla.org/MPL/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Software distributed under the License is distributed on an &quot;AS IS&quot; basis,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* for the specific language governing rights and limitations under the</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* License.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Hunspell is based on MySpell which is Copyright (C) 2002 Kevin Hendricks.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Contributor(s): David Einstein, Davide Prina, Giuseppe Modugno,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Gianluca Turconi, Simon Brouwer, Noll János, Bíró Árpád,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Goldman Eleonóra, Sarlós Tamás, Bencsáth Boldizsár, Halácsy Péter,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Dvornik László, Gefferth András, Nagy Viktor, Varga Dániel, Chris Halls,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Rene Engelhard, Bram Moolenaar, Dafydd Jones, Harri Pitkänen</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Alternatively, the contents of this file may be used under the terms of</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* either the GNU General Public License Version 2 or later (the &quot;GPL&quot;), or</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* the GNU Lesser General Public License Version 2.1 or later (the &quot;LGPL&quot;),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* in which case the provisions of the GPL or the LGPL are applicable instead</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* of those above. If you wish to allow use of your version of this file only</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* under the terms of either the GPL or the LGPL, and not to allow others to</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* use your version of this file under the terms of the MPL, indicate your</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* decision by deleting the provisions above and replace them with the notice</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* and other provisions required by the GPL or the LGPL. If you do not delete</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* the provisions above, a recipient may use your version of this file under</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* the terms of any one of the MPL, the GPL or the LGPL.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* ***** END LICENSE BLOCK ***** */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// glibc &lt; 3.0 (for mkstemp)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifndef __USE_MISC</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define __USE_MISC</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;stdlib.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;stdio.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;sstream&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;string&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;string.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../../config.h&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../hunspell/atypes.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../hunspell/hunspell.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../hunspell/csutil.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../hunspell/hunzip.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define HUNSPELL_VERSION VERSION</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define INPUTLEN 50</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define HUNSPELL_PIPE_HEADING <text:s text:c="49"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;@(#) International Ispell Version 3.2.06 (but really Hunspell &quot; VERSION &quot;)&quot; \</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="75"/>&quot;\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define HUNSPELL_HEADING &quot;Hunspell &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define ODF_EXT &quot;odt|ott|odp|otp|odg|otg|ods|ots&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define ENTITY_APOS &quot;&amp;apos;&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define UTF8_APOS &quot;\xe2\x80\x99&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/>// for debugging only</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">//#define LOG</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define DEFAULTDICNAME &quot;default&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef WIN32</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define LIBDIR &quot;C:\\Hunspell\\&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define USEROOODIR { &quot;Application Data\\OpenOffice.org 2\\user\\wordbook&quot; }</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define OOODIR <text:s text:c="48"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;C:\\Program files\\OpenOffice.org 2.4\\share\\dict\\ooo\\;&quot; \</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;C:\\Program files\\OpenOffice.org 2.3\\share\\dict\\ooo\\;&quot; \</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;C:\\Program files\\OpenOffice.org 2.2\\share\\dict\\ooo\\;&quot; \</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;C:\\Program files\\OpenOffice.org 2.1\\share\\dict\\ooo\\;&quot; \</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;C:\\Program files\\OpenOffice.org 2.0\\share\\dict\\ooo\\&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define HOME &quot;%USERPROFILE%\\&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define DICBASENAME &quot;hunspell_&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define LOGFILE &quot;C:\\Hunspell\\log&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define DIRSEPCH &apos;\\&apos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define DIRSEP &quot;\\&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define PATHSEP &quot;;&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef __MINGW32__</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;sys/types.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;sys/stat.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;dirent.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;unistd.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/textparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/htmlparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/latexparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/manparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/firstparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/xmlparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/odfparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// Not Windows</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;sys/types.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;sys/stat.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;dirent.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;unistd.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/textparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/htmlparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/latexparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/manparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/firstparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/xmlparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;../parsers/odfparser.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define LIBDIR <text:s text:c="15"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/usr/share/hunspell:&quot; <text:s text:c="5"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/usr/share/myspell:&quot; <text:s text:c="6"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/usr/share/myspell/dicts:&quot; \</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/Library/Spelling&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define USEROOODIR { <text:s text:c="17"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;.openoffice.org/3/user/wordbook&quot;, \</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;.openoffice.org2/user/wordbook&quot;, <text:s/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;.openoffice.org2.0/user/wordbook&quot;,\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;Library/Spelling&quot; }</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define OOODIR <text:s text:c="38"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/opt/openoffice.org/basis3.0/share/dict/ooo:&quot; <text:s text:c="4"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/usr/lib/openoffice.org/basis3.0/share/dict/ooo:&quot; \</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>&quot;/opt/openoffice.org2.4/share/dict/ooo:&quot; <text:s text:c="10"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/usr/lib/openoffice.org2.4/share/dict/ooo:&quot; <text:s text:c="6"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/opt/openoffice.org2.3/share/dict/ooo:&quot; <text:s text:c="10"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/usr/lib/openoffice.org2.3/share/dict/ooo:&quot; <text:s text:c="6"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/opt/openoffice.org2.2/share/dict/ooo:&quot; <text:s text:c="10"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/usr/lib/openoffice.org2.2/share/dict/ooo:&quot; <text:s text:c="6"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/opt/openoffice.org2.1/share/dict/ooo:&quot; <text:s text:c="10"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/usr/lib/openoffice.org2.1/share/dict/ooo:&quot; <text:s text:c="6"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/opt/openoffice.org2.0/share/dict/ooo:&quot; <text:s text:c="10"/>\</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>&quot;/usr/lib/openoffice.org2.0/share/dict/ooo&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define HOME getenv(&quot;HOME&quot;)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define DICBASENAME &quot;.hunspell_&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define LOGFILE &quot;/tmp/hunspell.log&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define DIRSEPCH &apos;/&apos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define DIRSEP &quot;/&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define PATHSEP &quot;:&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_ICONV</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;iconv.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;errno.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">char text_conv[MAXLNLEN];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_LOCALE_H</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"># include &lt;locale.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_LANGINFO_H</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"># include &lt;langinfo.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef ENABLE_NLS</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"># include &lt;libintl.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"># undef gettext</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"># define gettext(Msgid) ((const char *) (Msgid))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"># undef textdomain</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"># define textdomain(Domainname) ((const char *) (Domainname))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_CURSES_H</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_NCURSESW_CURSES_H</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;ncursesw/curses.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;curses.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_READLINE</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;readline/readline.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define readline scanline</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// file formats:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">enum { FMT_TEXT, FMT_LATEX, FMT_HTML, FMT_MAN, FMT_FIRST, FMT_XML, FMT_ODF };</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// global variables</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">std::string wordchars;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">char* dicpath = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const w_char* wordchars_utf16 = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">std::vector&lt;w_char&gt; new_wordchars_utf16;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int wordchars_utf16_len;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">char* dicname = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/>char* privdicname = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const char* currentfilename = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int modified; <text:s/>// modified file sign</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">enum {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>NORMAL,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>BADWORD, <text:s text:c="4"/>// print only bad words</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>WORDFILTER, <text:s/>// print only bad words from 1 word/line input</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>BADLINE, <text:s text:c="4"/>// print only lines with bad words</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>STEM, <text:s text:c="7"/>// stem input words</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>ANALYZE, <text:s text:c="4"/>// analyze input words</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>PIPE, <text:s text:c="7"/>// print only stars for LyX compatibility</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>AUTO0, <text:s text:c="6"/>// search typical error (based on SuggestMgr::suggest())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>AUTO, <text:s text:c="7"/>// automatic spelling to standard output</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>AUTO2, <text:s text:c="6"/>// automatic spelling to standard output with sed log</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>AUTO3,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>SUFFIX <text:s/>// print suffixes that can be attached to a given word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}; <text:s text:c="7"/>// automatic spelling to standard output with gcc error format</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int filter_mode = NORMAL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int printgood = 0; <text:s/>// print only good words and lines</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int showpath = 0; <text:s text:c="2"/>// show detected path of the dictionary</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int checkurl = 0; <text:s text:c="2"/>// check URLs and mail addresses</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int checkapos = 0; <text:s/>// force typographic apostrophe</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int warn = 0; <text:s/>// warn potential mistakes (dictionary words with WARN flags)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const char* ui_enc = NULL; <text:s/>// locale character encoding (default for I/O)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const char* io_enc = NULL; <text:s/>// I/O character encoding</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#define DMAX 10 <text:s/>// maximal count of loaded dictionaries</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const char* dic_enc[DMAX]; <text:s/>// dictionary encoding</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">char* path = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int dmax = 0; <text:s/>// dictionary count</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// functions</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_ICONV</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">static const char* fix_encoding_name(const char* enc) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (strcmp(enc, &quot;TIS620-2533&quot;) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>enc = &quot;TIS620&quot;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return enc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">/* change character encoding */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">std::string chenc(const std::string&amp; st, const char* enc1, const char* enc2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifndef HAVE_ICONV</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>(void)enc1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>(void)enc2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return st;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (st.empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return st;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!enc1 || !enc2 || strcmp(enc1, enc2) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return st;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string out(st.size() &lt; 15 ? 15 : st.size(), &apos;\0&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>size_t c1(st.size());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>size_t c2(out.size());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>ICONV_CONST char* source = (ICONV_CONST char*) &amp;st[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char* dest = &amp;out[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>iconv_t conv = iconv_open(fix_encoding_name(enc2), fix_encoding_name(enc1));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (conv == (iconv_t)-1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fprintf(stderr, gettext(&quot;error - iconv_open: %s -&gt; %s\n&quot;), enc2, enc1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="4"/>size_t res;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while ((res = iconv(conv, &amp;source, &amp;c1, &amp;dest, &amp;c2)) == size_t(-1)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (errno == E2BIG) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>//c2 is zero or close to zero</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>size_t next_start = out.size() - c2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>c2 += c1*2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>out.resize(out.size() + c1*2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>dest = &amp;out[next_start];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (res == (size_t)-1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, gettext(&quot;error - iconv: %s -&gt; %s\n&quot;), enc2, enc1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>iconv_close(conv);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>out.resize(dest - &amp;out[0]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return out;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return st;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">TextParser* get_parser(int format, const char* extension, Hunspell* pMS) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>TextParser* p = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int io_utf8 = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char* denc = pMS-&gt;get_dict_encoding().c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_ICONV</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>initialize_utf_tbl(); <text:s/>// also need for 8-bit tokenization</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (io_enc) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if ((strcmp(io_enc, &quot;UTF-8&quot;) == 0) || (strcmp(io_enc, &quot;utf-8&quot;) == 0) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>(strcmp(io_enc, &quot;UTF8&quot;) == 0) || (strcmp(io_enc, &quot;utf8&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>io_utf8 = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>io_enc = &quot;UTF-8&quot;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else if (ui_enc) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>io_enc = ui_enc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (strcmp(ui_enc, &quot;UTF-8&quot;) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>io_utf8 = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>io_enc = denc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (strcmp(denc, &quot;UTF-8&quot;) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>io_utf8 = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (io_utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>const std::vector&lt;w_char&gt;&amp; vec_wordchars_utf16 = pMS-&gt;get_wordchars_utf16();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>const std::string&amp; vec_wordchars = pMS-&gt;get_wordchars_cpp();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>wordchars_utf16_len = vec_wordchars_utf16.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>wordchars_utf16 = wordchars_utf16_len ? &amp;vec_wordchars_utf16[0] : NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if ((strcmp(denc, &quot;UTF-8&quot;) != 0) &amp;&amp; !vec_wordchars.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>const char* wchars = vec_wordchars.c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>size_t c1 = vec_wordchars.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>size_t c2 = MAXLNLEN;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>char* dest = text_conv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>iconv_t conv = iconv_open(&quot;UTF-8&quot;, fix_encoding_name(denc));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (conv == (iconv_t)-1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>fprintf(stderr, gettext(&quot;error - iconv_open: UTF-8 -&gt; %s\n&quot;), denc);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>wordchars_utf16 = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>wordchars_utf16_len = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>iconv(conv, (ICONV_CONST char**)&amp;wchars, &amp;c1, &amp;dest, &amp;c2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>iconv_close(conv);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>u8_u16(new_wordchars_utf16, text_conv);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>std::sort(new_wordchars_utf16.begin(), new_wordchars_utf16.end());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="8"/>wordchars_utf16 = &amp;new_wordchars_utf16[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>wordchars_utf16_len = new_wordchars_utf16.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// 8-bit input encoding</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// detect letters by unicodeisalpha() for tokenization</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>char letters[MAXLNLEN];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>char* pletters = letters;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>char ch[2];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>char u8[10];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>*pletters = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>iconv_t conv = iconv_open(&quot;UTF-8&quot;, fix_encoding_name(io_enc));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (conv == (iconv_t)-1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, gettext(&quot;error - iconv_open: UTF-8 -&gt; %s\n&quot;), io_enc);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for (int i = 32; i &lt; 256; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>size_t c1 = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>size_t c2 = 10;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>char* dest = u8;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>u8[0] = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>char* ch8bit = ch;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>ch[0] = (char)i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>ch[1] = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>size_t res = iconv(conv, (ICONV_CONST char**)&amp;ch8bit, &amp;c1, &amp;dest, &amp;c2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (res != (size_t)-1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::vector&lt;w_char&gt; w;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>u8_u16(w, std::string(u8, dest));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>unsigned short idx = w.empty() ? 0 : (w[0].h &lt;&lt; 8) + w[0].l;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (unicodeisalpha(idx)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>*pletters = (char)i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>pletters++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>iconv_close(conv);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>*pletters = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// UTF-8 wordchars -&gt; 8 bit wordchars</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>const std::string&amp; vec_wordchars = pMS-&gt;get_wordchars_cpp();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>size_t len = vec_wordchars.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (len) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if ((strcmp(denc, &quot;UTF-8&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>len = pMS-&gt;get_wordchars_utf16().size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>char* dest = letters + strlen(letters); <text:s/>// append wordchars</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>size_t c1 = len + 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>size_t c2 = len + 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>conv = iconv_open(fix_encoding_name(io_enc), fix_encoding_name(denc));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (conv == (iconv_t)-1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>fprintf(stderr, gettext(&quot;error - iconv_open: %s -&gt; %s\n&quot;), io_enc,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>denc);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>const char* wchars = vec_wordchars.c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>iconv(conv, (ICONV_CONST char**)&amp;wchars, &amp;c1, &amp;dest, &amp;c2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>iconv_close(conv);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>*dest = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (*letters)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>wordchars.assign(letters);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (strcmp(denc, &quot;UTF-8&quot;) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="4"/>const std::vector&lt;w_char&gt;&amp; vec_wordchars_utf16 = pMS-&gt;get_wordchars_utf16();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>wordchars_utf16 = &amp;vec_wordchars_utf16[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>wordchars_utf16_len = vec_wordchars_utf16.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>io_utf8 = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string casechars = get_casechars(denc);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string wchars = pMS-&gt;get_wordchars_cpp();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>wordchars = casechars + wchars;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>io_enc = denc;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (io_utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>switch (format) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case FMT_LATEX:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new LaTeXParser(wordchars_utf16, wordchars_utf16_len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case FMT_HTML:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new HTMLParser(wordchars_utf16, wordchars_utf16_len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case FMT_MAN:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new ManParser(wordchars_utf16, wordchars_utf16_len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case FMT_XML:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new XMLParser(wordchars_utf16, wordchars_utf16_len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case FMT_ODF:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new ODFParser(wordchars_utf16, wordchars_utf16_len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case FMT_FIRST:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new FirstParser(wordchars.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>switch (format) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case FMT_LATEX:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new LaTeXParser(wordchars.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case FMT_HTML:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new HTMLParser(wordchars.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case FMT_MAN:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new ManParser(wordchars.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case FMT_XML:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new XMLParser(wordchars.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case FMT_ODF:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new ODFParser(wordchars.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case FMT_FIRST:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new FirstParser(wordchars.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if ((!p) &amp;&amp; (extension)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if ((strcmp(extension, &quot;html&quot;) == 0) || (strcmp(extension, &quot;htm&quot;) == 0) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>(strcmp(extension, &quot;xhtml&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (io_utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new HTMLParser(wordchars_utf16, wordchars_utf16_len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new HTMLParser(wordchars.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(extension, &quot;xml&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (io_utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new XMLParser(wordchars_utf16, wordchars_utf16_len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new XMLParser(wordchars.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if (((strlen(extension) == 3) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(strstr(ODF_EXT, extension) != NULL)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>((strlen(extension) == 4) &amp;&amp; (extension[0] == &apos;f&apos;) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(strstr(ODF_EXT, extension + 1) != NULL))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (io_utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new ODFParser(wordchars_utf16, wordchars_utf16_len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new ODFParser(wordchars.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if (((extension[0] &gt; &apos;0&apos;) &amp;&amp; (extension[0] &lt;= &apos;9&apos;))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (io_utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new ManParser(wordchars_utf16, wordchars_utf16_len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new ManParser(wordchars.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(extension, &quot;tex&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (io_utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new LaTeXParser(wordchars_utf16, wordchars_utf16_len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>p = new LaTeXParser(wordchars.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!p) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (io_utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>p = new TextParser(wordchars_utf16, wordchars_utf16_len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>p = new TextParser(wordchars.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>p-&gt;set_url_checking(checkurl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return p;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef LOG</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">void log(char* message) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FILE* f = fopen(LOGFILE, &quot;a&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (f) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fprintf(f, &quot;%s\n&quot;, message);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fclose(f);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fprintf(stderr, &quot;Logfile...&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int putdic(const std::string&amp; in_word, Hunspell* pMS) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string word = chenc(in_word, ui_enc, dic_enc[0]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string buf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>pMS-&gt;input_conv(word.c_str(), buf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>word = buf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (word.empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int ret(0);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>size_t w = word.find(&apos;/&apos;, 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (w == std::string::npos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (word[0] == &apos;*&apos;)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ret = pMS-&gt;remove(word.substr(1));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="6"/>ret = pMS-&gt;add(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string affix = word.substr(w + 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>word.resize(w);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!affix.empty() &amp;&amp; affix[0] == &apos;/&apos;) // word//pattern (back comp.)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>affix.erase(0, 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>ret = pMS-&gt;add_with_affix(word, affix); <text:s/>// word/pattern</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return ret;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">void load_privdic(const char* filename, Hunspell* pMS) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::ifstream dic;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>dic.open(filename, std::ios_base::in);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (dic.is_open()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string buf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (std::getline(dic, buf)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>putdic(buf, pMS);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">bool exist(const char* filename) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::ifstream f;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>f.open(filename, std::ios_base::in);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (f.is_open()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int save_privdic(const std::string&amp; filename, const std::string&amp; filename2, std::vector&lt;std::string&gt;&amp; w) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FILE* dic = fopen(filename.c_str(), &quot;r&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (dic) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fclose(dic);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>dic = fopen(filename.c_str(), &quot;a&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>dic = fopen(filename2.c_str(), &quot;a&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!dic)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (size_t i = 0; i &lt; w.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>w[i] = chenc(w[i], io_enc, ui_enc);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fprintf(dic, &quot;%s\n&quot;, w[i].c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>fclose(dic);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const char* basename(const char* s, char c) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char* p = s + strlen(s);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while ((*p != c) &amp;&amp; (p != s))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>p--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (*p == c)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>p++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return p;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_CURSES_H</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">char* scanline(char* message) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char input[INPUTLEN];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>printw(message);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>echo();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>getnstr(input, INPUTLEN);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>noecho();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return mystrdup(input);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// check words in the dictionaries (and set first checked dictionary)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">bool check(Hunspell** pMS, int* d, const std::string&amp; token, int* info, std::string* root) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int i = 0; i &lt; dmax; ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string buf = chenc(token, io_enc, dic_enc[*d]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>mystrrep(buf, ENTITY_APOS, &quot;&apos;&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (checkapos &amp;&amp; buf.find(&apos;\&apos;&apos;) != std::string::npos)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// 8-bit encoded dictionaries need ASCII apostrophes (eg. English</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// dictionaries)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (strcmp(dic_enc[*d], &quot;UTF-8&quot;) != 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>mystrrep(buf, UTF8_APOS, &quot;&apos;&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if ((pMS[*d]-&gt;spell(buf, info, root) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="9"/>!(warn &amp;&amp; (*info &amp; SPELL_WARN))) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// UTF-8 encoded dictionaries with ASCII apostrophes, but without ICONV</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// support,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// need also ASCII apostrophes (eg. French dictionaries)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>((strcmp(dic_enc[*d], &quot;UTF-8&quot;) == 0) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="9"/>buf.find(UTF8_APOS) != std::string::npos &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="9"/>pMS[*d]-&gt;spell(mystrrep(buf, UTF8_APOS, &quot;&apos;&quot;), info, root) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="9"/>!(warn &amp;&amp; (*info &amp; SPELL_WARN)))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (++(*d) == dmax)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>*d = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">static int is_zipped_odf(TextParser* parser, const char* extension) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// ODFParser and not flat ODF</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return dynamic_cast&lt;ODFParser*&gt;(parser) &amp;&amp; (extension &amp;&amp; extension[0] != &apos;f&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">static bool secure_filename(const char* filename) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char* hasapostrophe = strchr(filename, &apos;\&apos;&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (hasapostrophe)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">char* mymkdtemp(char *templ) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef WIN32</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char *odftmpdir = tmpnam(NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!odftmpdir) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (system((std::string(&quot;mkdir &quot;) + odftmpdir).c_str()) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return odftmpdir;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return mkdtemp(templ);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">void pipe_interface(Hunspell** pMS, int format, FILE* fileid, char* filename) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char buf[MAXLNLEN];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::vector&lt;std::string&gt; dicwords;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int pos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>int bad;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int lineno = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int terse_mode = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int verbose_mode = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int d = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char* odftmpdir = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char* extension = (filename) ? basename(filename, &apos;.&apos;) : NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>TextParser* parser = get_parser(format, extension, pMS[0]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char tmpdirtemplate[] = &quot;/tmp/hunspellXXXXXX&quot;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>bool bZippedOdf = is_zipped_odf(parser, extension);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// access content.xml of ODF</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (bZippedOdf) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>odftmpdir = mymkdtemp(tmpdirtemplate);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!odftmpdir) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>perror(gettext(&quot;Can&apos;t create tmp dir&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>exit(1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// break 1-line XML of zipped ODT documents at &lt;/style:style&gt; and &lt;/text:p&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// to avoid tokenization problems (fgets could stop within an XML tag)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::ostringstream sbuf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sbuf &lt;&lt; &quot;unzip -p \&quot;&quot; &lt;&lt; filename &lt;&lt; &quot;\&quot; content.xml | sed &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;\&quot;s/\\(&lt;\\/text:p&gt;\\|&lt;\\/style:style&gt;\\)\\(.\\)/\\1\\n\\2/g\&quot; &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;&gt;&quot; &lt;&lt; odftmpdir &lt;&lt; &quot;/content.xml&quot;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!secure_filename(filename) || system(sbuf.str().c_str()) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (secure_filename(filename))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>perror(gettext(&quot;Can&apos;t open inputfile&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>fprintf(stderr, gettext(&quot;Can&apos;t open %s.\n&quot;), filename);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (system((std::string(&quot;rmdir &quot;) + odftmpdir).c_str()) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>perror(&quot;temp dir delete failed&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>exit(1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string file(odftmpdir);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>file.append(&quot;/content.xml&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fileid = fopen(file.c_str(), &quot;r&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (fileid == NULL) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>perror(gettext(&quot;Can&apos;t open inputfile&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (system((std::string(&quot;rmdir &quot;) + odftmpdir).c_str()) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>perror(&quot;temp dir delete failed&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>exit(1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (filter_mode == NORMAL) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fprintf(stdout, &quot;%s&quot;, gettext(HUNSPELL_HEADING));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fprintf(stdout, HUNSPELL_VERSION);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>const std::string&amp; version = pMS[0]-&gt;get_version_cpp();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!version.empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stdout, &quot; - %s&quot;, version.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fprintf(stdout, &quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fflush(stdout);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">nextline:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (fgets(buf, MAXLNLEN, fileid)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>buf[strcspn(buf, &quot;\n&quot;)] = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>lineno++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef LOG</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>log(buf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>bad = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="4"/>pos = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// execute commands</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (filter_mode == PIPE) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>pos = -1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>switch (buf[0]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;%&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>verbose_mode = terse_mode = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;!&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>terse_mode = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;`&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>verbose_mode = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;+&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>delete parser;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>parser = get_parser(FMT_LATEX, NULL, pMS[0]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>parser-&gt;set_url_checking(checkurl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;-&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>delete parser;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>parser = get_parser(format, NULL, pMS[0]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;@&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>putdic(buf + 1, pMS[d]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;*&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string word(buf + 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>dicwords.push_back(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>putdic(word, pMS[d]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;#&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string sbuf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (HOME) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sbuf.append(HOME);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot;error - missing HOME variable\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifndef WIN32</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>sbuf.append(&quot;/&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>size_t offset = sbuf.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (!privdicname) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sbuf.append(DICBASENAME);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sbuf.append(basename(dicname, DIRSEPCH));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sbuf.append(privdicname);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (save_privdic(sbuf.substr(offset), sbuf, dicwords)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>dicwords.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;^&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>pos = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>default: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>pos = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} <text:s/>// end switch</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} <text:s text:c="3"/>// end filter_mode == PIPE</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (pos &gt;= 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>parser-&gt;put_line(buf + pos);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>std::string token;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>while (parser-&gt;next_token(token)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>mystrrep(token, ENTITY_APOS, &quot;&apos;&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>switch (filter_mode) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case BADWORD: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!check(pMS, &amp;d, token, NULL, NULL)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>bad = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (!printgood)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;%s\n&quot;, token.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (printgood)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;%s\n&quot;, token.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case WORDFILTER: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!check(pMS, &amp;d, token, NULL, NULL)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (!printgood)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;%s\n&quot;, buf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (printgood)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;%s\n&quot;, buf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>goto nextline;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case BADLINE: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!check(pMS, &amp;d, token, NULL, NULL)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>bad = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case AUTO0:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case AUTO:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case AUTO2:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case AUTO3: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>FILE* f = (filter_mode == AUTO) ? stderr : stdout;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!check(pMS, &amp;d, token, NULL, NULL)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>bad = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>std::vector&lt;std::string&gt; wlst =</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>pMS[d]-&gt;suggest(chenc(token, io_enc, dic_enc[d]));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (!wlst.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>parser-&gt;change_token(chenc(wlst[0], dic_enc[d], io_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>if (filter_mode == AUTO3) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>fprintf(f, &quot;%s:%d: Locate: %s | Try: %s\n&quot;, currentfilename,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="26"/>lineno, token.c_str(), chenc(wlst[0], dic_enc[d], io_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>} else if (filter_mode == AUTO2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>fprintf(f, &quot;%ds/%s/%s/g; # %s\n&quot;, lineno, token.c_str(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="26"/>chenc(wlst[0], dic_enc[d], io_enc).c_str(), buf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="18"/>fprintf(f, gettext(&quot;Line %d: %s -&gt; &quot;), lineno,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="26"/>chenc(token, io_enc, ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>fprintf(f, &quot;%s\n&quot;, chenc(wlst[0], dic_enc[d], ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case STEM: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::vector&lt;std::string&gt; result =</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>pMS[d]-&gt;stem(chenc(token, io_enc, dic_enc[d]));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>for (size_t i = 0; i &lt; result.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>fprintf(stdout, &quot;%s %s\n&quot;, token.c_str(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>chenc(result[i], dic_enc[d], ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (result.empty() &amp;&amp; !token.empty() &amp;&amp; token[token.size() - 1] == &apos;.&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>token.resize(token.size() - 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>result = pMS[d]-&gt;stem(token);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>for (size_t i = 0; i &lt; result.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;%s %s\n&quot;, token.c_str(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="24"/>chenc(result[i], dic_enc[d], ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (result.empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>fprintf(stdout, &quot;%s\n&quot;, chenc(token, dic_enc[d], ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>fprintf(stdout, &quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case SUFFIX: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::vector&lt;std::string&gt; wlst = pMS[d]-&gt;suffix_suggest(token);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>for (size_t j = 0; j &lt; wlst.size(); ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>fprintf(stdout, &quot;Suffix Suggestions are %s \n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>chenc(wlst[j], dic_enc[d], io_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>fflush(stdout);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case ANALYZE: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::vector&lt;std::string&gt; result =</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>pMS[d]-&gt;analyze(chenc(token, io_enc, dic_enc[d]));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>for (size_t i = 0; i &lt; result.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>fprintf(stdout, &quot;%s %s\n&quot;, token.c_str(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>chenc(result[i], dic_enc[d], ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (result.empty() &amp;&amp; !token.empty() &amp;&amp; token[token.size() - 1] == &apos;.&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>token.resize(token.size() - 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>result = pMS[d]-&gt;analyze(token);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>for (size_t i = 0; i &lt; result.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;%s %s\n&quot;, token.c_str(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="24"/>chenc(result[i], dic_enc[d], ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (result.empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>fprintf(stdout, &quot;%s\n&quot;, chenc(token, dic_enc[d], ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>fprintf(stdout, &quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case PIPE: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>int info;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::string root;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="12"/>if (check(pMS, &amp;d, token, &amp;info, &amp;root)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (!terse_mode) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>if (verbose_mode)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>fprintf(stdout, &quot;* %s\n&quot;, token.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>fprintf(stdout, &quot;*\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>fflush(stdout);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>int byte_offset = parser-&gt;get_tokenpos() + pos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>int char_offset = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (strcmp(io_enc, &quot;UTF-8&quot;) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>for (int i = 0; i &lt; byte_offset; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>if ((buf[i] &amp; 0xc0) != 0x80)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>char_offset++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>char_offset = byte_offset;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>std::vector&lt;std::string&gt; wlst =</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>pMS[d]-&gt;suggest(chenc(token, io_enc, dic_enc[d]));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (wlst.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;# %s %d&quot;, token.c_str(), char_offset);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;&amp; %s %u %d: &quot;, token.c_str(), static_cast&lt;unsigned int&gt;(wlst.size()), char_offset);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;%s&quot;, chenc(wlst[0], dic_enc[d], io_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>for (size_t j = 1; j &lt; wlst.size(); ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>fprintf(stdout, &quot;, %s&quot;, chenc(wlst[j], dic_enc[d], io_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>fprintf(stdout, &quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>fflush(stdout);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case NORMAL: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>int info;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::string root;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (check(pMS, &amp;d, token, &amp;info, &amp;root)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (info &amp; SPELL_COMPOUND) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;-\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>} else if (!root.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;+ %s\n&quot;, chenc(root, dic_enc[d], ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;*\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>fflush(stdout);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>int byte_offset = parser-&gt;get_tokenpos() + pos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>int char_offset = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (strcmp(io_enc, &quot;UTF-8&quot;) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>for (int i = 0; i &lt; byte_offset; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>if ((buf[i] &amp; 0xc0) != 0x80)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>char_offset++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>char_offset = byte_offset;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>std::vector&lt;std::string&gt; wlst =</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>pMS[d]-&gt;suggest(chenc(token, io_enc, dic_enc[d]));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (wlst.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;# %s %d&quot;, chenc(token, io_enc, ui_enc).c_str(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="24"/>char_offset);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;&amp; %s %u %d: &quot;, chenc(token, io_enc, ui_enc).c_str(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="24"/>static_cast&lt;unsigned int&gt;(wlst.size()), char_offset);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;%s&quot;, chenc(wlst[0], dic_enc[d], ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>for (size_t j = 1; j &lt; wlst.size(); ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>fprintf(stdout, &quot;, %s&quot;, chenc(wlst[j], dic_enc[d], ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>fprintf(stdout, &quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>fflush(stdout);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>switch (filter_mode) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case AUTO: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string pLine = parser-&gt;get_line();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>fprintf(stdout, &quot;%s\n&quot;, pLine.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case BADLINE: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (((printgood) &amp;&amp; (!bad)) || (!printgood &amp;&amp; (bad)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>fprintf(stdout, &quot;%s\n&quot;, buf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case PIPE:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case NORMAL: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>fprintf(stdout, &quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>fflush(stdout);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} <text:s/>// if</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} <text:s text:c="3"/>// while</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (bZippedOdf) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fclose(fileid);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::ostringstream sbuf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sbuf &lt;&lt; odftmpdir &lt;&lt; &quot;/content.xml&quot;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (remove(sbuf.str().c_str()) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>perror(&quot;temp file delete failed&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sbuf.str(&quot;&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sbuf &lt;&lt; &quot;rmdir &quot; &lt;&lt; odftmpdir;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (system(sbuf.str().c_str()) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>perror(&quot;temp dir delete failed&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>delete parser;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">} <text:s/>// pipe_interface</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_READLINE</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_CURSES_H</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">static const char* rltext;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// set base text of input line</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">static int set_rltext() {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>if (rltext) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>rl_insert_text(rltext);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>rltext = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>rl_startup_hook = (rl_hook_func_t*)NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// Readline escape</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">static int rl_escape(int count, int key) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>rl_delete_text(0, rl_end);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>rl_done = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_CURSES_H</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int expand_tab(std::string&amp; dest, const std::string&amp; in_src) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>dest.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char *src = in_src.c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int u8 = ((ui_enc != NULL) &amp;&amp; (strcmp(ui_enc, &quot;UTF-8&quot;) == 0)) ? 1 : 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int chpos = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int j = 0; (src[j] != &apos;\0&apos;) &amp;&amp; (src[j] != &apos;\r&apos;); j++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (src[j] == &apos;\t&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>int end = 8 - (chpos % 8);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for (int k = 0; k &lt; end; k++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>dest.push_back(&apos; &apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>chpos++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>dest.push_back(src[j]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!u8 || (src[j] &amp; 0xc0) != 0x80)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>chpos++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return chpos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// UTF-8-aware version of strncpy (but output is always null terminated)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// What we should deal in is cursor position cells in a terminal emulator,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// i.e. the number of visual columns occupied like wcwidth/wcswidth does</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// What we&apos;re really current doing is to deal in the number of characters,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// like mbstowcs which isn&apos;t quite correct, but close enough for western</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// text in UTF-8</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">void strncpyu8(std::string&amp; dest, const std::string&amp; in_src, int begin, int n) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>dest.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char *src = in_src.c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (n) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>int u8 = ((ui_enc != NULL) &amp;&amp; (strcmp(ui_enc, &quot;UTF-8&quot;) == 0)) ? 1 : 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (int i = 0; i &lt; begin + n;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!*src)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break; <text:s/>// source is at it&apos;s end</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!u8 || (*src &amp; 0xc0) != 0x80)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>i++; <text:s text:c="11"/>// new character</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (i &gt; begin) { <text:s/>// copy char (w/ utf-8 bytes)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>dest.push_back(*src++);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>while (u8 &amp;&amp; (*src &amp; 0xc0) == 0x80)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>dest.push_back(*src++);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else { <text:s/>// skip char (w/ utf-8 bytes)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>++src;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>while (u8 &amp;&amp; (*src &amp; 0xc0) == 0x80)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>++src;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// See strncpyu8 for gotchas</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int strlenu8(const std::string&amp; in_src) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char *src = in_src.c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int u8 = ((ui_enc != NULL) &amp;&amp; (strcmp(ui_enc, &quot;UTF-8&quot;) == 0)) ? 1 : 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (*src) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!u8 || (*src &amp; 0xc0) != 0x80)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>i++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>++src;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">void dialogscreen(TextParser* parser,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>std::string&amp; token,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>char* filename,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>int forbidden,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>std::vector&lt;std::string&gt;&amp; wlst) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int x, y;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>getmaxyx(stdscr, y, x);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (forbidden &amp; SPELL_FORBIDDEN)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>printw(gettext(&quot;FORBIDDEN!&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>else if (forbidden &amp; SPELL_WARN)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>printw(gettext(&quot;Spelling mistake?&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>printw(gettext(&quot;\t%s\t\tFile: %s\n\n&quot;), chenc(token, io_enc, ui_enc).c_str(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="9"/>filename);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// handle long lines and tabulators</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string lines[MAXPREVLINE];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string prevLine;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int i = 0; i &lt; MAXPREVLINE; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>prevLine = parser-&gt;get_prevline(i);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>expand_tab(lines[i], chenc(prevLine, io_enc, ui_enc));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>prevLine = parser-&gt;get_prevline(0);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string line = prevLine.substr(0, parser-&gt;get_tokenpos());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string line2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int tokenbeg = expand_tab(line2, chenc(line, io_enc, ui_enc));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>prevLine = parser-&gt;get_prevline(0);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>line = prevLine.substr(0, parser-&gt;get_tokenpos() + token.size());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int tokenend = expand_tab(line2, chenc(line, io_enc, ui_enc));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int rowindex = (tokenend - 1) / x;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int beginrow = rowindex - tokenbeg / x;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (beginrow &gt;= MAXPREVLINE)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>beginrow = MAXPREVLINE - 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int ri = rowindex;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int prevline = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int i = 0; i &lt; MAXPREVLINE; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>strncpyu8(line, lines[prevline], x * rowindex, x);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>mvprintw(MAXPREVLINE + 1 - i, 0, &quot;%s&quot;, line.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>const bool finished = i == MAXPREVLINE - 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!finished) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>rowindex--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="6"/>if (rowindex == -1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>prevline++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>rowindex = strlenu8(lines[prevline]) / x;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>strncpyu8(line, lines[0], x * (ri - beginrow), tokenbeg % x);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>mvprintw(MAXPREVLINE + 1 - beginrow, 0, &quot;%s&quot;, line.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>attron(A_REVERSE);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>printw(&quot;%s&quot;, chenc(token, io_enc, ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>attroff(A_REVERSE);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>mvprintw(MAXPREVLINE + 2, 0, &quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (size_t i = 0; i &lt; wlst.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if ((wlst.size() &gt; 10) &amp;&amp; (i &lt; 10)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>printw(&quot; 0%d: %s\n&quot;, i, chenc(wlst[i], io_enc, ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>printw(&quot; %d: %s\n&quot;, i, chenc(wlst[i], io_enc, ui_enc).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>/* TRANSLATORS: the capital letters are shortcuts, mark one letter similarly</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="5"/>in your translation and translate the standalone letter accordingly later</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="5"/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>mvprintw(y - 3, 0, &quot;%s\n&quot;, gettext(&quot;\n[SPACE] R)epl A)ccept I)nsert U)ncap &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="37"/>&quot;S)tem Q)uit e(X)it or ? for help\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">std::string lower_first_char(const std::string&amp; token, const char* ioenc, int langnum) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string utf8str = chenc(token, ioenc, &quot;UTF-8&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::vector&lt;w_char&gt; u;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>u8_u16(u, utf8str);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!u.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>unsigned short idx = (u[0].h &lt;&lt; 8) + u[0].l;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>idx = unicodetolower(idx, langnum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>u[0].h = (unsigned char)(idx &gt;&gt; 8);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>u[0].l = (unsigned char)(idx &amp; 0x00FF);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string scratch;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>u16_u8(scratch, u);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return chenc(scratch, &quot;UTF-8&quot;, ioenc);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// for terminal interface</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int dialog(TextParser* parser,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>Hunspell* pMS,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>std::string&amp; token,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>char* filename,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>std::vector&lt;std::string&gt;&amp; wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>int forbidden) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::vector&lt;std::string&gt; dicwords;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int c;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>dialogscreen(parser, token, filename, forbidden, wlst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char firstletter = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while ((c = getch())) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>switch (c) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;0&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;1&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((firstletter == &apos;\0&apos;) &amp;&amp; (wlst.size() &gt; 10)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>firstletter = c;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;2&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;3&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;4&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;5&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;6&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;7&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;8&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;9&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>modified = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (firstletter == &apos;1&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>c += 10;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>c -= &apos;0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (c &gt;= static_cast&lt;int&gt;(wlst.size()))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (checkapos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string sbuf(wlst[c]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>mystrrep(sbuf, &quot;&apos;&quot;, UTF8_APOS);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>parser-&gt;change_token(sbuf.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>parser-&gt;change_token(wlst[c].c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos; &apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;?&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(gettext(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;Whenever a word is found that is not in the dictionary\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;it is printed on the first line of the screen. <text:s/>If the &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;dictionary\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;contains any similar words, they are listed with a number\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;next to each one. <text:s/>You have the option of replacing the word\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;completely, or choosing one of the suggested words.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(gettext(&quot;\nCommands are:\n\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(gettext(&quot;R<text:tab/>Replace the misspelled word completely.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(gettext(&quot;Space<text:tab/>Accept the word this time only.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>gettext(&quot;A<text:tab/>Accept the word for the rest of this session.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(gettext(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;I<text:tab/>Accept the word, and put it in your private dictionary.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(gettext(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;U<text:tab/>Accept and add lowercase version to private dictionary.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>gettext(&quot;S\tAsk a stem and a model word and store them in the &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>&quot;private dictionary.\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>&quot;\tThe stem will be accepted also with the affixes of the &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>&quot;model word.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(gettext(&quot;0-n<text:tab/>Replace with one of the suggested words.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(gettext(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;X<text:tab/>Write the rest of this file, ignoring misspellings, and start &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;next file.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>gettext(&quot;Q<text:tab/>Quit immediately. Asks for confirmation. Leaves file &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>&quot;unchanged.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(gettext(&quot;^Z<text:tab/>Suspend program. Restart with fg command.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(gettext(&quot;?<text:tab/>Show this help screen.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>printw(gettext(&quot;\n-- Type space to continue -- \n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>while (getch() != &apos; &apos;)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// fall-through</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 12: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>dialogscreen(parser, token, filename, forbidden, wlst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>default: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>/* TRANSLATORS: translate this letter according to the shortcut letter</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>used</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>previously in the <text:s/>translation of &quot;R)epl&quot; before */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (c == (gettext(&quot;r&quot;))[0]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>modified = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_READLINE</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>endwin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rltext = &quot;&quot;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (rltext &amp;&amp; *rltext)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>rl_startup_hook = set_rltext;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>char* temp = readline(gettext(&quot;Replace with: &quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_READLINE</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>initscr();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>cbreak();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if ((!temp) || (temp[0] == &apos;\0&apos;)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>free(temp);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>dialogscreen(parser, token, filename, forbidden, wlst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string i(temp);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>free(temp);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (checkapos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>mystrrep(i, &quot;&apos;&quot;, UTF8_APOS);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>parser-&gt;change_token(i.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return 2; <text:s/>// replace</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>/* TRANSLATORS: translate these letters according to the shortcut letter</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>used</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>previously in the <text:s/>translation of &quot;U)ncap&quot; and I)nsert before */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>int u_key = gettext(&quot;u&quot;)[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>int i_key = gettext(&quot;i&quot;)[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (c == u_key || c == i_key) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string word = (c == i_key)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>? token</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>: lower_first_char(token, io_enc, pMS-&gt;get_langnum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>dicwords.push_back(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string sbuf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// save</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (HOME) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sbuf.append(HOME);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>fprintf(stderr, gettext(&quot;error - missing HOME variable\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifndef WIN32</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>sbuf.append(&quot;/&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>size_t offset = sbuf.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (!privdicname) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sbuf.append(DICBASENAME);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sbuf.append(basename(dicname, DIRSEPCH));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sbuf.append(privdicname);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="10"/>if (save_privdic(sbuf.substr(offset), sbuf, dicwords)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>dicwords.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>fprintf(stderr, gettext(&quot;Cannot update personal dictionary.&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>} <text:s/>// no break</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>/* TRANSLATORS: translate this letter according to the shortcut letter</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>used</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>previously in the <text:s/>translation of &quot;U)ncap&quot; and I)nsert before */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((c == (gettext(&quot;u&quot;))[0]) || (c == (gettext(&quot;i&quot;))[0]) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(c == (gettext(&quot;a&quot;))[0])) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>modified = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>putdic(token, pMS);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>/* TRANSLATORS: translate this letter according to the shortcut letter</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>used</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>previously in the <text:s/>translation of &quot;S)tem&quot; before */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (c == (gettext(&quot;s&quot;))[0]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>modified = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string w(token);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>size_t n_last_of = w.find_last_of(&apos;-&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (n_last_of != std::string::npos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>w.resize(n_last_of);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_READLINE</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>endwin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rltext = w.c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (rltext &amp;&amp; *rltext)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>rl_startup_hook = set_rltext;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>char* temp = readline(gettext(&quot;New word (stem): &quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if ((!temp) || (temp[0] == &apos;\0&apos;)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>free(temp);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_READLINE</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>initscr();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>cbreak();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>dialogscreen(parser, token, filename, forbidden, wlst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>w.assign(temp);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>free(temp);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_READLINE</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>initscr();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>cbreak();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>dialogscreen(parser, token, filename, forbidden, wlst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>refresh();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_READLINE</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>endwin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rltext = &quot;&quot;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (rltext &amp;&amp; *rltext)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>rl_startup_hook = set_rltext;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>temp = readline(gettext(&quot;Model word (a similar dictionary word): &quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_READLINE</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="10"/>initscr();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>cbreak();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if ((!temp) || (temp[0] == &apos;\0&apos;)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>free(temp);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>dialogscreen(parser, token, filename, forbidden, wlst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string w2(temp);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>free(temp);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string w3;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>w3.append(w);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>w3.append(&quot;/&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>w3.append(w2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (!putdic(w3, pMS)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>dicwords.push_back(w3);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>w3.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>w3.append(w);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>w3.append(&quot;-/&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>w3.append(w2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>w3.append(&quot;-&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (putdic(w3, pMS)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>dicwords.push_back(w3);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// save</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::string sbuf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (HOME) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>sbuf.append(HOME);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>fprintf(stderr, gettext(&quot;error - missing HOME variable\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifndef WIN32</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sbuf.append(&quot;/&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>size_t offset = sbuf.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!privdicname) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>sbuf.append(DICBASENAME);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>sbuf.append(basename(dicname, DIRSEPCH));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>sbuf.append(privdicname);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (save_privdic(sbuf.substr(offset), sbuf, dicwords)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>dicwords.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>fprintf(stderr, gettext(&quot;Cannot update personal dictionary.&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>dialogscreen(parser, token, filename, forbidden, wlst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>printw(gettext(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>&quot;Model word must be in the dictionary. Press any key!&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>getch();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>dialogscreen(parser, token, filename, forbidden, wlst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>/* TRANSLATORS: translate this letter according to the shortcut letter</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="11"/>used</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>previously in the <text:s/>translation of &quot;e(X)it&quot; before */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (c == (gettext(&quot;x&quot;))[0]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>/* TRANSLATORS: translate this letter according to the shortcut letter</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>used</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>previously in the <text:s/>translation of &quot;Q)uit&quot; before */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (c == (gettext(&quot;q&quot;))[0]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (modified) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>printw(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>gettext(&quot;Are you sure you want to throw away your changes? &quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>/* TRANSLATORS: translate this letter according to the shortcut</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>* letter y)es */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (getch() == (gettext(&quot;y&quot;))[0]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>return -1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>dialogscreen(parser, token, filename, forbidden, wlst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return -1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int interactive_line(TextParser* parser,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>Hunspell** pMS,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>char* filename,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>FILE* tempfile) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int dialogexit = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int info = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int d = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string token;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (parser-&gt;next_token(token)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!check(pMS, &amp;d, token, &amp;info, NULL)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>std::vector&lt;std::string&gt; wlst;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>dialogscreen(parser, token, filename, info, wlst); <text:s/>// preview</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>refresh();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>std::string dicbuf = chenc(token, io_enc, dic_enc[d]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>wlst = pMS[d]-&gt;suggest(mystrrep(dicbuf, ENTITY_APOS, &quot;&apos;&quot;).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (wlst.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>dialogexit = dialog(parser, pMS[d], token, filename, wlst, info);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>for (size_t j = 0; j &lt; wlst.size(); ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>wlst[j] = chenc(wlst[j], dic_enc[d], io_enc);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>dialogexit = dialog(parser, pMS[d], token, filename, wlst, info);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if ((dialogexit == -1) || (dialogexit == 1))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>goto ki2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">ki2:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>fprintf(tempfile, &quot;%s&quot;, parser-&gt;get_line().c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return dialogexit;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">void interactive_interface(Hunspell** pMS, char* filename, int format) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char buf[MAXLNLEN];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char* odffilename = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>char* odftmpdir = NULL; <text:s/>// external zip works only with temporary directories</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="28"/>// (option -j)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FILE* text = fopen(filename, &quot;r&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!text) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>perror(gettext(&quot;Can&apos;t open inputfile&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>endwin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>exit(1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int dialogexit;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int check = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char* extension = basename(filename, &apos;.&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>TextParser* parser = get_parser(format, extension, pMS[0]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char tmpdirtemplate[] = &quot;/tmp/hunspellXXXXXX&quot;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>bool bZippedOdf = is_zipped_odf(parser, extension);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// access content.xml of ODF</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (bZippedOdf) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>odftmpdir = mymkdtemp(tmpdirtemplate);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!odftmpdir) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>perror(gettext(&quot;Can&apos;t create tmp dir&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>endwin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>exit(1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fclose(text);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// break 1-line XML of zipped ODT documents at &lt;/style:style&gt; and &lt;/text:p&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// to avoid tokenization problems (fgets could stop within an XML tag)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::ostringstream sbuf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sbuf &lt;&lt; &quot;unzip -p \&quot;&quot; &lt;&lt; filename &lt;&lt; &quot;\&quot; content.xml | sed &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;\&quot;s/\\(&lt;\\/text:p&gt;\\|&lt;\\/style:style&gt;\\)\\(.\\)/\\1\\n\\2/g\&quot; &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;&gt;&quot; &lt;&lt; odftmpdir &lt;&lt; &quot;/content.xml&quot;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!secure_filename(filename) || system(sbuf.str().c_str()) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (secure_filename(filename))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>perror(gettext(&quot;Can&apos;t open inputfile&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>fprintf(stderr, gettext(&quot;Can&apos;t open %s.\n&quot;), filename);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>endwin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>(void)system((std::string(&quot;rmdir &quot;) + odftmpdir).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>exit(1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>odffilename = filename;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string file(odftmpdir);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>file.append(&quot;/content.xml&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>filename = mystrdup(file.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>text = fopen(filename, &quot;r&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!text) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>perror(gettext(&quot;Can&apos;t open inputfile&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>endwin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>(void)system((std::string(&quot;rmdir &quot;) + odftmpdir).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>exit(1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FILE* tempfile = tmpfile();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!tempfile) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>perror(gettext(&quot;Can&apos;t create tempfile&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>delete parser;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fclose(text);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>endwin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>exit(1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>while (fgets(buf, MAXLNLEN, text)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (check) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>parser-&gt;put_line(buf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>dialogexit = interactive_line(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>parser, pMS, odffilename ? odffilename : filename, tempfile);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>switch (dialogexit) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case -1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>refresh();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>fclose(tempfile); <text:s/>// automatically deleted when closed</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (bZippedOdf) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (remove(filename) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>perror(&quot;temp file delete failed&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::ostringstream sbuf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sbuf &lt;&lt; &quot;rmdir &quot; &lt;&lt; odftmpdir;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (system(sbuf.str().c_str()) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>perror(&quot;temp dir delete failed&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>free(filename);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>endwin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>exit(0);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>check = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(tempfile, &quot;%s&quot;, buf);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>fclose(text);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (modified) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>rewind(tempfile);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>text = fopen(filename, &quot;wb&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (text == NULL)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>perror(gettext(&quot;Can&apos;t open outputfile&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>size_t n;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>while ((n = fread(buf, 1, MAXLNLEN, tempfile)) &gt; 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (fwrite(buf, 1, n, text) != n)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>perror(&quot;write failed&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fclose(text);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (bZippedOdf &amp;&amp; odffilename) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>std::ostringstream sbuf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>sbuf &lt;&lt; &quot;zip -j &apos;&quot; &lt;&lt; odffilename &lt;&lt; &quot;&apos; &quot; &lt;&lt; filename;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (system(sbuf.str().c_str()) != 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>perror(&quot;write failed&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (bZippedOdf) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (remove(filename) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>perror(&quot;temp file delete failed&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::ostringstream sbuf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sbuf &lt;&lt; &quot;rmdir &quot; &lt;&lt; odftmpdir;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (system(sbuf.str().c_str()) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>perror(&quot;temp dir delete failed&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>free(filename);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>delete parser;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>fclose(tempfile); <text:s/>// automatically deleted when closed</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">char* exist2(char* dir, int len, const char* name, const char* ext) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string buf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char* sep = (len == 0) ? &quot;&quot; : DIRSEP;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>buf.assign(dir, len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>buf.append(sep);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>buf.append(name);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>buf.append(ext);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (exist(buf.c_str()))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return mystrdup(buf.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>buf.append(HZIP_EXTENSION);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (exist(buf.c_str())) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>buf.erase(buf.size() - strlen(HZIP_EXTENSION));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return mystrdup(buf.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#if !defined(WIN32) || defined(__MINGW32__)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int listdicpath(char* dir, int len) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string buf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char* sep = (len == 0) ? &quot;&quot; : DIRSEP;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>buf.assign(dir, len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>buf.append(sep);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>DIR* d = opendir(buf.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!d)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>struct dirent* de;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while ((de = readdir(d))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>len = strlen(de-&gt;d_name);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if ((len &gt; 4 &amp;&amp; strcmp(de-&gt;d_name + len - 4, &quot;.dic&quot;) == 0) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>(len &gt; 7 &amp;&amp; strcmp(de-&gt;d_name + len - 7, &quot;.dic.hz&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>char* s = mystrdup(de-&gt;d_name);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>s[len - ((s[len - 1] == &apos;z&apos;) ? 7 : 4)] = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s%s\n&quot;, buf.c_str(), s);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>free(s);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>closedir(d);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// search existing path for file &quot;name + ext&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">char* search(char* begin, char* name, const char* ext) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char* end = begin;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (!((*end == *PATHSEP) || (*end == &apos;\0&apos;)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>end++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>char* res = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (name) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>res = exist2(begin, end - begin, name, ext);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#if !defined(WIN32) || defined(__MINGW32__)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>listdicpath(begin, end - begin);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if ((*end == &apos;\0&apos;) || res)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="6"/>return res;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>end++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>begin = end;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int main(int argc, char** argv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string buf;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>Hunspell* pMS[DMAX];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char* key = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int arg_files = -1; <text:s/>// first filename argumentum position in argv</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int format = FMT_TEXT;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int argstate = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_LOCALE_H</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>setlocale(LC_ALL, &quot;&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_LANGINFO_H</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>ui_enc = nl_langinfo(CODESET);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>textdomain(&quot;hunspell&quot;); //for gettext</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_READLINE</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>rl_set_key(&quot;\x1b\x1b&quot;, rl_escape, rl_get_keymap());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>rl_bind_key(&apos;\t&apos;, rl_insert);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef LOG</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>log(&quot;START&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int i = 1; i &lt; argc; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef LOG</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>log(argv[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (argstate == 1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (dicname)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>free(dicname);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>dicname = mystrdup(argv[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>argstate = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if (argstate == 2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (privdicname)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>free(privdicname);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>privdicname = mystrdup(argv[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>argstate = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if (argstate == 3) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>io_enc = argv[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>argstate = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if (argstate == 4) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>key = argv[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>argstate = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if (strcmp(argv[i], &quot;-d&quot;) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>argstate = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>else if (strcmp(argv[i], &quot;-p&quot;) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>argstate = 2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>else if (strcmp(argv[i], &quot;-i&quot;) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>argstate = 3;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>else if (strcmp(argv[i], &quot;-P&quot;) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>argstate = 4;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>else if ((strcmp(argv[i], &quot;-h&quot;) == 0) || (strcmp(argv[i], &quot;--help&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot;Usage: hunspell [OPTION]... [FILE]...\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot;Check spelling of each FILE. Without FILE, &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>&quot;check standard input.\n\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-1\t\tcheck only first field in lines &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="30"/>&quot;(delimiter = tabulator)\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-a\t\tIspell&apos;s pipe interface\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>--check-url\tcheck URLs, e-mail addresses and &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>&quot;directory paths\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>stderr, &quot;%s&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>gettext(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot; <text:s/>--check-apostrophe\tcheck Unicode typographic apostrophe\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>gettext(&quot; <text:s/>-d d[,d2,...]\tuse d (d2 etc.) dictionaries\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-D\t\tshow available dictionaries\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-G\t\tprint only correct words or lines\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-h, --help\tdisplay this help and exit\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-H\t\tHTML input file format\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-i enc\tinput encoding\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-l\t\tprint misspelled words\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-L\t\tprint lines with misspelled words\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>gettext(&quot; <text:s/>-m \t\tanalyze the words of the input text\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-n\t\tnroff/troff input file format\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>stderr, &quot;%s&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>gettext(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot; <text:s/>-O\t\tOpenDocument (ODF or Flat ODF) input file format\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-p dict\tset dict custom dictionary\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>gettext(&quot; <text:s/>-r\t\twarn of the potential mistakes (rare words)\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>stderr, &quot;%s&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>gettext(&quot; <text:s/>-P password\tset password for encrypted dictionaries\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-s \t\tstem the words of the input text\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-S \t\tsuffix words of the input text\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-t\t\tTeX/LaTeX input file format\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-v, --version\tprint version number\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>gettext(&quot; <text:s/>-vv\t\tprint Ispell compatible version number\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-w\t\tprint misspelled words (= lines) from &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>&quot;one word/line input.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot; <text:s/>-X\t\tXML input file format\n\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>stderr, &quot;%s&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>gettext(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot;Example: hunspell -d en_US file.txt <text:s text:c="3"/># interactive spelling\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot; <text:s text:c="8"/>hunspell -i utf-8 file.txt <text:s text:c="3"/># check UTF-8 encoded &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot;file\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot; <text:s text:c="8"/>hunspell -l *.odt <text:s text:c="12"/># print misspelled words &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot;of ODF files\n\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot; <text:s text:c="8"/># Quick fix of ODF documents by personal dictionary &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot;creation\n\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot; <text:s text:c="8"/># 1 Make a reduced list from misspelled and unknown &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot;words:\n\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot; <text:s text:c="8"/>hunspell -l *.odt | sort | uniq &gt;words\n\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot; <text:s text:c="8"/># 2 Delete misspelled words of the file by a text &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot;editor.\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot; <text:s text:c="8"/># 3 Use this personal dictionary to fix the deleted &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot;words:\n\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot; <text:s text:c="8"/>hunspell -p words *.odt\n\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, &quot;%s&quot;, gettext(&quot;Bug reports: http://hunspell.github.io/\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>exit(0);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-vv&quot;) == 0) || (strcmp(argv[i], &quot;-v&quot;) == 0) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>(strcmp(argv[i], &quot;--version&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stdout, &quot;%s&quot;, gettext(HUNSPELL_PIPE_HEADING));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stdout, &quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (strcmp(argv[i], &quot;-vv&quot;) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>fprintf(stdout, &quot;%s&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>gettext(&quot;\nCopyright (C) 2002-2014 L\303\241szl\303\263 &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="24"/>&quot;N\303\251meth. License: MPL/GPL/LGPL.\n\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="24"/>&quot;Based on OpenOffice.org&apos;s Myspell library.\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="24"/>&quot;Myspell&apos;s copyright (C) Kevin Hendricks, 2001-2002, &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="24"/>&quot;License: BSD.\n\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>fprintf(stdout, &quot;%s&quot;, gettext(&quot;This is free software; see the source for &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="32"/>&quot;copying conditions. <text:s/>There is NO\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="32"/>&quot;warranty; not even for MERCHANTABILITY or &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="32"/>&quot;FITNESS FOR A PARTICULAR PURPOSE,\n&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="32"/>&quot;to the extent permitted by law.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>exit(0);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-a&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>filter_mode = PIPE;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-m&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>/*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>if -a was used, don&apos;t override, i.e. keep ispell compatability</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>ispell: <text:s text:c="2"/>Make possible root/affix combinations that aren&apos;t in the</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>dictionary.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>hunspell: Analyze the words of the input text</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (filter_mode != PIPE)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>filter_mode = ANALYZE;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-s&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>/*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>if -a was used, don&apos;t override, i.e. keep ispell compatability</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>ispell: <text:s text:c="2"/>Stop itself with a SIGTSTP signal after each line of input.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>hunspell: Stem the words of the input text</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (filter_mode != PIPE)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>filter_mode = STEM;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-S&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (filter_mode != PIPE)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>filter_mode = SUFFIX;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-t&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>format = FMT_LATEX;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-n&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>format = FMT_MAN;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-H&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>format = FMT_HTML;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-X&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>format = FMT_XML;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-O&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>format = FMT_ODF;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-l&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>filter_mode = BADWORD;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-w&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>/*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>if -a was used, don&apos;t override, i.e. keep ispell compatability</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>ispell: <text:s text:c="2"/>Specify additional characters that can be part of a word.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>hunspell: Print misspelled words (= lines) from one word/line input</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (filter_mode != PIPE)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>filter_mode = WORDFILTER;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-L&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>/*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>if -a was used, don&apos;t override, i.e. keep ispell compatability</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>ispell: <text:s text:c="2"/>Number of lines of context to be shown at the bottom of the</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>screen</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="7"/>hunspell: Print lines with misspelled words</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (filter_mode != PIPE)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>filter_mode = BADLINE;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-u&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>/*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>if -a was used, don&apos;t override, i.e. keep ispell compatability</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>ispell: None</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>hunspell: Show typical misspellings</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (filter_mode != PIPE)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>filter_mode = AUTO0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-U&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>/*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>if -a was used, don&apos;t override, i.e. keep ispell compatability</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>ispell: None</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>hunspell: Automatic correction of typical misspellings to stdout</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (filter_mode != PIPE)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>filter_mode = AUTO;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-u2&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>/*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>if -a was used, don&apos;t override, i.e. keep ispell compatability</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>ispell: None</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>hunspell: Print typical misspellings in sed format</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (filter_mode != PIPE)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>filter_mode = AUTO2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-u3&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>/*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>if -a was used, don&apos;t override, i.e. keep ispell compatability</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>ispell: None</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>hunspell: Print typical misspellings in gcc error format</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (filter_mode != PIPE)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>filter_mode = AUTO3;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-G&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>printgood = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-1&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>format = FMT_FIRST;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-D&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>showpath = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;-r&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>warn = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;--check-url&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>checkurl = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((strcmp(argv[i], &quot;--check-apostrophe&quot;) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>checkapos = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if ((arg_files == -1) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>((argv[i][0] != &apos;-&apos;) &amp;&amp; (argv[i][0] != &apos;\0&apos;))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>arg_files = i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!exist(argv[i])) { <text:s/>// first check (before time-consuming dic. load)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>fprintf(stderr, gettext(&quot;Can&apos;t open %s.\n&quot;), argv[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_CURSES_H</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>endwin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>exit(1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (printgood &amp;&amp; (filter_mode == NORMAL))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>filter_mode = BADWORD;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!dicname) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="4"/>if (!(dicname = getenv(&quot;DICTIONARY&quot;))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>/*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>* Search in order of LC_ALL, LC_MESSAGES &amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="7"/>* LANG</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>const char* tests[] = {&quot;LC_ALL&quot;, &quot;LC_MESSAGES&quot;, &quot;LANG&quot;};</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for (size_t i = 0; i &lt; sizeof(tests) / sizeof(const char*); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((dicname = getenv(tests[i])) &amp;&amp; strcmp(dicname, &quot;&quot;) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>dicname = mystrdup(dicname);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>char* dot = strchr(dicname, &apos;.&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (dot)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>*dot = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>char* at = strchr(dicname, &apos;@&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (at)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>*at = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (dicname &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>((strcmp(dicname, &quot;C&quot;) == 0) || (strcmp(dicname, &quot;POSIX&quot;) == 0))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>free(dicname);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>dicname = mystrdup(&quot;en_US&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!dicname) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>dicname = mystrdup(DEFAULTDICNAME);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>dicname = mystrdup(dicname);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>{</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string path_std_str = &quot;.&quot;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>path_std_str.append(PATHSEP); // &lt;- check path in local directory</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>path_std_str.append(PATHSEP); // &lt;- check path in root directory</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (getenv(&quot;DICPATH&quot;)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>path_std_str.append(getenv(&quot;DICPATH&quot;)).append(PATHSEP);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>path_std_str.append(LIBDIR).append(PATHSEP);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (HOME) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>const char * userooodir[] = USEROOODIR;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for(size_t i = 0; i &lt; sizeof(userooodir)/sizeof(userooodir[0]); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>path_std_str += HOME;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifndef _WIN32</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>path_std_str += DIRSEP;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>path_std_str.append(userooodir[i]).append(PATHSEP);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>path_std_str.append(OOODIR);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>path = mystrdup(path_std_str.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (showpath) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fprintf(stderr, gettext(&quot;SEARCH PATH:\n%s\n&quot;), path);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fprintf(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>stderr, &quot;%s&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>gettext(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;AVAILABLE DICTIONARIES (path is not mandatory for -d option):\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>search(path, NULL, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!privdicname)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="4"/>privdicname = mystrdup(getenv(&quot;WORDLIST&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char* dicplus = strchr(dicname, &apos;,&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (dicplus)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>*dicplus = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char* aff = search(path, dicname, &quot;.aff&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char* dic = search(path, dicname, &quot;.dic&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (aff &amp;&amp; dic) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (showpath) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fprintf(stderr, gettext(&quot;LOADED DICTIONARY:\n%s\n%s\n&quot;), aff, dic);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>pMS[0] = new Hunspell(aff, dic, key);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>dic_enc[0] = pMS[0]-&gt;get_dict_encoding().c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>dmax = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (dicplus) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>char* dicname2 = dicplus + 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>dicplus = strchr(dicname2, &apos;,&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (dicplus)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>*dicplus = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>free(aff);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>free(dic);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>aff = search(path, dicname2, &quot;.aff&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>dic = search(path, dicname2, &quot;.dic&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (aff &amp;&amp; dic) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (dmax &lt; DMAX) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>pMS[dmax] = new Hunspell(aff, dic, key);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>dic_enc[dmax] = pMS[dmax]-&gt;get_dict_encoding().c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>dmax++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (showpath) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>fprintf(stderr, gettext(&quot;LOADED DICTIONARY:\n%s\n%s\n&quot;), aff, dic);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>fprintf(stderr, gettext(&quot;error - %s exceeds dictionary limit.\n&quot;),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>dicname2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else if (dic)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>pMS[dmax - 1]-&gt;add_dic(dic);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fprintf(stderr, gettext(&quot;Can&apos;t open affix or dictionary files for &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="28"/>&quot;dictionary named \&quot;%s\&quot;.\n&quot;),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>dicname);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>exit(1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>/* open the private dictionaries */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (HOME) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>buf.assign(HOME);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifndef WIN32</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>buf.append(&quot;/&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>buf.append(DICBASENAME);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>buf.append(basename(dicname, DIRSEPCH));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>load_privdic(buf.c_str(), pMS[0]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>buf.assign(HOME);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifndef WIN32</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>buf.append(&quot;/&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!privdicname) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>buf.assign(DICBASENAME);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>buf.append(basename(dicname, DIRSEPCH));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>load_privdic(buf.c_str(), pMS[0]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>buf.append(privdicname);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>load_privdic(buf.c_str(), pMS[0]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>buf.assign(privdicname);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="6"/>load_privdic(buf.c_str(), pMS[0]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>/*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="5"/>If in pipe mode, output pipe mode version string only when</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="5"/>hunspell has properly been started.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="5"/>Emacs and may be others relies in the English version format.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="5"/>Do not gettextize.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (filter_mode == PIPE) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fprintf(stdout, HUNSPELL_PIPE_HEADING);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fflush(stdout);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (arg_files == -1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>pipe_interface(pMS, format, stdin, NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else if (filter_mode != NORMAL) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (int i = arg_files; i &lt; argc; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (exist(argv[i])) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>modified = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>currentfilename = argv[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>FILE* f = fopen(argv[i], &quot;r&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>pipe_interface(pMS, format, f, argv[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>fclose(f);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>fprintf(stderr, gettext(&quot;Can&apos;t open %s.\n&quot;), argv[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>exit(1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else /*filter_mode == NORMAL*/ {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_CURSES_H</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>initscr();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>cbreak();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>noecho();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>nonl();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>intrflush(stdscr, FALSE);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (int i = arg_files; i &lt; argc; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (exist(argv[i])) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>modified = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>interactive_interface(pMS, argv[i], format);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>fprintf(stderr, gettext(&quot;Can&apos;t open %s.\n&quot;), argv[i]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>endwin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>exit(1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>refresh();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>endwin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>fprintf(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>stderr, &quot;%s&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>gettext(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>&quot;Hunspell has been compiled without Ncurses user interface.\n&quot;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (dicname)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>free(dicname);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (privdicname)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>free(privdicname);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (path)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="4"/>free(path);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (aff)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>free(aff);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (dic)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>free(dic);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef HAVE_ICONV</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>free_utf_tbl();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int i = 0; i &lt; dmax; i++)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>delete pMS[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">/* vim:set shiftwidth=4 softtabstop=4 expandtab: */</text:p>
    </text:list-item>
   </text:list>
  </office:text>
 </office:body>
</office:document>