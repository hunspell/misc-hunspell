#!/usr/bin/env sh

# description: Reports dictionaries and converts all to UTF-8
# license: https://github.com/nuspell/nuspell/blob/master/COPYING.LESSER
# author: Sander van Geloven

if [ ! -d files ]; then
	echo 'ERROR: Run the script ./2-extract.sh first.'
	exit 1
fi

cd files

echo 'This page has been generated by `misc-nuspell/dictionaries/3-report.sh`. Do not edit this manually.' > ../Dictionary-Files.md

echo >> ../Dictionary-Files.md

echo 'A total of '`find . -type f -name '*.aff'|wc -l`' different dictionaries are available, which are listed in the table below.' >> ../Dictionary-Files.md

echo >> ../Dictionary-Files.md

echo '| Package Name and Version | Language Code | Language | Affix Lines | Dictionary Lines |' >> ../Dictionary-Files.md
echo '|---|---|---|--:|--:|' >> ../Dictionary-Files.md
for i in $(ls|sort); do
	cd $i
	for DIC in $(ls *.dic|sort); do
		LANG=$(basename $DIC .dic)
		AFF=$LANG.aff
		if [ ! -e $AFF ]; then
			echo 'ERROR: Missing affix file for '$i/$DIC
			continue
		fi
		echo '| `'$i'` | `'$LANG'` | '$(../../../tools/language-code-to-name.sh $LANG)' | `'$(cat $AFF|wc -l)'` | `'$(cat $DIC|wc -l)'` |' >> ../../Dictionary-Files.md
	done
	cd ..
done

echo >> ../Dictionary-Files.md

echo 'The table below shows the intended file type as is found in the affix file after SET and the file types which are actually used for the affix file and the dictionary file.' >> ../Dictionary-Files.md

echo >> ../Dictionary-Files.md

echo '| Package Name and Version | Language Code | SET File Type | Affix File Type | Dictionary File Type |' >> ../Dictionary-Files.md
echo '|---|---|---|---|---|' >> ../Dictionary-Files.md
for i in $(ls|sort); do
	cd $i
	for DIC in $(ls *.dic|sort); do
		LANG=$(basename $DIC .dic)
		AFF=$LANG.aff
		if [ ! -e $AFF ]; then
			continue
		fi
		echo '| `'$i'` | `'$LANG'` | '$(grep SET $AFF|grep -v ^#|head -n 1|awk '{print $2}'|tr -d '[:space:]')' | '$(file $AFF|sed -e 's/^.*: //'|sed -e 's/ Unicode//'|sed -e 's/ text//'|sed -e 's/ very//'|sed -e 's/with //g'|sed -e 's/ line terminators//')' | '$(file $DIC|sed -e 's/^.*: //'|sed -e 's/ Unicode//'|sed -e 's/ text//'|sed -e 's/ very//'|sed -e 's/with //g'|sed -e 's/ line terminators//')' |' >> ../../Dictionary-Files.md
	done
	cd ..
done

cd ..

exit







echo '## Dictionary files' >> ../Dictionary-Files.md
echo >> ../Dictionary-Files.md
echo 'A total of '`find . -type f -name '*.dic'|wc -l`' different dictionary files are available for Hunspell. Dictionary files which are made available via symbolic links are excluded. Note that each dictionary file has a unique name. Normally, these are installed in `/usr/share/hunspell/`. Note that medical extention dictionary files, see `-med`, `_med` and `_MED`, do not have their own affix file. These dictionaries can be loaded additionally.' >> ../Dictionary-Files.md
echo >> ../Dictionary-Files.md

if [ -e ../utf8 ]; then
	rm -f ../utf8/*
else
	mkdir ../utf8
fi

echo '| Package | Version | Filename | File Type | Lines |' >> ../Dictionary-Files.md
echo '|---|---|---|---|--:|' >> ../Dictionary-Files.md
for file in `find . -type f -name '*.dic'|sort`; do
	# package, version and filename
	echo -n $file|sed -e 's/\/usr\/share\/hunspell//'|sed -e 's/^\.\//| `/'|sed -e 's/\//` | `/g'|sed -e 's/$/` | /' >> ../Dictionary-Files.md
	affname=`basename $file .aff`
	filename=`basename $file .dic`
	echo -n $filename

	# crude encoding
	encoding=`file $file|sed -e 's/^.*: //'|sed -e 's/ text//'|sed -e 's/ Unicode//'`

	# fix space+slash+space
	# https://github.com/meixome/hunspell-gl/issues/256
	if [ `grep -c ' / ' $file` -ne 0 ]; then
		echo 'WARNING: Replacing " / " with " + " in '$file >> ../warnings.txt
		sed -i -e 's/ \/ / + /g' $file
	fi

	# fix slash+end-of-line
	# gl_ES https://github.com/meixome/hunspell-gl/issues/257
	# nb_NO https://bugs.documentfoundation.org/show_bug.cgi?id=119696
	# lv_LV
	# oc_FR
	# an_ES https://github.com/apertium/apertium-arg/issues
	# mkr_Latn
	# es_ES not problem but better not
	if [ `grep -c '/$' $file` -ne 0 -a $filename != es_ES ]; then
		echo 'WARNING: Removing trailing slash in '$file >> ../warnings.txt
		sed -i -e 's/\/$//' $file
	fi

	affix=`echo $file|sed -e 's/\.dic$/\.aff/'`
	if [ -e $affix ]; then
		# intended encoding
		# https://bugs.documentfoundation.org/show_bug.cgi?id=117392
		# bug bg_BG.aff:SET microsoft-cp1251 -> CP1251
		if [ $filename = fy_NL ]; then
			#TODO missing SET in affix file
			Encoding=ISO8859-1
		else
			Encoding=`grep SET $affix|grep -v ^#|head -n 1|awk '{print toupper($2)}'|sed -e 's/ISO-/ISO/'|sed -e 's/MICROSOFT-//'|tr -d '[:space:]'`
		fi

		# autoskip medial when no aff file exists
		#TODO check match crude
		#TODO check iconv
	elif [ $filename = de_med -o $filename = en_med_glut ]; then
		Encoding=ISO8859-1
	else
		echo 'ERROR: Unsupported encoding detection.'
		exit 1
	fi
	echo '\t'$Encoding
	if [ $Encoding = UTF-8 ]; then
#TODO filter out filenames, see https://bugs.documentfoundation.org/show_bug.cgi?id=117389
if [ $filename = ar ]; then
cat $file | grep -v '#' | grep -v : | grep -v \.dic > ../utf8/$filename.txt
else
		cp $file ../utf8/$filename.txt
fi
		if [ $filename != de_med -a $filename != en_med_glut ]; then
			cp $affix ../utf8/
		fi
	else
		iconv -f $Encoding -t UTF-8//IGNORE $file > ../utf8/$filename.txt
		if [ $filename != de_med -a $filename != en_med_glut ]; then
			iconv -f $Encoding -t UTF-8//IGNORE $affix > ../utf8/$affname
		fi
	fi

	new_encoding=`file ../utf8/$filename.txt|sed -e 's/^.*: //'`
	if [ "$new_encoding" = 'UTF-8 Unicode text, with CRLF line terminators' -o "$new_encoding" = 'UTF-8 Unicode text, with CRLF, LF line terminators' -o "$new_encoding" = 'UTF-8 Unicode (with BOM) text, with CRLF line terminators' -o "$new_encoding" = 'UTF-8 Unicode (with BOM) text, with CRLF, LF line terminators' ]; then
		flip -b -u ../utf8/$filename.txt
		echo 'WARNING: Fixing line terminators in '$file >> ../warnings.txt
	fi
	if [ $filename != de_med -a $filename != en_med_glut ]; then
	new_encoding=`file ../utf8/$affname|sed -e 's/^.*: //'`
	if [ "$new_encoding" = 'UTF-8 Unicode text, with CRLF line terminators' -o "$new_encoding" = 'UTF-8 Unicode text, with CRLF, LF line terminators' -o "$new_encoding" = 'UTF-8 Unicode (with BOM) text, with CRLF line terminators' -o "$new_encoding" = 'UTF-8 Unicode (with BOM) text, with CRLF, LF line terminators' ]; then
		flip -b -u ../utf8/$affname
#		echo 'WARNING: Fixing line terminators in '$file >> ../warnings.txt
	fi
	fi

	new_encoding=`file ../utf8/$filename.txt|sed -e 's/^.*: //'`
	#TODO report for an_ES to make non-data, see https://addons.mozilla.org/en-GB/firefox/addon/corrector-ortografico-aragones/
	#
	if [ $filename = an_ES -a "$new_encoding" = 'data' -o "$new_encoding" = 'UTF-8 Unicode (with BOM) text' -o "$new_encoding" = 'UTF-8 Unicode text' -o "$new_encoding" = 'ASCII text' -o "$new_encoding" = 'UTF-8 Unicode text, with very long lines' ]; then
		echo -n $encoding' | `' >> ../Dictionary-Files.md
		echo `wc -l $file|awk '{print $1}'`'` |' >> ../Dictionary-Files.md
	else
		echo 'ERROR: File enconding conversion from '$encoding' for '$file' to '$new_encoding' for file '$filename' failed'
		exit 1
	fi

done


more warnings.txt
