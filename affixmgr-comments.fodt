<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rpt="http://openoffice.org/2005/report" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:officeooo="http://openoffice.org/2009/office" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:css3t="http://www.w3.org/TR/css3-text/" office:version="1.2" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><dc:date>2018-03-08T19:37:16.338511819</dc:date><meta:editing-duration>P1DT3H3M19S</meta:editing-duration><meta:editing-cycles>24</meta:editing-cycles><meta:generator>LibreOffice/5.4.5.1$Linux_X86_64 LibreOffice_project/40m0$Build-1</meta:generator><meta:document-statistic meta:table-count="0" meta:image-count="0" meta:object-count="0" meta:page-count="76" meta:paragraph-count="4898" meta:word-count="21539" meta:character-count="166219" meta:non-whitespace-character-count="117761"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">1209407</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">1783</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">24901</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">23871</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">4198</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">1308677</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">1783</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">1209407</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">26682</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">1233276</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">1</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">95</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
     <config:config-item config:name="AnchoredTextOverflowLegacy" config:type="boolean">false</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TreatSingleColumnBreakAsPageBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">1026170</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="ForbiddenCharacters">
    <config:config-item-map-entry>
     <config:config-item config:name="Language" config:type="string">zxx</config:config-item>
     <config:config-item config:name="Country" config:type="string"/>
     <config:config-item config:name="Variant" config:type="string"/>
     <config:config-item config:name="BeginLine" config:type="string"/>
     <config:config-item config:name="EndLine" config:type="string"/>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbeddedDatabaseName" config:type="string"/>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="Rsid" config:type="int">4463644</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="MsWordCompTrailingBlanks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PropLineSpacingShrinksFirstLine" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SubtractFlysAnchoredAtFlys" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddVerticalFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink">
    <ooo:library-embedded ooo:name="Standard"/>
   </ooo:libraries>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="Lohit Devanagari1" svg:font-family="&apos;Lohit Devanagari&apos;"/>
  <style:font-face style:name="DejaVu Sans Mono" svg:font-family="&apos;DejaVu Sans Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Mono" svg:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Times New Roman" svg:font-family="&apos;Times New Roman&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Lohit Devanagari" svg:font-family="&apos;Lohit Devanagari&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans CJK SC Regular" svg:font-family="&apos;Noto Sans CJK SC Regular&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans Devanagari" svg:font-family="&apos;Noto Sans Devanagari&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#3465a4" draw:fill-color="#729fcf" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.1181in" draw:shadow-offset-y="0.1181in" draw:start-line-spacing-horizontal="0.1114in" draw:start-line-spacing-vertical="0.1114in" draw:end-line-spacing-horizontal="0.1114in" draw:end-line-spacing-vertical="0.1114in" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="zxx" fo:country="none" style:letter-kerning="true" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.4925in" style:writing-mode="page"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="zxx" fo:country="none" style:letter-kerning="true" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text"/>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" loext:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Liberation Sans" fo:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="Noto Sans CJK SC Regular" style:font-family-asian="&apos;Noto Sans CJK SC Regular&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0972in" loext:contextual-spacing="false" fo:line-height="120%"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.0835in" fo:margin-bottom="0.0835in" loext:contextual-spacing="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="12pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;"/>
  </style:style>
  <style:style style:name="Preformatted_20_Text" style:display-name="Preformatted Text" style:family="paragraph" style:parent-style-name="Standard" style:class="html">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Mono" fo:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed" fo:font-size="10pt" style:font-name-asian="DejaVu Sans Mono" style:font-family-asian="&apos;DejaVu Sans Mono&apos;" style:font-family-generic-asian="modern" style:font-pitch-asian="fixed" style:font-size-asian="10pt" style:font-name-complex="Liberation Mono" style:font-family-complex="&apos;Liberation Mono&apos;" style:font-family-generic-complex="modern" style:font-pitch-complex="fixed" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="Numbering_20_Symbols" style:display-name="Numbering Symbols" style:family="text"/>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:list-style style:name="Numbering_20_2" style:display-name="Numbering 2">
   <text:list-level-style-number text:level="1" text:style-name="Numbering_20_Symbols" style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment" fo:text-align="end">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.1965in" fo:text-indent="-0.1965in" fo:margin-left="0.1965in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="2">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.3929in" fo:text-indent="-0.1965in" fo:margin-left="0.3929in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="3">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.7866in" fo:text-indent="-0.3937in" fo:margin-left="0.7866in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="4">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.2791in" fo:text-indent="-0.4925in" fo:margin-left="1.2791in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="5">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.8693in" fo:text-indent="-0.5902in" fo:margin-left="1.8693in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="6">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.5783in" fo:text-indent="-0.7091in" fo:margin-left="2.5783in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="7">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="3.4839in" fo:text-indent="-0.9055in" fo:margin-left="3.4839in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="8">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="4.5075in" fo:text-indent="-1.0236in" fo:margin-left="4.5075in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="9">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="5.6102in" fo:text-indent="-1.1028in" fo:margin-left="5.6102in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" text:style-name="Numbering_20_Symbols" style:num-format="1" text:start-value="10">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="6.8311in" fo:text-indent="-1.2209in" fo:margin-left="6.8311in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
  </text:list-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.1965in" style:num-format="1" text:number-position="left" text:increment="5"/>
 </office:styles>
 <office:automatic-styles>
  <style:style style:name="P1" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:line-height="100%" fo:text-align="start" style:justify-single-word="false" fo:hyphenation-ladder-count="no-limit" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:writing-mode="lr-tb">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:style>
  <style:style style:name="P2" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" loext:contextual-spacing="false" fo:line-height="100%" fo:text-align="start" style:justify-single-word="false" fo:hyphenation-ladder-count="no-limit" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="ideograph-alpha" style:punctuation-wrap="simple" style:line-break="strict" style:writing-mode="lr-tb">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:style>
  <style:style style:name="P3" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:background-color="#fff200"/>
  </style:style>
  <style:style style:name="P4" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:background-color="transparent"/>
  </style:style>
  <style:style style:name="P5" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="Numbering_20_2"/>
  <style:style style:name="P6" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="Numbering_20_2">
   <style:text-properties fo:background-color="#fff200"/>
  </style:style>
  <style:style style:name="P7" style:family="paragraph" style:parent-style-name="Preformatted_20_Text" style:list-style-name="Numbering_20_2">
   <style:text-properties fo:background-color="transparent"/>
  </style:style>
  <style:style style:name="P8" style:family="paragraph">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" fo:line-height="100%" fo:text-align="start" fo:text-indent="0in" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:writing-mode="lr-tb">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:hyphenate="false"/>
  </style:style>
  <style:style style:name="P9" style:family="paragraph">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" fo:line-height="100%" fo:text-align="start" fo:text-indent="0in" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:writing-mode="lr-tb">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:hyphenate="false"/>
  </style:style>
  <style:style style:name="P10" style:family="paragraph">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" fo:line-height="100%" fo:text-align="start" fo:text-indent="0in" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:writing-mode="lr-tb">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:hyphenate="false"/>
  </style:style>
  <style:style style:name="P11" style:family="paragraph">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" fo:line-height="100%" fo:text-align="start" fo:text-indent="0in" style:text-autospace="ideograph-alpha" style:punctuation-wrap="simple" style:line-break="strict" style:writing-mode="lr-tb">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties fo:hyphenate="false"/>
  </style:style>
  <style:style style:name="T1" style:family="text">
   <style:text-properties fo:background-color="#fff200" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T2" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" style:use-window-font-color="true" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Liberation Serif" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" loext:char-shading-value="0" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T3" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Liberation Serif" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" loext:char-shading-value="0" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T4" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Times New Roman" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" loext:char-shading-value="0" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Noto Sans Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T5" style:family="text">
   <style:text-properties fo:background-color="#ffffff" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T6" style:family="text">
   <style:text-properties fo:font-weight="bold" fo:background-color="#fff200" loext:char-shading-value="0" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T7" style:family="text">
   <style:text-properties fo:background-color="transparent" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T8" style:family="text">
   <style:text-properties fo:background-color="#faa61a" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T9" style:family="text">
   <style:text-properties fo:background-color="#ef413d" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T10" style:family="text">
   <style:text-properties fo:background-color="#adc5e7" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T11" style:family="text">
   <style:text-properties fo:background-color="#e0efd4" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T12" style:family="text">
   <style:text-properties fo:background-color="#72bf44" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T13" style:family="text">
   <style:text-properties fo:background-color="#bcaed5" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T14" style:family="text">
   <style:text-properties fo:background-color="#c7a0cb" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T15" style:family="text">
   <style:text-properties fo:background-color="#c7a0cb" loext:char-shading-value="0"/>
  </style:style>
  <style:style style:name="T16" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Times New Roman" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Noto Sans Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T17" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" style:use-window-font-color="true" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Liberation Serif" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T18" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Liberation Serif" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T19" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" style:use-window-font-color="true" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Liberation Serif" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:style style:name="T20" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:text-outline="false" style:text-line-through-style="none" style:text-line-through-type="none" style:text-position="0% 100%" style:font-name="Liberation Serif" fo:font-size="10pt" fo:letter-spacing="normal" fo:language="zxx" fo:country="none" fo:font-style="normal" fo:text-shadow="none" style:text-underline-style="none" fo:font-weight="normal" style:text-underline-mode="continuous" style:text-overline-mode="continuous" style:text-line-through-mode="continuous" style:letter-kerning="true" fo:background-color="transparent" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zxx" style:country-asian="none" style:font-style-asian="normal" style:font-weight-asian="normal" style:font-name-complex="Lohit Devanagari" style:font-size-complex="12pt" style:language-complex="zxx" style:country-complex="none" style:font-style-complex="normal" style:font-weight-complex="normal" style:text-emphasize="none" style:text-scale="100%" style:font-relief="none" style:text-overline-style="none" style:text-overline-color="font-color"/>
  </style:style>
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="8.2681in" fo:page-height="11.6929in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="0.5118in" fo:margin-bottom="0.5118in" fo:margin-left="0.5902in" fo:margin-right="0.5902in" style:writing-mode="lr-tb" style:footnote-max-height="0in">
    <style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1"/>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <office:forms form:automatic-focus="false" form:apply-design-mode="false"/>
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
   </text:sequence-decls>
   <text:list xml:id="list2916407994" text:style-name="Numbering_20_2">
    <text:list-item>
     <text:p text:style-name="P5">/* ***** BEGIN LICENSE BLOCK *****</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Version: MPL 1.1/GPL 2.0/LGPL 2.1</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Copyright (C) 2002-2017 Németh László</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* The contents of this file are subject to the Mozilla Public License Version</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* 1.1 (the &quot;License&quot;); you may not use this file except in compliance with</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* the License. You may obtain a copy of the License at</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* http://www.mozilla.org/MPL/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Software distributed under the License is distributed on an &quot;AS IS&quot; basis,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* for the specific language governing rights and limitations under the</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* License.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Hunspell is based on MySpell which is Copyright (C) 2002 Kevin Hendricks.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Contributor(s): David Einstein, Davide Prina, Giuseppe Modugno,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Gianluca Turconi, Simon Brouwer, Noll János, Bíró Árpád,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Goldman Eleonóra, Sarlós Tamás, Bencsáth Boldizsár, Halácsy Péter,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Dvornik László, Gefferth András, Nagy Viktor, Varga Dániel, Chris Halls,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Rene Engelhard, Bram Moolenaar, Dafydd Jones, Harri Pitkänen</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Alternatively, the contents of this file may be used under the terms of</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* either the GNU General Public License Version 2 or later (the &quot;GPL&quot;), or</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* the GNU Lesser General Public License Version 2.1 or later (the &quot;LGPL&quot;),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* in which case the provisions of the GPL or the LGPL are applicable instead</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* of those above. If you wish to allow use of your version of this file only</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* under the terms of either the GPL or the LGPL, and not to allow others to</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* use your version of this file under the terms of the MPL, indicate your</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* decision by deleting the provisions above and replace them with the notice</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* and other provisions required by the GPL or the LGPL. If you do not delete</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* the provisions above, a recipient may use your version of this file under</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* the terms of any one of the MPL, the GPL or the LGPL.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* ***** END LICENSE BLOCK ***** */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">/*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Copyright 2002 Kevin B. Hendricks, Stratford, Ontario, Canada</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* And Contributors. <text:s/>All rights reserved.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* Redistribution and use in source and binary forms, with or without</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* modification, are permitted provided that the following conditions</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* are met:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* 1. Redistributions of source code must retain the above copyright</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* <text:s text:c="3"/>notice, this list of conditions and the following disclaimer.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* 2. Redistributions in binary form must reproduce the above copyright</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* <text:s text:c="3"/>notice, this list of conditions and the following disclaimer in the</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* <text:s text:c="3"/>documentation and/or other materials provided with the distribution.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* 3. All modifications to the source code must be clearly marked as</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* <text:s text:c="3"/>such. <text:s/>Binary redistributions based on modified source code</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* <text:s text:c="3"/>must be clearly marked as modified versions in the documentation</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* <text:s text:c="3"/>and/or other materials provided with the distribution.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* THIS SOFTWARE IS PROVIDED BY KEVIN B. HENDRICKS AND CONTRIBUTORS</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* ``AS IS&apos;&apos; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. <text:s/>IN NO EVENT SHALL</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* KEVIN B. HENDRICKS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s/>* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>* SUCH DAMAGE.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;stdlib.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;string.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;stdio.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;ctype.h&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;algorithm&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;limits&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;string&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &lt;vector&gt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;affixmgr.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;affentry.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;langnum.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#include &quot;csutil.hxx&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:span text:style-name="T8">AffixMgr::AffixMgr</text:span>(const char* affpath,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="19"/>const std::vector&lt;HashMgr*&gt;&amp; ptr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="19"/>const char* <office:annotation office:name="__Annotation__89784_975352036">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-14T09:56:02.267367070</dc:date>
       <text:p><text:span text:style-name="T16">QUESTION: Where is key for?</text:span></text:p>
      </office:annotation>key<office:annotation-end office:name="__Annotation__89784_975352036"/>)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>: alldic(ptr)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>, pHMgr(ptr[0]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// register hash manager and load affix data from aff file</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>csconv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>utf8 = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>complexprefixes = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>parsedmaptable = false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>parsedbreaktable = false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>parsedrep = false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>iconvtable = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>oconvtable = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// allow simplified compound forms (see 3rd field of CHECKCOMPOUNDPATTERN)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>simplifiedcpd = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>parsedcheckcpd = false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>parseddefcpd = false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>phone = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>compoundflag = FLAG_NULL; <text:s text:c="7"/><text:span text:style-name="T1">// permits word in compound forms</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>compoundbegin = FLAG_NULL; <text:s text:c="6"/><text:span text:style-name="T1">// may be first word in compound forms</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>compoundmiddle = FLAG_NULL; <text:s text:c="5"/><text:span text:style-name="T1">// may be middle word in compound forms</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>compoundend = FLAG_NULL; <text:s text:c="8"/><text:span text:style-name="T1">// may be last word in compound forms</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>compoundroot = FLAG_NULL; <text:s text:c="7"/><text:span text:style-name="T1">// compound word signing flag</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>compoundpermitflag = FLAG_NULL; <text:s/><text:span text:style-name="T1">// compound permitting flag for suffixed word</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>compoundforbidflag = FLAG_NULL; <text:s/><text:span text:style-name="T1">// compound fordidden flag for suffixed word</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>compoundmoresuffixes = 0; <text:s text:c="7"/><text:span text:style-name="T1">// allow more suffixes within compound words</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>checkcompounddup = 0; <text:s text:c="11"/><text:span text:style-name="T1">// forbid double words in compounds</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>checkcompoundrep = 0; <text:s/><text:span text:style-name="T1">// forbid bad compounds (may be non-compound word with</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="25"/><text:span text:style-name="T1">// a REP substitution)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>checkcompoundcase =</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>0; <text:s/><text:span text:style-name="T1">// forbid upper and lowercase combinations at word bounds</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>checkcompoundtriple = 0; <text:s/><text:span text:style-name="T1">// forbid compounds with triple letters</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>simplifiedtriple = 0; <text:s text:c="4"/><text:span text:style-name="T1">// allow simplified triple letters in compounds</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="28"/><text:span text:style-name="T1">// (Schiff+fahrt </text:span><office:annotation office:name="__Annotation__10467_714486967">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-26T12:40:11.096185618</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">QUESTION: What must this example illustrate exactly?</text:span></text:p>
      </office:annotation><text:span text:style-name="T1">-&gt;</text:span><office:annotation-end office:name="__Annotation__10467_714486967"/><text:span text:style-name="T1"> Schiffahrt)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>forbiddenword = FORBIDDENWORD; <text:s/>// forbidden word signing flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>nosuggest = FLAG_NULL; <text:s/>// don&apos;t suggest words signed with NOSUGGEST flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>nongramsuggest = FLAG_NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>langnum = 0; <text:s/>// language code (see http://l10n.openoffice.org/languages.html)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>needaffix = FLAG_NULL; <text:s/>// forbidden root, allowed only with suffixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>cpdwordmax = -1; <text:s text:c="7"/>// default: unlimited wordcount in compound words</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>cpdmin = -1; <text:s text:c="11"/>// undefined</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>cpdmaxsyllable = 0; <text:s text:c="4"/>// default: unlimited syllablecount in compound words</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>pfxappnd = NULL; <text:s/>// previous prefix for counting syllables of the prefix BUG</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>sfxappnd = NULL; <text:s/>// previous suffix for counting syllables of the suffix BUG</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>sfxextra = 0; <text:s text:c="4"/>// modifier for syllable count of sfxappnd BUG</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>checknum = 0; <text:s text:c="14"/>// checking numbers, and word with numbers</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>havecontclass = 0; <text:s/>// flags of possible continuing classes (double affix)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// LEMMA_PRESENT: not put root into the morphological output. Lemma presents</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// in morhological description in dictionary file. It&apos;s often combined with</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// PSEUDOROOT.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>lemma_present = FLAG_NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>circumfix = FLAG_NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>onlyincompound = FLAG_NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>maxngramsugs = -1; <text:s/>// undefined</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>maxdiff = -1; <text:s text:c="6"/>// undefined</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>onlymaxdiff = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>maxcpdsugs = -1; <text:s/>// undefined</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>nosplitsugs = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>sugswithdots = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>keepcase = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>forceucase = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>warn = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>forbidwarn = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>checksharps = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>substandard = FLAG_NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>fullstrip = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>sfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>pfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int i = 0; i &lt; SETSIZE; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>pStart[i] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sStart[i] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>pFlag[i] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sFlag[i] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int j = 0; j &lt; CONTSIZE; j++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>contclasses[j] = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (parse_file(affpath, key)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;Failure loading aff file %s\n&quot;, affpath);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (cpdmin == -1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>cpdmin = MINCPDLEN; } if (true) log(affpath, key); // Set to false to disable logging.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:span text:style-name="T8">AffixMgr::~AffixMgr</text:span>() {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// pass through linked prefix entries and clean up</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int i = 0; i &lt; SETSIZE; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>pFlag[i] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>PfxEntry* ptr = pStart[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>PfxEntry* nptr = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (ptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>nptr = ptr-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>delete (ptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ptr = nptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>nptr = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// pass through linked suffix entries and clean up</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int j = 0; j &lt; SETSIZE; j++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sFlag[j] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="4"/>SfxEntry* ptr = sStart[j];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>SfxEntry* nptr = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (ptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>nptr = ptr-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>delete (ptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ptr = nptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>nptr = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sStart[j] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>delete iconvtable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>delete oconvtable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>delete phone;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(compoundflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(compoundbegin);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(compoundmiddle);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(compoundend);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(compoundpermitflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(compoundforbidflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(compoundroot);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(forbiddenword);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(nosuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(nongramsuggest);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(needaffix);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(lemma_present);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(circumfix);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FREE_FLAG(onlyincompound);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>cpdwordmax = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>pHMgr = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>cpdmin = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>cpdmaxsyllable = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>free_utf_tbl();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>checknum = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef MOZILLA_CLIENT</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>delete[] csconv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:span text:style-name="T7">void </text:span><text:span text:style-name="T8">AffixMgr::finishFileMgr</text:span>(FileMgr* afflst) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>delete afflst;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// convert affix trees to sorted list</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T10">process_pfx_tree_to_list</text:span>();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T10">process_sfx_tree_to_list</text:span>();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// read in aff file and build up prefix and suffix entry objects</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:span text:style-name="T7">int </text:span><text:span text:style-name="T8">AffixMgr::parse_file</text:span>(const char* affpath, const char* key) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// checking flag duplication</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char dupflags[CONTSIZE];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char dupflags_ini = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// first line indicator for removing byte order mark</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int firstline = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// open the affix file</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>FileMgr* afflst = new FileMgr(affpath, key);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!afflst) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>stderr, &quot;<office:annotation office:name="__Annotation__10468_714486967">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-26T12:42:07.226074220</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">QUESTION: Do we use exactly or as close as possible the same error and warning texts? There is in certain places <text:s/>lot of low-level checking and reporting.</text:span></text:p>
      </office:annotation>error: could not open affix description file %s\n<office:annotation-end office:name="__Annotation__10468_714486967"/>&quot;, affpath);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// step one is to parse the affix file building up the internal</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// affix data structures</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// read in each line ignoring any that do not</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// start with a known line type indicator</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string line;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (afflst-&gt;getline(line)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>mychomp(line);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* remove byte order mark */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (firstline) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>firstline = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// Affix file begins with byte order mark: possible incompatibility with</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// old Hunspell versions</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (line.compare(0, 3, &quot;\xEF\xBB\xBF&quot;, 3) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>line.erase(0, 3);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the keyboard string */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 3, &quot;KEY&quot;, 3) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_string(line, keystring, afflst-&gt;getlinenum())) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the try string */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 3, &quot;TRY&quot;, 3) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_string(line, trystring, afflst-&gt;getlinenum())) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the name of the character set used by the .dict and .aff */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 3, &quot;SET&quot;, 3) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_string(line, encoding, afflst-&gt;getlinenum())) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (encoding == &quot;UTF-8&quot;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>utf8 = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifndef OPENOFFICEORG</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifndef MOZILLA_CLIENT</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>initialize_utf_tbl();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse COMPLEXPREFIXES for agglutinative languages with right-to-left</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="5"/>* writing system */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 15, &quot;COMPLEXPREFIXES&quot;, 15) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>complexprefixes = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by the controlled compound words */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 12, &quot;COMPOUNDFLAG&quot;, 12) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;compoundflag, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by compound words */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 13, &quot;COMPOUNDBEGIN&quot;, 13) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!parse_flag(line, &amp;compoundend, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!parse_flag(line, &amp;compoundbegin, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by compound words */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 14, &quot;COMPOUNDMIDDLE&quot;, 14) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;compoundmiddle, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by compound words */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 11, &quot;COMPOUNDEND&quot;, 11) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!parse_flag(line, &amp;compoundbegin, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!parse_flag(line, &amp;compoundend, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the data used by compound_check() method */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 15, &quot;COMPOUNDWORDMAX&quot;, 15) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_num(line, &amp;cpdwordmax, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag sign compounds in dictionary */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 12, &quot;COMPOUNDROOT&quot;, 12) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;compoundroot, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by compound_check() method */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 18, &quot;COMPOUNDPERMITFLAG&quot;, 18) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;compoundpermitflag, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by compound_check() method */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 18, &quot;COMPOUNDFORBIDFLAG&quot;, 18) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="6"/>if (!parse_flag(line, &amp;compoundforbidflag, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 20, &quot;COMPOUNDMORESUFFIXES&quot;, 20) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>compoundmoresuffixes = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 16, &quot;CHECKCOMPOUNDDUP&quot;, 16) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>checkcompounddup = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 16, &quot;CHECKCOMPOUNDREP&quot;, 16) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>checkcompoundrep = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 19, &quot;CHECKCOMPOUNDTRIPLE&quot;, 19) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>checkcompoundtriple = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 16, &quot;SIMPLIFIEDTRIPLE&quot;, 16) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>simplifiedtriple = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 17, &quot;CHECKCOMPOUNDCASE&quot;, 17) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>checkcompoundcase = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 9, &quot;NOSUGGEST&quot;, 9) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;nosuggest, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 14, &quot;NONGRAMSUGGEST&quot;, 14) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;nongramsuggest, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by forbidden words */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 13, &quot;FORBIDDENWORD&quot;, 13) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;forbiddenword, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by forbidden words (is deprecated) */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 13, &quot;LEMMA_PRESENT&quot;, 13) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;lemma_present, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by circumfixes */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 9, &quot;CIRCUMFIX&quot;, 9) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;circumfix, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">/* parse in the flag used by fogemorphemes */</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 14, &quot;ONLYINCOMPOUND&quot;, 14) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;onlyincompound, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by `needaffixs&apos; (is deprecated) */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 10, &quot;PSEUDOROOT&quot;, 10) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;needaffix, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by `needaffixs&apos; */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 9, &quot;NEEDAFFIX&quot;, 9) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;needaffix, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the minimal length for words in compounds */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 11, &quot;COMPOUNDMIN&quot;, 11) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_num(line, &amp;cpdmin, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (cpdmin &lt; 1)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>cpdmin = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the max. words and syllables in compounds */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 16, &quot;COMPOUNDSYLLABLE&quot;, 16) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_cpdsyllable(line, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by compound_check() method */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 11, &quot;SYLLABLENUM&quot;, 11) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_string(line, cpdsyllablenum, afflst-&gt;getlinenum())) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by the controlled compound words */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 8, &quot;CHECKNUM&quot;, 8) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>checknum = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the extra word characters */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 9, &quot;WORDCHARS&quot;, 9) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_array(line, wordchars, wordchars_utf16,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>utf8, afflst-&gt;getlinenum())) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the ignored characters (for example, Arabic optional diacretics</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="5"/>* charachters */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 6, &quot;IGNORE&quot;, 6) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_array(line, ignorechars, ignorechars_utf16,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>utf8, afflst-&gt;getlinenum())) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the typical fault correcting table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 3, &quot;REP&quot;, 3) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_reptable(line, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the input conversion table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 5, &quot;ICONV&quot;, 5) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_convtable(line, afflst, &amp;iconvtable, &quot;ICONV&quot;)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the output conversion table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 5, &quot;OCONV&quot;, 5) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_convtable(line, afflst, &amp;oconvtable, &quot;OCONV&quot;)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the phonetic translation table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 5, &quot;PHONE&quot;, 5) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_phonetable(line, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the checkcompoundpattern table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 20, &quot;CHECKCOMPOUNDPATTERN&quot;, 20) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_checkcpdtable(line, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the defcompound table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 12, &quot;COMPOUNDRULE&quot;, 12) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_defcpdtable(line, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the related character map table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 3, &quot;MAP&quot;, 3) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_maptable(line, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the word breakpoints table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 5, &quot;BREAK&quot;, 5) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_breaktable(line, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the language for language specific codes */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 4, &quot;LANG&quot;, 4) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_string(line, lang, afflst-&gt;getlinenum())) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>langnum = get_lang_num(lang);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 7, &quot;VERSION&quot;, 7) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>size_t startpos = line.find_first_not_of(&quot; \t&quot;, 7);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (startpos != std::string::npos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>version = line.substr(startpos);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 12, &quot;MAXNGRAMSUGS&quot;, 12) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_num(line, &amp;maxngramsugs, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 11, &quot;ONLYMAXDIFF&quot;, 11) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>onlymaxdiff = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 7, &quot;MAXDIFF&quot;, 7) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_num(line, &amp;maxdiff, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 10, &quot;MAXCPDSUGS&quot;, 10) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_num(line, &amp;maxcpdsugs, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 11, &quot;NOSPLITSUGS&quot;, 11) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>nosplitsugs = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 9, &quot;FULLSTRIP&quot;, 9) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>fullstrip = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 12, &quot;SUGSWITHDOTS&quot;, 12) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>sugswithdots = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by forbidden words */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 8, &quot;KEEPCASE&quot;, 8) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="6"/>if (!parse_flag(line, &amp;keepcase, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by `forceucase&apos; */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 10, &quot;FORCEUCASE&quot;, 10) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;forceucase, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by `warn&apos; */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 4, &quot;WARN&quot;, 4) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;warn, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 10, &quot;FORBIDWARN&quot;, 10) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>forbidwarn = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse in the flag used by the affix generator */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 11, &quot;SUBSTANDARD&quot;, 11) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!parse_flag(line, &amp;substandard, afflst)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>finishFileMgr(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 11, &quot;CHECKSHARPS&quot;, 11) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>checksharps = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>/* parse this affix: P - prefix, S - suffix */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// affix type</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>char ft = &apos; &apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 3, &quot;PFX&quot;, 3) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ft = complexprefixes ? &apos;S&apos; : &apos;P&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (line.compare(0, 3, &quot;SFX&quot;, 3) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ft = complexprefixes ? &apos;P&apos; : &apos;S&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (ft != &apos; &apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (<office:annotation office:name="__Annotation__89786_975352036">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-14T09:58:50.622402135</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">Allocate initial space for dupflags</text:span></text:p>
      </office:annotation>dupflags_ini<office:annotation-end office:name="__Annotation__89786_975352036"/>) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>memset(dupflags, 0, sizeof(dupflags));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>dupflags_ini = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!<office:annotation office:name="__Annotation__89787_975352036">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-14T09:59:13.958850053</dc:date>
       <text:p text:style-name="P11"><text:span text:style-name="T16">Parse line and affix type, result is added to affix list and dupflags. Succes of parsing is in boolean return.</text:span></text:p>
      </office:annotation>parse_affix<office:annotation-end office:name="__Annotation__89787_975352036"/>(line, ft, afflst, dupflags)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><office:annotation office:name="__Annotation__89791_975352036">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-14T10:01:32.881397542</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">QUESTION: Why is this call made even though an error has occured?</text:span></text:p>
      </office:annotation>finishFileMgr<office:annotation-end office:name="__Annotation__89791_975352036"/>(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>f<office:annotation office:name="__Annotation__89792_975352036">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-14T10:02:03.385884373</dc:date>
       <text:p text:style-name="P11"><text:span text:style-name="T16">Convert binary trees to sorted lists.</text:span></text:p>
      </office:annotation>inishFileMgr<office:annotation-end office:name="__Annotation__89792_975352036"/>(afflst);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// affix trees are sorted now</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// now we can speed up performance greatly taking advantage of the</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// relationship between the affixes and the idea of &quot;subsets&quot;.</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// View each prefix as a potential leading subset of another and view</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// each suffix (reversed) as a potential trailing subset of another.</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// To illustrate this relationship if we know the prefix &quot;ab&quot; is found in the</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// word to examine, only prefixes that &quot;ab&quot; is a leading subset of need be</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// examined.</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// Furthermore is &quot;ab&quot; is not present then none of the prefixes that &quot;ab&quot; is</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// is a subset need be examined.</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// The same argument goes for suffix string that are reversed.</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// Then to top this off why not </text:span><office:annotation office:name="__Annotation__9950_104460119">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-13T11:18:01.669266200</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">QUESTION: can this be omitted when we use an exiting datastructure that has optimised lookup functionality? Looks like a C (non-C++) trick.</text:span></text:p>
      </office:annotation><text:span text:style-name="T1">examine the first char of the word</text:span><office:annotation-end office:name="__Annotation__9950_104460119"/><text:span text:style-name="T1"> to quickly</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// limit the set of prefixes to examine (i.e. the prefixes to examine must</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// be leading supersets of the first character of the word (if they exist)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// To take advantage of this &quot;subset&quot; relationship, we need to add two links</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// from entry. <text:s/>One to take next if the current prefix is found (call it</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// </text:span><text:span text:style-name="T6">nexteq</text:span><text:span text:style-name="T1">)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// and one to take next if the current prefix is not found (call it </text:span><text:span text:style-name="T6">nextne</text:span><text:span text:style-name="T1">).</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// Since we have built ordered lists, all that remains is to properly</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// initialize</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// the nextne and nexteq pointers that relate them</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>process_pfx_order();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>process_sfx_order();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><office:annotation office:name="__Annotation__9951_104460119">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-13T11:19:49.187222115</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">QUESTION: if this is deprecated, we will remove all functionality for wordchars and only report a warning that it is no longer needed to provide.</text:span></text:p>
      </office:annotation>/* get encoding for CHECKCOMPOUNDCASE */<office:annotation-end office:name="__Annotation__9951_104460119"/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>csconv = get_current_cs(get_encoding());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (int i = 0; i &lt;= 255; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if ((csconv[i].cupper != csconv[i].clower) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>(wordchars.find((char)i) == std::string::npos)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>wordchars.push_back((char)<office:annotation office:name="__Annotation__89843_975352036">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-14T10:02:46.586592558</dc:date>
       <text:p text:style-name="P11"><text:span text:style-name="T16">Extent wordchars with ASCII characters that it doesn&apos;t contain yet which have different upper case and lower case representation. Default is ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþ</text:span></text:p>
      </office:annotation>i<office:annotation-end office:name="__Annotation__89843_975352036"/>);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// default BREAK definition</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!parsedbreaktable) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>breaktable.push_back(&quot;-&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>breaktable.push_back(&quot;^-&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>breaktable.push_back(&quot;-$&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>parsedbreaktable = true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// we want to be able to quickly access prefix information</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// both by prefix flag, and sorted by prefix string itself</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// so we need to set up two indexes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><office:annotation office:name="__Annotation__9923_104460119">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-13T11:12:29.993147129</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">May also be void as method always returns 0</text:span></text:p>
      </office:annotation><text:span text:style-name="T7">int</text:span><office:annotation-end office:name="__Annotation__9923_104460119"/><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">AffixMgr::build_pfxtree</text:span>(PfxEntry* pfxptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>PfxEntry* ptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>PfxEntry* <office:annotation office:name="__Annotation__9955_104460119">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-13T11:25:02.585750216</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">Previous pointer</text:span></text:p>
      </office:annotation>pptr<office:annotation-end office:name="__Annotation__9955_104460119"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>PfxEntry* <office:annotation office:name="__Annotation__9956_104460119">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-13T11:28:46.792817707</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">Entry pointer</text:span></text:p>
      </office:annotation>ep<office:annotation-end office:name="__Annotation__9956_104460119"/> = pfxptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// get the right starting points</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char* key = ep-&gt;<office:annotation office:name="__Annotation__9898_104460119">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-13T11:05:06.842084832</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">for prefix this is c_str() of appnd</text:span></text:p>
      </office:annotation>getKey()<office:annotation-end office:name="__Annotation__9898_104460119"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const unsigned char flg = (unsigned char)(ep-&gt;getFlag() &amp; 0x00FF);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// first index by flag which must exist</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>ptr = pFlag[flg];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>ep-&gt;setFlgNxt(ptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>pFlag[flg] = ep;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// handle the special case of null affix string</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>if (strlen(key) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// always inset them at head of list at element 0</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>ptr = pStart[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>ep-&gt;setNext(ptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>pStart[0] = ep;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// now handle the normal case</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>ep-&gt;setNextEQ(NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>ep-&gt;setNextNE(NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>unsigned char sp = *((const unsigned char*)key);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>ptr = pStart[sp];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// handle the first insert</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (<office:annotation office:name="__Annotation__9954_104460119">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-13T11:23:44.838598888</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">handle ONLY the first insert. nothing further to process</text:span></text:p>
      </office:annotation>!ptr<office:annotation-end office:name="__Annotation__9954_104460119"/>) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>pStart[sp] = ep;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// otherwise use binary tree insertion so that a sorted</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// list can easily be generated later</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>pptr = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (;;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>pptr = ptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (<office:annotation office:name="__Annotation__9994_104460119">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-13T11:34:15.815547734</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">If ep is equal or subset ptr:</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T19">- ptr will progress to its NextEQ</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T19">- if that doesn&apos;t have a value, it will be set to ep and for-loop will be stopped</text:span></text:p>
      </office:annotation>strcmp(ep-&gt;getKey(), ptr-&gt;getKey()) &lt;= 0<office:annotation-end office:name="__Annotation__9994_104460119"/>) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ptr = ptr-&gt;getNextEQ();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!ptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>pptr-&gt;setNextEQ(ep);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} <office:annotation office:name="__Annotation__9993_104460119">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-13T11:32:20.538939203</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">If ep is superset ptr:</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">- ptr will progress to its NextNE</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">- if that doesn&apos;t have a value, it will be set to ep and for-loop will be stopped</text:span></text:p>
      </office:annotation>else<office:annotation-end office:name="__Annotation__9993_104460119"/> {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ptr = ptr-&gt;getNextNE();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!ptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>pptr-&gt;setNextNE(ep);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// we want to be able to quickly access suffix information</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// both by suffix flag, and sorted by the <office:annotation office:name="__Annotation__9897_104460119">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-13T11:03:29.176115050</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">QUESTION: we never need to index on the non-reversed suffix string?</text:span></text:p>
      </office:annotation>reverse<office:annotation-end office:name="__Annotation__9897_104460119"/> of the</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// suffix string itself; so we need to set up two indexes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:span text:style-name="T7">int </text:span><text:span text:style-name="T8">AffixMgr::build_sfxtree</text:span>(SfxEntry* sfxptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>sfxptr-&gt;<office:annotation office:name="__Annotation__9922_104460119">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-13T11:09:36.978104332</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">Store reversed version pof appnd in rappnd</text:span></text:p>
      </office:annotation>initReverseWord()<office:annotation-end office:name="__Annotation__9922_104460119"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>SfxEntry* ptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>SfxEntry* pptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>SfxEntry* ep = sfxptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>/* get the right starting point */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char* key = ep-&gt;<office:annotation office:name="__Annotation__9899_104460119">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-13T11:05:29.923818645</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T20">For suffix this is c_str() of rappnd (the reverse of the suffix)</text:span></text:p>
      </office:annotation>getKey()<office:annotation-end office:name="__Annotation__9899_104460119"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const unsigned char flg = (unsigned char)(ep-&gt;getFlag() &amp; 0x00FF);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// first index by flag which must exist</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>ptr = sFlag[flg];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>ep-&gt;setFlgNxt(ptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>sFlag[flg] = ep;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// next index by affix string</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/><text:span text:style-name="T1">// handle the special case of null affix string</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (strlen(key) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// always inset them at head of list at element 0</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>ptr = sStart[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>ep-&gt;setNext(ptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sStart[0] = ep;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// now handle the normal case</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>ep-&gt;setNextEQ(NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>ep-&gt;setNextNE(NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>unsigned char sp = *((const unsigned char*)key);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>ptr = sStart[sp];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// handle the first insert</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!ptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sStart[sp] = ep;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// otherwise use binary tree insertion so that a sorted</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// list can easily be generated later</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>pptr = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (;;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>pptr = ptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><office:annotation office:name="__Annotation__10765_714486967">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-26T12:54:42.906122436</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T20">If ep is equal or subset ptr:</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">- ptr will progress to its NextEQ</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">- if that doesn&apos;t have a value, it will be set to ep and for-loop will be stopped</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10765_714486967"/> (strcmp(ep-&gt;getKey(), ptr-&gt;getKey()) &lt;= 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ptr = ptr-&gt;getNextEQ();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!ptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>pptr-&gt;setNextEQ(ep);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} <office:annotation office:name="__Annotation__10766_714486967">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-26T12:55:05.818905925</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T20">If ep is superset ptr:</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">- ptr will progress to its NextNE</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">- if that doesn&apos;t have a value, it will be set to ep and for-loop will be stopped</text:span></text:p>
      </office:annotation>else<office:annotation-end office:name="__Annotation__10766_714486967"/> {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ptr = ptr-&gt;getNextNE();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!ptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>pptr-&gt;setNextNE(ep);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// convert from binary tree to sorted list</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int <text:span text:style-name="T8">AffixMgr::process_pfx_tree_to_list</text:span>() {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int i = 1; i &lt; SETSIZE; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>pStart[i] = <text:span text:style-name="T10">process_pfx_in_order</text:span>(pStart[i], NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">PfxEntry* <text:span text:style-name="T8">AffixMgr::process_pfx_in_order</text:span>(PfxEntry* ptr, PfxEntry* nptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (ptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>nptr = <text:span text:style-name="T10">process_pfx_in_order</text:span>(ptr-&gt;getNextNE(), nptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>ptr-&gt;<text:span text:style-name="T10">setNext</text:span>(nptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>nptr = <text:span text:style-name="T10">process_pfx_in_order</text:span>(ptr-&gt;getNextEQ(), ptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return nptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// convert from binary tree to sorted list</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int <text:span text:style-name="T8">AffixMgr::process_sfx_tree_to_list</text:span>() {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int i = 1; i &lt; SETSIZE; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sStart[i] = process_sfx_in_order(sStart[i], NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">SfxEntry* <text:span text:style-name="T8">AffixMgr::process_sfx_in_order</text:span>(SfxEntry* ptr, SfxEntry* nptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (ptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T10">nptr = process_sfx_in_order</text:span>(ptr-&gt;getNextNE(), nptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>ptr-&gt;<text:span text:style-name="T10">setNext</text:span>(nptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>nptr = <text:span text:style-name="T10">process_sfx_in_order</text:span>(ptr-&gt;getNextEQ(), ptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return nptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// reinitialize the PfxEntry links NextEQ and NextNE to speed searching</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// using the idea of leading subsets this time</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int <text:span text:style-name="T8">AffixMgr::process_pfx_order</text:span>() {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>PfxEntry* ptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// loop through each prefix list starting point</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int i = 1; i &lt; SETSIZE; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>ptr = pStart[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// look through the remainder of the list</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// <text:s/>and find next entry with affix that</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// the current one is not a subset of</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// mark that as destination for NextNE</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// use next in list that you are a subset</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// of as NextEQ</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (; ptr != NULL; ptr = ptr-&gt;getNext()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>PfxEntry* nptr = ptr-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for (; nptr != NULL; nptr = nptr-&gt;getNext()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!<text:span text:style-name="T10">isSubset</text:span>(ptr-&gt;getKey(), nptr-&gt;getKey()))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ptr-&gt;setNextNE(nptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ptr-&gt;setNextEQ(NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if ((ptr-&gt;getNext()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>isSubset(ptr-&gt;getKey(), (ptr-&gt;getNext())-&gt;getKey()))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>ptr-&gt;setNextEQ(ptr-&gt;getNext());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// now clean up by adding smart search termination strings:</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// if you are already a superset of the previous prefix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// but not a subset of the next, search can end here</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// so set NextNE properly</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>ptr = pStart[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (; ptr != NULL; ptr = ptr-&gt;getNext()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>PfxEntry* nptr = ptr-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>PfxEntry* mptr = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for (; nptr != NULL; nptr = nptr-&gt;getNext()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!isSubset(ptr-&gt;getKey(), nptr-&gt;getKey()))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>mptr = nptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (mptr)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>mptr-&gt;setNextNE(NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// initialize the SfxEntry links NextEQ and NextNE to speed searching</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// using the idea of leading subsets this time</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/>int <text:span text:style-name="T8">AffixMgr::process_sfx_order</text:span>() {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>SfxEntry* ptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// loop through each prefix list starting point</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int i = 1; i &lt; SETSIZE; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>ptr = sStart[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// look through the remainder of the list</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// <text:s/>and find next entry with affix that</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// the current one is not a subset of</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// mark that as destination for NextNE</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// use next in list that you are a subset</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// of as NextEQ</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (; ptr != NULL; ptr = ptr-&gt;getNext()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>SfxEntry* nptr = ptr-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for (; nptr != NULL; nptr = nptr-&gt;getNext()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!isSubset(ptr-&gt;getKey(), nptr-&gt;getKey()))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ptr-&gt;setNextNE(nptr);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ptr-&gt;setNextEQ(NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if ((ptr-&gt;getNext()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>isSubset(ptr-&gt;getKey(), (ptr-&gt;getNext())-&gt;getKey()))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>ptr-&gt;setNextEQ(ptr-&gt;getNext());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// now clean up by adding smart search termination strings:</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// if you are already a superset of the previous suffix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// but not a subset of the next, search can end here</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// so set NextNE properly</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>ptr = sStart[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (; ptr != NULL; ptr = ptr-&gt;getNext()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>SfxEntry* nptr = ptr-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>SfxEntry* mptr = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for (; nptr != NULL; nptr = nptr-&gt;getNext()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!isSubset(ptr-&gt;getKey(), nptr-&gt;getKey()))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>mptr = nptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (mptr)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>mptr-&gt;setNextNE(NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// add flags to the result for dictionary debugging</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">std::string&amp; <text:span text:style-name="T8">AffixMgr::debugflag</text:span>(std::string&amp; result, unsigned short flag) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char* st = encode_flag(flag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>result.append(MORPH_FLAG);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (st) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>result.append(st);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>free(st);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// calculate the character length of the condition</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int <text:span text:style-name="T8">AffixMgr::condlen</text:span>(const char* st) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int l = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>bool group = false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (; *st; st++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="4"/>if (*st == &apos;[&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>group = true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>l++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if (*st == &apos;]&apos;)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>group = false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>else if (!group &amp;&amp; (!utf8 || (!(*st &amp; 0x80) || ((*st &amp; 0xc0) == 0x80))))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>l++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return l;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int <text:span text:style-name="T8">AffixMgr::encodeit</text:span>(AffEntry&amp; entry, const char* cs) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (strcmp(cs, &quot;.&quot;) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>entry.numconds = (char)condlen(cs);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>const size_t cslen = strlen(cs);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>const size_t short_part = std::min&lt;size_t&gt;(MAXCONDLEN, cslen);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>memcpy(entry.c.conds, cs, short_part);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (short_part &lt; MAXCONDLEN) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><text:span text:style-name="T1">//blank out the remaining space</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>memset(entry.c.conds + short_part, 0, MAXCONDLEN - short_part);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else if (cs[MAXCONDLEN]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><text:span text:style-name="T1">//there is more conditions than fit in fixed space, so its</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><text:span text:style-name="T1">//a long condition</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>entry.opts += aeLONGCOND;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>entry.c.l.conds2 = mystrdup(cs + MAXCONDLEN_1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!entry.c.l.conds2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>entry.numconds = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>entry.c.conds[0] = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// return 1 if s1 is a leading subset of s2 (dots are for infixes)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">inline int <text:span text:style-name="T8">AffixMgr::</text:span><office:annotation office:name="__Annotation__10768_714486967">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-26T12:59:38.131464300</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">QUESTION: Also strcmp is used for building data structures indexes. When to use that or when to use this method?</text:span></text:p>
      </office:annotation><text:span text:style-name="T8">isSubset</text:span><office:annotation-end office:name="__Annotation__10768_714486967"/>(const char* s1, const char* s2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (((*s1 == *s2) || (*s1 == &apos;.&apos;)) &amp;&amp; (*s1 != &apos;\0&apos;)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>s1++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>s2++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return (*s1 == &apos;\0&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// check word for prefixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">struct hentry* <text:span text:style-name="T8">AffixMgr::prefix_check</text:span>(const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="38"/>int len,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="38"/>char in_compound,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="38"/>const FLAG needflag) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>struct hentry* rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>pfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>pfxappnd = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>sfxappnd = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>sfxextra = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// first handle the special case of 0 length prefixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>PfxEntry* pe = <office:annotation office:name="__Annotation__12528_854338662">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-15T01:24:23.073295060</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">Zero-length prefixes are always stored at the beginning.</text:span></text:p>
      </office:annotation>pStart[0]<office:annotation-end office:name="__Annotation__12528_854338662"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (pe) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><office:annotation office:name="__Annotation__10942_3076130788">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-01T15:38:50.163420307</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T20">1.a this method is called from compounding</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">OR</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">1.b the continuation classes of the prefix entry under consideration does not contain generic onlyincompound flag</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20"/></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">AND</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20"/></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">2.a this method is not called from compounding or from compounding related to the end part</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">OR</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">2.b continuation classes of the prefix entry under consideration does contain generic compoundpermitflag flag</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10942_3076130788"/> (</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T1">// fogemorpheme</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>((in_compound != IN_CPD_NOT) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="9"/>!(pe-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(TESTAFF(pe-&gt;getCont(), <office:annotation office:name="__Annotation__11197_3076130788">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-01T16:02:07.674609635</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T20">ONLYINCOMPOUND Suffixes signed with ONLYINCOMPOUND flag may be only inside of compounds (Fuge-elements in German, fogemorphemes in Swedish). ONLYINCOMPOUND flag works also with words. Note: also valuable to flag compounding parts which are not correct as a word by itself.</text:span></text:p>
      </office:annotation>onlyincompound<office:annotation-end office:name="__Annotation__11197_3076130788"/>, pe-&gt;getContLen())))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T1">// permit prefixes in compounds</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="8"/>((in_compound != IN_CPD_END) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="9"/>(pe-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>(TESTAFF(pe-&gt;getCont(), <office:annotation office:name="__Annotation__11196_3076130788">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-01T16:01:54.829887175</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T20">COMPOUNDPERMITFLAG Prefixes are allowed at the beginning of compounds, suffixes are allowed at the end of compounds by default. Affixes with COMPOUNDPERMITFLAG may be inside of compounds.</text:span></text:p>
      </office:annotation>compoundpermitflag<office:annotation-end office:name="__Annotation__11196_3076130788"/>, pe-&gt;getContLen()))))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><text:span text:style-name="T1">// check prefix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>rv = pe-&gt;<text:span text:style-name="T10">checkword</text:span>(word, len, in_compound, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><office:annotation office:name="__Annotation__11198_3076130788">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-01T16:05:42.768661763</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">If the prefix entry under consideration matches the provided word, then return the hash entry of <text:s/>the root word.</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__11198_3076130788"/> (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>pfx = pe; <text:s/><text:span text:style-name="T9">// BUG: pfx not stateless</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>pe = pe-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// now handle the general case</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>unsigned char sp = *((const unsigned char*)word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>PfxEntry* pptr = pStart[<office:annotation office:name="__Annotation__11333_3076130788">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-01T16:11:18.181815774</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">Start iterating with the provided word indexing the prefix entry with matching append value. Iterator will follow NextEQ if prefix entry append value is a subset of the provided word, otherwise the iterator will follow NextNE.</text:span></text:p>
      </office:annotation>sp<office:annotation-end office:name="__Annotation__11333_3076130788"/>];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (pptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (isSubset(pptr-&gt;getKey(), word)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><office:annotation office:name="__Annotation__11332_3076130788">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-01T16:10:30.075535537</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T20">SAME CONDITIONS AS ABOVE</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__11332_3076130788"/> (</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><text:span text:style-name="T1">// fogemorpheme</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>((in_compound != IN_CPD_NOT) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>!(pptr-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(TESTAFF(pptr-&gt;getCont(), onlyincompound, pptr-&gt;getContLen())))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><text:span text:style-name="T1">// permit prefixes in compounds</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>((in_compound != IN_CPD_END) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(pptr-&gt;getCont() &amp;&amp; (TESTAFF(pptr-&gt;getCont(), compoundpermitflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="40"/>pptr-&gt;getContLen()))))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T1">// check prefix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>rv = pptr-&gt;<text:span text:style-name="T10">checkword</text:span>(word, len, in_compound, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><office:annotation office:name="__Annotation__11331_3076130788">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-01T16:09:39.860416287</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T20">If the prefix entry under consideration matches the provided word, then return the hash entry of <text:s/>the root word.</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__11331_3076130788"/> (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>pfx = pptr; <text:s/><text:span text:style-name="T9">// BUG: pfx not stateless</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>pptr = pptr-&gt;getNextEQ();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>pptr = pptr-&gt;getNextNE();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// check word for prefixes and two-level suffixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">struct hentry* <text:span text:style-name="T8">AffixMgr::prefix_check_twosfx</text:span>(const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="45"/>int len,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="45"/>char in_compound,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="45"/>const FLAG needflag) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>struct hentry* rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>pfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>sfxappnd = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>sfxextra = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// first handle the special case of 0 length prefixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>PfxEntry* pe = pStart[<office:annotation office:name="__Annotation__10634_3129959820">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-02T15:49:20.736589427</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T20">Zero-length prefixes are always stored at the beginning.</text:span></text:p>
      </office:annotation>0<office:annotation-end office:name="__Annotation__10634_3129959820"/>];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (pe) {<text:tab/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>rv = pe-&gt;<text:span text:style-name="T10">check_twosfx</text:span>(word, len, in_compound, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (rv)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>pe = pe-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/><text:span text:style-name="T1">// now handle the general case</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>unsigned char sp = *((const unsigned char*)word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>PfxEntry* pptr = pStart[<office:annotation office:name="__Annotation__10771_3129959820">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-02T15:49:42.272674651</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T20">Start iterating with the provided word indexing the prefix entry with matching append value. Iterator will follow NextEQ if suffix entry append value is a subset of the provided word, otherwise the iterator will follow NextNE.</text:span></text:p>
      </office:annotation>sp<office:annotation-end office:name="__Annotation__10771_3129959820"/>];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (pptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (isSubset(pptr-&gt;getKey(), word)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>rv = pptr-&gt;<text:span text:style-name="T10">check_twosfx</text:span>(word, len, in_compound, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><office:annotation office:name="__Annotation__10772_3129959820">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-02T15:50:22.177233032</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T20">If the prefix entry under consideration matches for two suffixes for the provided word, then return the hash entry of <text:s/>the root word.</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10772_3129959820"/> (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>pfx = pptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>pptr = pptr-&gt;getNextEQ();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>pptr = pptr-&gt;getNextNE();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// check word for prefixes and morph</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">std::string <text:span text:style-name="T8">AffixMgr::prefix_check_morph</text:span>(const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="41"/>int len,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="41"/>char in_compound,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="41"/>const FLAG needflag) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>pfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>sfxappnd = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>sfxextra = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>// first handle the special case of 0 length prefixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>PfxEntry* pe = pStart[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>while (pe) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>std::string st = pe-&gt;check_morph(word, len, in_compound, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!st.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>result.append(st);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>pe = pe-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>// now handle the general case</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>unsigned char sp = *((const unsigned char*)word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>PfxEntry* pptr = pStart[sp];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>while (pptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (isSubset(pptr-&gt;getKey(), word)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>std::string st = pptr-&gt;check_morph(word, len, in_compound, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (!st.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>// fogemorpheme</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if ((in_compound != IN_CPD_NOT) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>!((pptr-&gt;getCont() &amp;&amp; (TESTAFF(pptr-&gt;getCont(), onlyincompound,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="43"/>pptr-&gt;getContLen()))))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>result.append(st);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>pfx = pptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>pptr = pptr-&gt;getNextEQ();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:span text:style-name="T7"><text:s text:c="6"/>pptr = pptr-&gt;getNe</text:span>xtNE();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// check word for prefixes and morph and two-level suffixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">std::string <text:span text:style-name="T8">AffixMgr::prefix_check_twosfx_morph</text:span>(const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="48"/>int len,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="48"/>char in_compound,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="48"/>const FLAG needflag) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>pfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>sfxappnd = <text:span text:style-name="T7">NULL;</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>sfxextra = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>// first handle the special case of 0 length prefixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>PfxEntry* pe = pStart[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>while (pe) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>std::string st = pe-&gt;check_twosfx_morph(word, len, in_compound, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!st.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>result.append(st);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>pe = pe-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>// now handle the general case</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>unsigned char sp = *((const unsigned char*)word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>PfxEntry* pptr = pStart[sp];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>while (pptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (isSubset(pptr-&gt;getKey(), word)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>std::string st = pptr-&gt;check_twosfx_morph(word, len, in_compound, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (!st.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>result.append(st);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>pfx = pptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>pptr = pptr-&gt;getNextEQ();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>pptr = pptr-&gt;getNextNE();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// Is word a non-compound with a REP substitution (see checkcompoundrep)?</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int <text:span text:style-name="T8">AffixMgr::cpdrep_check</text:span>(const char* word, int wl) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if ((wl &lt; 2) || reptable.empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (size_t i = 0; i &lt; reptable.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>const char* r = word;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>const size_t lenp = reptable[i].pattern.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>// search every occurence of the pattern in the word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>while ((r = strstr(r, reptable[i].pattern.c_str())) != NULL) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>std::string candidate(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>size_t type = r == word &amp;&amp; langnum != LANG_hu ? 1 : 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (r - word + reptable[i].pattern.size() == lenp &amp;&amp; langnum != LANG_hu)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>type += 2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>candidate.replace(r - word, lenp, reptable[i].outstrings[type]);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (candidate_check(candidate.c_str(), candidate.size()))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>++r; <text:s/>// search for the next letter</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// forbid compoundings when there are special patterns at word bound</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int <text:span text:style-name="T8">AffixMgr::cpdpat_check</text:span>(const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>int pos,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>hentry* r1,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>hentry* r2,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>const char /*affixed*/) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (size_t i = 0; i &lt; checkcpdtable.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>size_t len;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><office:annotation office:name="__Annotation__10303_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T12:53:04.211469853</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">If all of the following apply:</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T19"/></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T19">1. TODO</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T19"/></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">2. The hash entry r1 does not exit OR the chech compound table has no conditoins for element i OR hash entry r1 has flags and one of those flags is the condition of element i in the check compound table</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20"/></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">3. The hash entry r2 does not exit OR the chech compound table has no conditoins for element i OR hash entry r2 has flags and one of those flags is the condition of element i in the check compound table</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20"/></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20">4. TODO OR TODO OR TODO</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T20"/></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10303_3164858689"/> (isSubset(checkcpdtable[i].pattern2.c_str(), word + pos) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>(!r1 || !checkcpdtable[i].cond ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="9"/>(r1-&gt;astr &amp;&amp; TESTAFF(r1-&gt;astr, checkcpdtable[i].cond, r1-&gt;alen))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>(!r2 || !checkcpdt<text:span text:style-name="T7">able[i].cond2 ||</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="9"/>(r2-&gt;astr &amp;&amp; TESTAFF(r2-&gt;astr, checkcpdtable[i].cond2, r2-&gt;alen))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>// zero length pattern =&gt; only TESTAFF</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>// zero pattern (0/flag) =&gt; unmodified stem (zero affixes allowed)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>(checkcpdtable[i].pattern.empty() ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="9"/>((checkcpdtable[i].pattern[0] == &apos;0&apos; &amp;&amp; r1-&gt;blen &lt;= pos &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="11"/>strncmp(word + pos - r1-&gt;blen, r1-&gt;word, r1-&gt;blen) == 0) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>(checkcpdtable[i].pattern[0] != &apos;0&apos; &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="11"/>((len = checkcpdtable[i].pattern.size()) != 0) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="11"/>strncmp(word + pos - len, checkcpdtable[i].pattern.c_str(), len) == 0)))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// forbid compounding with neighbouring upper and lower case characters at word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// bounds</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int <text:span text:style-name="T8">AffixMgr::cpdcase_check</text:span>(const char* word, int pos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>const char* p;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (p = word + pos - 1; (*p &amp; 0xc0) == 0x80; p--)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string pair(p);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::vector&lt;w_char&gt; pair_u;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>u8_u16(pair_u, pair);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>unsigned short a = pair_u.size() &gt; 1 ? ((pair_u[1].h &lt;&lt; 8) + pair_u[1].l) : 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>unsigned short b = !pair_u.empty() ? ((pair_u[0].h &lt;&lt; 8) + pair_u[0].l) : 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><office:annotation office:name="__Annotation__10406_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T12:58:31.642711247</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">If the following apply:</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T19"/></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T19">1. Character a is in upper case OR character b is in upper case.</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T19"/></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T19">2. Character a is not a hyphen.</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T19"/></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T19">3. Character b is not a hyphen.</text:span></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T19"/></text:p>
       <text:p text:style-name="P10"><text:span text:style-name="T19">(same description goes for the non-UTF8 if statement below it.)</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10406_3164858689"/> (((unicodetoupper(a, langnum) == a) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="9"/>(unicodetoupper(b, langnum) == b)) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>(a != &apos;-&apos;) &amp;&amp; (b != &apos;-&apos;))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>unsigned char a = *(word + pos - 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>unsigned char b = *(word + pos);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if ((csconv[a].ccase || csconv[b].ccase) &amp;&amp; (a != &apos;-&apos;) &amp;&amp; (b != &apos;-&apos;))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">struct metachar_data {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>signed short btpp; <text:s/>// metacharacter (*, ?) position for backtracking</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>signed short btwp; <text:s/>// word position for metacharacters</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int btnum; <text:s text:c="9"/>// number of matched characters in metacharacter</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">};</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// check compound patterns</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int <text:span text:style-name="T8">AffixMgr::defcpd_check</text:span>(hentry*** words,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>short wnum,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="27"/>hentry* rv,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>hentry** def,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>char all) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int w = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!*words) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>w = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>*words = def;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!*words) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::vector&lt;metachar_data&gt; btinfo(1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>short bt = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>(*words)[wnum] = rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>// has the last word COMPOUNDRULE flag?</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (rv-&gt;alen == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>(*words)[wnum] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (w)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>*words = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int ok = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (size_t i = 0; i &lt; defcpdtable.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>for (size_t j = 0; j &lt; defcpdtable[i].size(); ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (defcpdtable[i][j] != &apos;*&apos; &amp;&amp; defcpdtable[i][j] != &apos;?&apos; &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>TESTAFF(rv-&gt;astr, defcpdtable[i][j], rv-&gt;alen)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>ok = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (ok == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>(*words)[wnum] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (w)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>*words = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (size_t i = 0; i &lt; defcpdtable.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>size_t pp = 0; <text:s/>// pattern position</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>signed short wp = 0; <text:s/>// &quot;words&quot; position</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>int ok2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>ok = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>ok2 = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>do {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>while ((pp &lt; defcpdtable[i].size()) &amp;&amp; (wp &lt;= wnum)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (((pp + 1) &lt; defcpdtable[i].size()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>((defcpdtable[i][pp + 1] == &apos;*&apos;) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="13"/>(defcpdtable[i][pp + 1] == &apos;?&apos;))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>int wend = (defcpdtable[i][pp + 1] == &apos;?&apos;) ? wp : wnum;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>ok2 = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>pp += 2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>btinfo[bt].btpp = pp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>btinfo[bt].btwp = wp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>while (wp &lt;= wend) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>if (!(*words)[wp]-&gt;alen ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>!TESTAFF((*words)[wp]-&gt;astr, defcpdtable[i][pp - 2],</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="25"/>(*words)[wp]-&gt;alen)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>ok2 = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="14"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>wp++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (wp &lt;= wnum)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>ok2 = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>btinfo[bt].btnum = wp - btinfo[bt].btwp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (btinfo[bt].btnum &gt; 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>++bt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>btinfo.resize(bt+1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (ok2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>ok2 = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (!(*words)[wp] || !(*words)[wp]-&gt;alen ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>!TESTAFF((*words)[wp]-&gt;astr, defcpdtable[i][pp],</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="23"/>(*words)[wp]-&gt;alen)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>ok = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>pp++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>wp++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if ((defcpdtable[i].size() == pp) &amp;&amp; !(wp &gt; wnum))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>ok = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (ok &amp;&amp; ok2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>size_t r = pp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>while ((defcpdtable[i].size() &gt; r) &amp;&amp; ((r + 1) &lt; defcpdtable[i].size()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="15"/>((defcpdtable[i][r + 1] == &apos;*&apos;) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>(defcpdtable[i][r + 1] == &apos;?&apos;)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>r += 2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>if (defcpdtable[i].size() &lt;= r)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>// backtrack</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>if (bt)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>do {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>ok = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>btinfo[bt - 1].btnum--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>pp = btinfo[bt - 1].btpp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>wp = btinfo[bt - 1].btwp + (signed short)btinfo[bt - 1].btnum;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>} while ((btinfo[bt - 1].btnum &lt; 0) &amp;&amp; --bt);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>} while (bt);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (ok &amp;&amp; ok2 &amp;&amp; (!all || (defcpdtable[i].size() &lt;= pp)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>// check zero ending</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>while (ok &amp;&amp; ok2 &amp;&amp; (defcpdtable[i].size() &gt; pp) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="11"/>((pp + 1) &lt; defcpdtable[i].size()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="11"/>((defcpdtable[i][pp + 1] == &apos;*&apos;) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>(defcpdtable[i][pp + 1] == &apos;?&apos;)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>pp += 2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (ok &amp;&amp; ok2 &amp;&amp; (defcpdtable[i].size() &lt;= pp))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>(*words)[wnum] = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (w)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>*words = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">inline int <text:span text:style-name="T8">AffixMgr::candidate_check</text:span>(const char* word, int len) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>struct hentry* rv = lookup(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (rv)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T9">// <text:s/>rv = prefix_check(word,len,1);</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T9">// <text:s/>if (rv) return 1;</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>rv = affix_check(word, len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (rv)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// calculate number of syllable for compound-checking</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">short <text:span text:style-name="T8">AffixMgr::get_syllable</text:span>(const std::string&amp; word) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (cpdmaxsyllable == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>short num = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (size_t i = 0; i &lt; word.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (std::binary_search(cpdvowels.begin(), cpdvowels.end(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>word[i])) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>++num;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else if (!cpdvowels_utf16.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::vector&lt;w_char&gt; w;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>u8_u16(w, word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (size_t i = 0; i &lt; w.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (std::binary_search(cpdvowels_utf16.begin(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>cpdvowels_utf16.end(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>w[i])) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>++num;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return num;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">void <text:span text:style-name="T8">AffixMgr::setcminmax</text:span>(int* cmin, int* cmax, const char* word, int len) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>int i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (*cmin = 0, i = 0; (i &lt; cpdmin) &amp;&amp; *cmin &lt; len; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for ((*cmin)++; *cmin &lt; len &amp;&amp; (word[*cmin] &amp; 0xc0) == 0x80; (*cmin)++)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (*cmax = len, i = 0; (i &lt; (cpdmin - 1)) &amp;&amp; *cmax &gt;= 0; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for ((*cmax)--; *cmax &gt;= 0 &amp;&amp; (word[*cmax] &amp; 0xc0) == 0x80; (*cmax)--)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>*cmin = cpdmin;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>*cmax = len - cpdmin + 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// check if compound word is correctly spelled</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// hu_mov_rule = spec. Hungarian rule (XXX)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">struct hentry* <text:span text:style-name="T8">AffixMgr::compound_check</text:span>(const std::string&amp; word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="40"/>short wordnum,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="40"/>short numsyllable,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="40"/>short maxwordnum,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="40"/>short wnum,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="40"/>hentry** words = NULL,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="40"/>hentry** rwords = NULL,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="40"/>char hu_mov_rule = 0,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="40"/>char is_sug = 0,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="40"/>int* info = NULL) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>short oldnumsyllable, oldnumsyllable2, oldwordnum, oldwordnum2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>struct hentry* rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>struct hentry* rv_first;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string st;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char ch = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int cmin;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int cmax;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int striple = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>size_t scpd = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int soldi = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int oldcmin = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int oldcmax = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int oldlen = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int checkedstriple = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char affixed = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>hentry** oldwords = words;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>size_t len = word.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int checked_prefix;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>setcminmax(&amp;cmin, &amp;cmax, word.c_str(), len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>st.assign(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (i = cmin; i &lt; cmax; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// go to end of the UTF-8 character</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for (; (st[i] &amp; 0xc0) == 0x80; i++)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (i &gt;= cmax)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>words = oldwords;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>int onlycpdrule = (words) ? 1 : 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>do { <text:s/><text:span text:style-name="T1">// onlycpdrule loop</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>oldnumsyllable = numsyllable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>oldwordnum = wordnum;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>checked_prefix = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>do { <text:s/><text:span text:style-name="T1">// simplified checkcompoundpattern loop</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (scpd &gt; 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><office:annotation office:name="__Annotation__10414_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:03:48.561521565</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">TODO</text:span></text:p>
      </office:annotation>for<office:annotation-end office:name="__Annotation__10414_3164858689"/> (; scpd &lt;= checkcpdtable.size() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>(checkcpdtable[scpd - 1].pattern3.empty() ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>strncmp(word.c_str() + i, checkcpdtable[scpd - 1].pattern3.c_str(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="26"/>checkcpdtable[scpd - 1].pattern3.size()) != 0);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>scpd++)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (scpd &gt; checkcpdtable.size())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break; <text:s/><text:span text:style-name="T1">// break simplified checkcompoundpattern loop</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>st.replace(i, std::string::npos, checkcpdtable[scpd - 1].pattern);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>soldi = i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="10"/>i += checkcpdtable[scpd - 1].pattern.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>st.replace(i, std::string::npos, checkcpdtable[scpd - 1].pattern2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>st.replace(i + checkcpdtable[scpd - 1].pattern2.size(), std::string::npos,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>word.substr(soldi + checkcpdtable[scpd - 1].pattern3.size()));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>oldlen = len;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>len += checkcpdtable[scpd - 1].pattern.size() +</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>checkcpdtable[scpd - 1].pattern2.size() -</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>checkcpdtable[scpd - 1].pattern3.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>oldcmin = cmin;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>oldcmax = cmax;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>setcminmax(&amp;cmin, &amp;cmax, st.c_str(), len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>cmax = len - cpdmin + 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>ch = st[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>st[i] = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>sfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>pfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T1">// FIRST WORD</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>affixed = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>rv = lookup(st.c_str()); <text:s/>// perhaps without prefix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T1">// search homonym with compound flag</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><office:annotation office:name="__Annotation__10415_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:04:02.969818832</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">TODO</text:span></text:p>
      </office:annotation>while<office:annotation-end office:name="__Annotation__10415_3164858689"/> ((rv) &amp;&amp; !hu_mov_rule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>((needaffix &amp;&amp; TESTAFF(rv-&gt;astr, needaffix, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>!((compoundflag &amp;&amp; !words &amp;&amp; !onlycpdrule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="19"/>TESTAFF(rv-&gt;astr, compoundflag, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>(compoundbegin &amp;&amp; !wordnum &amp;&amp; !onlycpdrule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="19"/>TESTAFF(rv-&gt;astr, compoundbegin, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>(compoundmiddle &amp;&amp; wordnum &amp;&amp; !words &amp;&amp; !onlycpdrule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="19"/>TESTAFF(rv-&gt;astr, compoundmiddle, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>(!defcpdtable.empty() &amp;&amp; onlycpdrule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="19"/>((!words &amp;&amp; !wordnum &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>defcpd_check(&amp;words, wnum, rv, rwords, 0)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>(words &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>defcpd_check(&amp;words, wnum, rv, rwords, 0))))) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(scpd != 0 &amp;&amp; checkcpdtable[scpd - 1].cond != FLAG_NULL &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>!TESTAFF(rv-&gt;astr, checkcpdtable[scpd - 1].cond, rv-&gt;alen)))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rv = rv-&gt;next_homonym;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (rv)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>affixed = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (onlycpdrule)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><office:annotation office:name="__Annotation__10416_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:04:11.930109618</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">TODO</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10416_3164858689"/> (compoundflag &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>!(rv = prefix_check(st.c_str(), i,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>compoundflag))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><office:annotation office:name="__Annotation__10417_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:04:18.786290685</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">TODO</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10417_3164858689"/> (((rv = suffix_check(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>st.c_str(), i, 0, NULL, FLAG_NULL, compoundflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>(compoundmoresuffixes &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>(rv = suffix_check_twosfx(st.c_str(), i, 0, NULL, compoundflag)))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>!hu_mov_rule &amp;&amp; sfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>((compoundforbidflag &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="18"/>TESTAFF(sfx-&gt;getCont(), compoundforbidflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="26"/>sfx-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>(compoundend &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>TESTAFF(sfx-&gt;getCont(), compoundend, sfx-&gt;getContLen())))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><office:annotation office:name="__Annotation__10418_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:04:31.186513280</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">TODO</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10418_3164858689"/> (rv ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>(((wordnum == 0) &amp;&amp; compoundbegin &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>((rv = suffix_check(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>st.c_str(), i, 0, NULL, FLAG_NULL, compoundbegin,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>(compoundmoresuffixes &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>(rv = suffix_check_twosfx(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>st.c_str(), i, 0, NULL,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>compoundbegin))) || <text:s/>// twofold suffixes + compound</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>(rv = prefix_check(st.c_str(), i,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="36"/>hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="36"/>compoundbegin)))) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>((wordnum &gt; 0) &amp;&amp; compoundmiddle &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>((rv = suffix_check(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>st.c_str(), i, 0, NULL, FLAG_NULL, compoundmiddle,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>(compoundmoresuffixes &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>(rv = suffix_check_twosfx(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>st.c_str(), i, 0, NULL,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>compoundmiddle))) || <text:s/>// twofold suffixes + compound</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>(rv = prefix_check(st.c_str(), i,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="36"/>hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="36"/>compoundmiddle))))))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>checked_prefix = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// else check forbiddenwords and needaffix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>} else <office:annotation office:name="__Annotation__10419_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:04:37.594660163</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">TODO</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10419_3164858689"/> (rv-&gt;astr &amp;&amp; (TESTAFF(rv-&gt;astr, forbiddenword, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="32"/>TESTAFF(rv-&gt;astr, needaffix, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="32"/>TESTAFF(rv-&gt;astr, ONLYUPCASEFLAG, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="32"/>(is_sug &amp;&amp; nosuggest &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="33"/>TESTAFF(rv-&gt;astr, nosuggest, rv-&gt;alen)))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>st[i] = ch;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T1">// check non_compound flag in suffix and prefix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><office:annotation office:name="__Annotation__10420_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:04:49.298919826</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">TODO</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10420_3164858689"/> ((rv) &amp;&amp; !hu_mov_rule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((pfx &amp;&amp; pfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(pfx-&gt;getCont(), compoundforbidflag, pfx-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(sfx &amp;&amp; sfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(sfx-&gt;getCont(), compoundforbidflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>sfx-&gt;getContLen())))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T1">// check compoundend flag in suffix and prefix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><office:annotation office:name="__Annotation__10421_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:04:58.739138578</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">TODO</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10421_3164858689"/> ((rv) &amp;&amp; !checked_prefix &amp;&amp; compoundend &amp;&amp; !hu_mov_rule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((pfx &amp;&amp; pfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(pfx-&gt;getCont(), compoundend, pfx-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(sfx &amp;&amp; sfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(sfx-&gt;getCont(), compoundend, sfx-&gt;getContLen())))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T1">// check compoundmiddle flag in suffix and prefix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><office:annotation office:name="__Annotation__10422_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:05:08.019356306</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">TODO</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10422_3164858689"/> ((rv) &amp;&amp; !checked_prefix &amp;&amp; (wordnum == 0) &amp;&amp; compoundmiddle &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>!hu_mov_rule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="12"/>((pfx &amp;&amp; pfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(pfx-&gt;getCont(), compoundmiddle, pfx-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(sfx &amp;&amp; sfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(sfx-&gt;getCont(), compoundmiddle, sfx-&gt;getContLen())))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T1">// check forbiddenwords</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((rv) &amp;&amp; (rv-&gt;astr) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(TESTAFF(rv-&gt;astr, forbiddenword, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>TESTAFF(rv-&gt;astr, ONLYUPCASEFLAG, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(is_sug &amp;&amp; nosuggest &amp;&amp; TESTAFF(rv-&gt;astr, nosuggest, rv-&gt;alen)))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T1">// increment word number, if the second root has a compoundroot flag</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((rv) &amp;&amp; compoundroot &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(TESTAFF(rv-&gt;astr, compoundroot, rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>wordnum++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T1">// first word is acceptable in compound words?</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (((rv) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(checked_prefix || (words &amp;&amp; words[wnum]) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>(compoundflag &amp;&amp; TESTAFF(rv-&gt;astr, compoundflag, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>((oldwordnum == 0) &amp;&amp; compoundbegin &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>TESTAFF(rv-&gt;astr, compoundbegin, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>((oldwordnum &gt; 0) &amp;&amp; compoundmiddle &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>TESTAFF(rv-&gt;astr, compoundmiddle, rv-&gt;alen))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/><text:span text:style-name="T15">// LANG_hu section: spec. Hungarian rule</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>|| ((langnum == LANG_hu) &amp;&amp; hu_mov_rule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>(TESTAFF(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>rv-&gt;astr, &apos;F&apos;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>rv-&gt;alen) || <text:s/>// XXX hardwired Hungarian dictionary codes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="19"/>TESTAFF(rv-&gt;astr, &apos;G&apos;, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="19"/>TESTAFF(rv-&gt;astr, &apos;H&apos;, rv-&gt;alen)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/><text:span text:style-name="T15">// END of LANG_hu section</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/><text:span text:style-name="T1">// test CHECKCOMPOUNDPATTERN conditions</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>scpd == 0 || checkcpdtable[scpd - 1].cond == FLAG_NULL ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>TESTAFF(rv-&gt;astr, checkcpdtable[scpd - 1].cond, rv-&gt;alen)) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>!((checkcompoundtriple &amp;&amp; scpd == 0 &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>!words &amp;&amp; <text:s/>// test triple letters</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(word[i - 1] == word[i]) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(((i &gt; 1) &amp;&amp; (word[i - 1] == word[i - 2])) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>((word[i - 1] == word[i + 1])) <text:s/>// may be word[i+1] == &apos;\0&apos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>(checkcompoundcase &amp;&amp; scpd == 0 &amp;&amp; !words &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>cpdcase_check(word.c_str(), i))))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T15">// LANG_hu section: spec. Hungarian rule</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>|| ((!rv) &amp;&amp; (langnum == LANG_hu) &amp;&amp; hu_mov_rule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(rv = affix_check(st.c_str(), i)) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(sfx &amp;&amp; sfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>( <text:s/><text:span text:style-name="T15">// XXX hardwired Hungarian dic. codes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>TESTAFF(sfx-&gt;getCont(), (unsigned short)&apos;x&apos;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>sfx-&gt;getContLen()) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>TESTAFF(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="25"/>sfx-&gt;getCont(), (unsigned short)&apos;%&apos;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="25"/>sfx-&gt;getContLen()))))) { <text:s/>// first word is ok condition</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><text:span text:style-name="T15">// LANG_hu section: spec. Hungarian rule</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (langnum == LANG_hu) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T15">// calculate syllable number of the word</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="12"/>numsyllable += get_syllable(st.substr(0, i));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T15">// + 1 word, if syllable number of the prefix &gt; 1 (hungarian</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T15">// convention)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (pfx &amp;&amp; (get_syllable(pfx-&gt;getKey()) &gt; 1))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>wordnum++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><text:span text:style-name="T15">// END of LANG_hu section</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><text:span text:style-name="T1">// NEXT WORD(S)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rv_first = rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>st[i] = ch;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>do { <text:s/><text:span text:style-name="T1">// striple loop</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T1">// check simplifiedtriple</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (simplifiedtriple) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (striple) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>checkedstriple = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>i--; <text:s/>// check &quot;fahrt&quot; instead of &quot;ahrt&quot; in &quot;Schiffahrt&quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>} else if (i &gt; 2 &amp;&amp; word[i - 1] == word[i - 2])</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>striple = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>rv = lookup(st.c_str() + i); <text:s/>// perhaps without prefix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T1">// search homonym with compound flag</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><office:annotation office:name="__Annotation__10423_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:06:27.253026227</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">TODO</text:span></text:p>
      </office:annotation>while<office:annotation-end office:name="__Annotation__10423_3164858689"/> ((rv) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="19"/>((needaffix &amp;&amp; TESTAFF(rv-&gt;astr, needaffix, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>!((compoundflag &amp;&amp; !words &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>TESTAFF(rv-&gt;astr, compoundflag, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>(compoundend &amp;&amp; !words &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>TESTAFF(rv-&gt;astr, compoundend, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>(!defcpdtable.empty() &amp;&amp; words &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>defcpd_check(&amp;words, wnum + 1, rv, NULL, 1))) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>(scpd != 0 &amp;&amp; checkcpdtable[scpd - 1].cond2 != FLAG_NULL &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>!TESTAFF(rv-&gt;astr, checkcpdtable[scpd - 1].cond2,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>rv-&gt;alen)))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>rv = rv-&gt;next_homonym;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T1">// check FORCEUCASE</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><office:annotation office:name="__Annotation__10531_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:08:33.431125626</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">TODO</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10531_3164858689"/> (rv &amp;&amp; forceucase &amp;&amp; (rv) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(TESTAFF(rv-&gt;astr, forceucase, rv-&gt;alen)) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>!(info &amp;&amp; *info &amp; SPELL_ORIGCAP))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><office:annotation office:name="__Annotation__10424_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:06:40.973209438</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">TODO</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10424_3164858689"/> (rv &amp;&amp; words &amp;&amp; words[wnum + 1])</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>return rv_first;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>oldnumsyllable2 = numsyllable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>oldwordnum2 = wordnum;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T15">// LANG_hu section: spec. Hungarian rule, XXX hardwired dictionary</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T15">// code</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if ((rv) &amp;&amp; (langnum == LANG_hu) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(TESTAFF(rv-&gt;astr, &apos;I&apos;, rv-&gt;alen)) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>!(TESTAFF(rv-&gt;astr, &apos;J&apos;, rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>numsyllable--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T15">// END of LANG_hu section</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T1">// increment word number, if the second root has a compoundroot flag</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if ((rv) &amp;&amp; (compoundroot) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(TESTAFF(rv-&gt;astr, compoundroot, rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>wordnum++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T1">// check forbiddenwords</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if ((rv) &amp;&amp; (rv-&gt;astr) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(TESTAFF(rv-&gt;astr, forbiddenword, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>TESTAFF(rv-&gt;astr, ONLYUPCASEFLAG, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>(is_sug &amp;&amp; nosuggest &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>TESTAFF(rv-&gt;astr, nosuggest, rv-&gt;alen))))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T1">// second word is acceptable, as a root?</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T1">// hungarian conventions: compounding is acceptable,</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T1">// when compound forms consist of 2 words, or if more,</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T1">// then the syllable number of root words must be 6, or lesser.</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if ((rv) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>((compoundflag &amp;&amp; TESTAFF(rv-&gt;astr, compoundflag, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>(compoundend &amp;&amp; TESTAFF(rv-&gt;astr, compoundend, rv-&gt;alen))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(((cpdwordmax == -1) || (wordnum + 1 &lt; cpdwordmax)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>((cpdmaxsyllable != 0) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>(numsyllable + get_syllable(std::string(HENTRY_WORD(rv), rv-&gt;blen)) &lt;=</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="19"/>cpdmaxsyllable))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>// test CHECKCOMPOUNDPATTERN</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>checkcpdtable.empty() || scpd != 0 ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>!cpdpat_check(word.c_str(), i, rv_first, rv, 0)) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>((!checkcompounddup || (rv != rv_first)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>// test CHECKCOMPOUNDPATTERN conditions</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>&amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(scpd == 0 || checkcpdtable[scpd - 1].cond2 == FLAG_NULL ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>TESTAFF(rv-&gt;astr, checkcpdtable[scpd - 1].cond2, rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>// forbid compound word, if it is a non-compound word with typical</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>// fault</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (checkcompoundrep &amp;&amp; cpdrep_check(word.c_str(), len))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>return rv_first;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>numsyllable = oldnumsyllable2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>wordnum = oldwordnum2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// perhaps second word has prefix or/and suffix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sfxflag = FLAG_NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>rv = (compoundflag &amp;&amp; !onlycpdrule)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>? affix_check((word.c_str() + i), strlen(word.c_str() + i), compoundflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="35"/>IN_CPD_END)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>: NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!rv &amp;&amp; compoundend &amp;&amp; !onlycpdrule) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>sfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>pfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>rv = affix_check((word.c_str() + i), strlen(word.c_str() + i), compoundend,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>IN_CPD_END);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!rv &amp;&amp; !defcpdtable.empty() &amp;&amp; words) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>rv = affix_check((word.c_str() + i), strlen(word.c_str() + i), 0, IN_CPD_END);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (rv &amp;&amp; defcpd_check(&amp;words, wnum + 1, rv, NULL, 1))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>return rv_first;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// test CHECKCOMPOUNDPATTERN conditions (allowed forms)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (rv &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>!(scpd == 0 || checkcpdtable[scpd - 1].cond2 == FLAG_NULL ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>TESTAFF(rv-&gt;astr, checkcpdtable[scpd - 1].cond2, rv-&gt;alen)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// test CHECKCOMPOUNDPATTERN conditions (forbidden compounds)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (rv &amp;&amp; !checkcpdtable.empty() &amp;&amp; scpd == 0 &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>cpdpat_check(word.c_str(), i, rv_first, rv, affixed))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// check non_compound flag in suffix and prefix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if ((rv) &amp;&amp; ((pfx &amp;&amp; pfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="26"/>TESTAFF(pfx-&gt;getCont(), compoundforbidflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>pfx-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="25"/>(sfx &amp;&amp; sfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="26"/>TESTAFF(sfx-&gt;getCont(), compoundforbidflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>sfx-&gt;getContLen())))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// check FORCEUCASE</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (rv &amp;&amp; forceucase &amp;&amp; (rv) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(TESTAFF(rv-&gt;astr, forceucase, rv-&gt;alen)) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>!(info &amp;&amp; *info &amp; SPELL_ORIGCAP))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// check forbiddenwords</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if ((rv) &amp;&amp; (rv-&gt;astr) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(TESTAFF(rv-&gt;astr, forbiddenword, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>TESTAFF(rv-&gt;astr, ONLYUPCASEFLAG, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>(is_sug &amp;&amp; nosuggest &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>TESTAFF(rv-&gt;astr, nosuggest, rv-&gt;alen))))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// pfxappnd = prefix of word+i, or NULL</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// calculate syllable number of prefix.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// hungarian convention: when syllable number of prefix is more,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// than 1, the prefix+word counts as two words.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (langnum == LANG_hu) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>// calculate syllable number of the word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>numsyllable += get_syllable(word.c_str() + i);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>// - affix syllable num.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>// XXX only second suffix (inflections, not derivations)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (sfxappnd) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>std::string tmp(sfxappnd);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>reverseword(tmp);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>numsyllable -= get_syllable(tmp) + sfxextra;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>numsyllable -= sfxextra;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>// + 1 word, if syllable number of the prefix &gt; 1 (hungarian</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>// convention)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (pfx &amp;&amp; (get_syllable(pfx-&gt;getKey()) &gt; 1))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>wordnum++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>// increment syllable num, if last word has a SYLLABLENUM flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>// and the suffix is beginning `s&apos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (!cpdsyllablenum.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>switch (sfxflag) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="18"/>case &apos;c&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>numsyllable += 2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>case &apos;J&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>numsyllable += 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>case &apos;I&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>if (rv &amp;&amp; TESTAFF(rv-&gt;astr, &apos;J&apos;, rv-&gt;alen))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>numsyllable += 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// increment word number, if the second word has a compoundroot flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if ((rv) &amp;&amp; (compoundroot) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(TESTAFF(rv-&gt;astr, compoundroot, rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>wordnum++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// second word is acceptable, as a word with prefix or/and suffix?</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// hungarian conventions: compounding is acceptable,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// when compound forms consist 2 word, otherwise</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// the syllable number of root words is 6, or lesser.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if ((rv) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(((cpdwordmax == -1) || (wordnum + 1 &lt; cpdwordmax)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>((cpdmaxsyllable != 0) &amp;&amp; (numsyllable &lt;= cpdmaxsyllable))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>((!checkcompounddup || (rv != rv_first)))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>// forbid compound word, if it is a non-compound word with typical</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>// fault</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (checkcompoundrep &amp;&amp; cpdrep_check(word.c_str(), len))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>return rv_first;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>numsyllable = oldnumsyllable2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>wordnum = oldwordnum2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// perhaps second word is a compound word (recursive call)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (wordnum + 2 &lt; maxwordnum) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>rv = compound_check(st.substr(i), wordnum + 1,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>numsyllable, maxwordnum, wnum + 1, words, rwords, 0,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>is_sug, info);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (rv &amp;&amp; !checkcpdtable.empty() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>((scpd == 0 &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>cpdpat_check(word.c_str(), i, rv_first, rv, affixed)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="19"/>(scpd != 0 &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>!cpdpat_check(word.c_str(), i, rv_first, rv, affixed))))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>// forbid compound word, if it is a non-compound word with typical</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>// fault</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (checkcompoundrep || forbiddenword) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>if (checkcompoundrep &amp;&amp; cpdrep_check(word.c_str(), len))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>// check first part</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="16"/>if (strncmp(rv-&gt;word, word.c_str() + i, rv-&gt;blen) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>char r = st[i + rv-&gt;blen];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>st[i + rv-&gt;blen] = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>if (checkcompoundrep &amp;&amp; cpdrep_check(st.c_str(), i + rv-&gt;blen)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>st[ + i + rv-&gt;blen] = r;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>if (forbiddenword) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>struct hentry* rv2 = lookup(word.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>if (!rv2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>rv2 = affix_check(word.c_str(), len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>if (rv2 &amp;&amp; rv2-&gt;astr &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="24"/>TESTAFF(rv2-&gt;astr, forbiddenword, rv2-&gt;alen) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="24"/>(strncmp(rv2-&gt;word, st.c_str(), i + rv-&gt;blen) == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>st[i + rv-&gt;blen] = r;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>return rv_first;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} while (striple &amp;&amp; !checkedstriple); <text:s/>// end of striple loop</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (checkedstriple) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>i++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>checkedstriple = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>striple = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>} <text:s/>// first word is ok condition</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (soldi != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>i = soldi;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>soldi = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>len = oldlen;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>cmin = oldcmin;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>cmax = oldcmax;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>scpd++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} while (!onlycpdrule &amp;&amp; simplifiedcpd &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>scpd &lt;= checkcpdtable.size()); <text:s/>// end of simplifiedcpd loop</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>scpd = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>wordnum = oldwordnum;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>numsyllable = oldnumsyllable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (soldi != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>i = soldi;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>st.assign(word); <text:s/>// XXX add more optim.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>soldi = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>st[i] = ch;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} while (!defcpdtable.empty() &amp;&amp; oldwordnum == 0 &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>onlycpdrule++ &lt; 1); <text:s/>// end of onlycpd loop</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/>// check if compound word is correctly spelled</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// hu_mov_rule = spec. Hungarian rule (XXX)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int <text:span text:style-name="T8">AffixMgr::compound_check_morph</text:span>(const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="35"/>int len,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="35"/>short wordnum,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="35"/>short numsyllable,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="35"/>short maxwordnum,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="35"/>short wnum,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="35"/>hentry** words,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="35"/>hentry** rwords,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="35"/>char hu_mov_rule,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="35"/>std::string&amp; result,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="35"/>const std::string* partresult) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>short oldnumsyllable, oldnumsyllable2, oldwordnum, oldwordnum2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int ok = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>struct hentry* rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>struct hentry* rv_first;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string st;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char ch;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int checked_prefix;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string presult;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int cmin;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int cmax;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char affixed = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>hentry** oldwords = words;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>setcminmax(&amp;cmin, &amp;cmax, word, len);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>st.assign(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (i = cmin; i &lt; cmax; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// go to end of the UTF-8 character</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for (; (st[i] &amp; 0xc0) == 0x80; i++)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (i &gt;= cmax)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>words = oldwords;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>int onlycpdrule = (words) ? 1 : 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>do { <text:s/>// onlycpdrule loop</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>oldnumsyllable = numsyllable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>oldwordnum = wordnum;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>checked_prefix = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ch = st[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>st[i] = &apos;\0&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>sfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// FIRST WORD</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>affixed = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>presult.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (partresult)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>presult.append(*partresult);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="6"/>rv = lookup(st.c_str()); <text:s/>// perhaps without prefix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// search homonym with compound flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>while ((rv) &amp;&amp; !hu_mov_rule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>((needaffix &amp;&amp; TESTAFF(rv-&gt;astr, needaffix, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>!((compoundflag &amp;&amp; !words &amp;&amp; !onlycpdrule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>TESTAFF(rv-&gt;astr, compoundflag, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(compoundbegin &amp;&amp; !wordnum &amp;&amp; !onlycpdrule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>TESTAFF(rv-&gt;astr, compoundbegin, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(compoundmiddle &amp;&amp; wordnum &amp;&amp; !words &amp;&amp; !onlycpdrule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>TESTAFF(rv-&gt;astr, compoundmiddle, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(!defcpdtable.empty() &amp;&amp; onlycpdrule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>((!words &amp;&amp; !wordnum &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="19"/>defcpd_check(&amp;words, wnum, rv, rwords, 0)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>(words &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="19"/>defcpd_check(&amp;words, wnum, rv, rwords, 0))))))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>rv = rv-&gt;next_homonym;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (rv)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>affixed = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>presult.push_back(MSEP_FLD);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>presult.append(MORPH_PART);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>presult.append(st.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!HENTRY_FIND(rv, MORPH_STEM)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>presult.push_back(MSEP_FLD);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>presult.append(MORPH_STEM);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>presult.append(st.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (HENTRY_DATA(rv)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>presult.push_back(MSEP_FLD);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>presult.append(HENTRY_DATA2(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (compoundflag &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>!(rv =</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>prefix_check(st.c_str(), i, hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>compoundflag))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (((rv = suffix_check(st.c_str(), i, 0, NULL, FLAG_NULL,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>compoundflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>(compoundmoresuffixes &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(rv = suffix_check_twosfx(st.c_str(), i, 0, NULL, compoundflag)))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>!hu_mov_rule &amp;&amp; sfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>((compoundforbidflag &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>TESTAFF(sfx-&gt;getCont(), compoundforbidflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="24"/>sfx-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>(compoundend &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>TESTAFF(sfx-&gt;getCont(), compoundend, sfx-&gt;getContLen())))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (rv ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(((wordnum == 0) &amp;&amp; compoundbegin &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>((rv = suffix_check(st.c_str(), i, 0, NULL, FLAG_NULL,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>compoundbegin,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>(compoundmoresuffixes &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="16"/>(rv = suffix_check_twosfx(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>st.c_str(), i, 0, NULL,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>compoundbegin))) || <text:s/>// twofold suffix+compound</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>(rv = prefix_check(st.c_str(), i,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>compoundbegin)))) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>((wordnum &gt; 0) &amp;&amp; compoundmiddle &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>((rv = suffix_check(st.c_str(), i, 0, NULL, FLAG_NULL,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>compoundmiddle,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>(compoundmoresuffixes &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(rv = suffix_check_twosfx(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>st.c_str(), i, 0, NULL,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>compoundmiddle))) || <text:s/>// twofold suffix+compound</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>(rv = prefix_check(st.c_str(), i,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>compoundmiddle)))))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string p;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (compoundflag)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>p = affix_check_morph(st.c_str(), i, compoundflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (p.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if ((wordnum == 0) &amp;&amp; compoundbegin) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>p = affix_check_morph(st.c_str(), i, compoundbegin);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>} else if ((wordnum &gt; 0) &amp;&amp; compoundmiddle) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>p = affix_check_morph(st.c_str(), i, compoundmiddle);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (!p.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>presult.push_back(MSEP_FLD);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>presult.append(MORPH_PART);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>presult.append(st.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>line_uniq_app(p, MSEP_REC);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>presult.append(p);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>checked_prefix = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// else check forbiddenwords</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>} else if (rv-&gt;astr &amp;&amp; (TESTAFF(rv-&gt;astr, forbiddenword, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>TESTAFF(rv-&gt;astr, ONLYUPCASEFLAG, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>TESTAFF(rv-&gt;astr, needaffix, rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>st[i] = ch;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// check non_compound flag in suffix and prefix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if ((rv) &amp;&amp; !hu_mov_rule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>((pfx &amp;&amp; pfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>TESTAFF(pfx-&gt;getCont(), compoundforbidflag, pfx-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(sfx &amp;&amp; sfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>TESTAFF(sfx-&gt;getCont(), compoundforbidflag, sfx-&gt;getContLen())))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// check compoundend flag in suffix and prefix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if ((rv) &amp;&amp; !checked_prefix &amp;&amp; compoundend &amp;&amp; !hu_mov_rule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>((pfx &amp;&amp; pfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>TESTAFF(pfx-&gt;getCont(), compoundend, pfx-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(sfx &amp;&amp; sfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>TESTAFF(sfx-&gt;getCont(), compoundend, sfx-&gt;getContLen())))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// check compoundmiddle flag in suffix and prefix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if ((rv) &amp;&amp; !checked_prefix &amp;&amp; (wordnum == 0) &amp;&amp; compoundmiddle &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>!hu_mov_rule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="10"/>((pfx &amp;&amp; pfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>TESTAFF(pfx-&gt;getCont(), compoundmiddle, pfx-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(sfx &amp;&amp; sfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>TESTAFF(sfx-&gt;getCont(), compoundmiddle, sfx-&gt;getContLen())))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// check forbiddenwords</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if ((rv) &amp;&amp; (rv-&gt;astr) &amp;&amp; (TESTAFF(rv-&gt;astr, forbiddenword, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="33"/>TESTAFF(rv-&gt;astr, ONLYUPCASEFLAG, rv-&gt;alen)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// increment word number, if the second root has a compoundroot flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if ((rv) &amp;&amp; (compoundroot) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>(TESTAFF(rv-&gt;astr, compoundroot, rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>wordnum++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// first word is acceptable in compound words?</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (((rv) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(checked_prefix || (words &amp;&amp; words[wnum]) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(compoundflag &amp;&amp; TESTAFF(rv-&gt;astr, compoundflag, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((oldwordnum == 0) &amp;&amp; compoundbegin &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>TESTAFF(rv-&gt;astr, compoundbegin, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((oldwordnum &gt; 0) &amp;&amp; compoundmiddle &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>TESTAFF(rv-&gt;astr, compoundmiddle, rv-&gt;alen))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// LANG_hu section: spec. Hungarian rule</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>|| ((langnum == LANG_hu) &amp;&amp; <text:s/>// hu_mov_rule</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>hu_mov_rule &amp;&amp; (TESTAFF(rv-&gt;astr, &apos;F&apos;, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="32"/>TESTAFF(rv-&gt;astr, &apos;G&apos;, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="32"/>TESTAFF(rv-&gt;astr, &apos;H&apos;, rv-&gt;alen)))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// END of LANG_hu section</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>!((checkcompoundtriple &amp;&amp; !words &amp;&amp; <text:s/>// test triple letters</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>(word[i - 1] == word[i]) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>(((i &gt; 1) &amp;&amp; (word[i - 1] == word[i - 2])) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>((word[i - 1] == word[i + 1])) <text:s/>// may be word[i+1] == &apos;\0&apos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>// test CHECKCOMPOUNDPATTERN</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>!checkcpdtable.empty() &amp;&amp; !words &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="17"/>cpdpat_check(word, i, rv, NULL, affixed)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(checkcompoundcase &amp;&amp; !words &amp;&amp; cpdcase_check(word, i))))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// LANG_hu section: spec. Hungarian rule</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>((!rv) &amp;&amp; (langnum == LANG_hu) &amp;&amp; hu_mov_rule &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(rv = affix_check(st.c_str(), i)) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(sfx &amp;&amp; sfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(TESTAFF(sfx-&gt;getCont(), (unsigned short)&apos;x&apos;, sfx-&gt;getContLen()) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>TESTAFF(sfx-&gt;getCont(), (unsigned short)&apos;%&apos;, sfx-&gt;getContLen()))))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// END of LANG_hu section</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// LANG_hu section: spec. Hungarian rule</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (langnum == LANG_hu) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// calculate syllable number of the word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>numsyllable += get_syllable(st.substr(0, i));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// + 1 word, if syllable number of the prefix &gt; 1 (hungarian</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// convention)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (pfx &amp;&amp; (get_syllable(pfx-&gt;getKey()) &gt; 1))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>wordnum++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// END of LANG_hu section</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// NEXT WORD(S)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="8"/>rv_first = rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>rv = lookup((word + i)); <text:s/>// perhaps without prefix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// search homonym with compound flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>while ((rv) &amp;&amp; ((needaffix &amp;&amp; TESTAFF(rv-&gt;astr, needaffix, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="24"/>!((compoundflag &amp;&amp; !words &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>TESTAFF(rv-&gt;astr, compoundflag, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="26"/>(compoundend &amp;&amp; !words &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>TESTAFF(rv-&gt;astr, compoundend, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="26"/>(!defcpdtable.empty() &amp;&amp; words &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>defcpd_check(&amp;words, wnum + 1, rv, NULL, 1))))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rv = rv-&gt;next_homonym;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (rv &amp;&amp; words &amp;&amp; words[wnum + 1]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(presult);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(MORPH_PART);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(word + i);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (complexprefixes &amp;&amp; HENTRY_DATA(rv))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(HENTRY_DATA2(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (!HENTRY_FIND(rv, MORPH_STEM)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(MORPH_STEM);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(HENTRY_WORD(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// store the pointer of the hash entry</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (!complexprefixes &amp;&amp; HENTRY_DATA(rv)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(HENTRY_DATA2(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(&quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>oldnumsyllable2 = numsyllable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>oldwordnum2 = wordnum;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// LANG_hu section: spec. Hungarian rule</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((rv) &amp;&amp; (langnum == LANG_hu) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(TESTAFF(rv-&gt;astr, &apos;I&apos;, rv-&gt;alen)) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>!(TESTAFF(rv-&gt;astr, &apos;J&apos;, rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>numsyllable--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// END of LANG_hu section</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// increment word number, if the second root has a compoundroot flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((rv) &amp;&amp; (compoundroot) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(TESTAFF(rv-&gt;astr, compoundroot, rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>wordnum++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// check forbiddenwords</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((rv) &amp;&amp; (rv-&gt;astr) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(TESTAFF(rv-&gt;astr, forbiddenword, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>TESTAFF(rv-&gt;astr, ONLYUPCASEFLAG, rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>st[i] = ch;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// second word is acceptable, as a root?</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// hungarian conventions: compounding is acceptable,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// when compound forms consist of 2 words, or if more,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// then the syllable number of root words must be 6, or lesser.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((rv) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((compoundflag &amp;&amp; TESTAFF(rv-&gt;astr, compoundflag, rv-&gt;alen)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="13"/>(compoundend &amp;&amp; TESTAFF(rv-&gt;astr, compoundend, rv-&gt;alen))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(((cpdwordmax == -1) || (wordnum + 1 &lt; cpdwordmax)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>((cpdmaxsyllable != 0) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>(numsyllable + get_syllable(std::string(HENTRY_WORD(rv), rv-&gt;blen)) &lt;=</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>cpdmaxsyllable))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((!checkcompounddup || (rv != rv_first)))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// bad compound word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(presult);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(MORPH_PART);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(word + i);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (HENTRY_DATA(rv)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (complexprefixes)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>result.append(HENTRY_DATA2(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!HENTRY_FIND(rv, MORPH_STEM)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>result.append(MORPH_STEM);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>result.append(HENTRY_WORD(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// store the pointer of the hash entry</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>result.append(HENTRY_DATA2(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(&quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>ok = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>numsyllable = oldnumsyllable2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>wordnum = oldwordnum2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// perhaps second word has prefix or/and suffix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>sfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>sfxflag = FLAG_NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (compoundflag &amp;&amp; !onlycpdrule)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rv = affix_check((word + i), strlen(word + i), compoundflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!rv &amp;&amp; compoundend &amp;&amp; !onlycpdrule) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>sfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>pfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rv = affix_check((word + i), strlen(word + i), compoundend);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!rv &amp;&amp; !defcpdtable.empty() &amp;&amp; words) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rv = affix_check((word + i), strlen(word + i), 0, IN_CPD_END);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (rv &amp;&amp; words &amp;&amp; defcpd_check(&amp;words, wnum + 1, rv, NULL, 1)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::string m;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (compoundflag)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>m = affix_check_morph((word + i), strlen(word + i), compoundflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (m.empty() &amp;&amp; compoundend) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>m = affix_check_morph((word + i), strlen(word + i), compoundend);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(presult);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!m.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>result.push_back(MSEP_FLD);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>result.append(MORPH_PART);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>result.append(word + i);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>line_uniq_app(m, MSEP_REC);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>result.append(m);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(&quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>ok = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// check non_compound flag in suffix and prefix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((rv) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((pfx &amp;&amp; pfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(pfx-&gt;getCont(), compoundforbidflag, pfx-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(sfx &amp;&amp; sfx-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(sfx-&gt;getCont(), compoundforbidflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="22"/>sfx-&gt;getContLen())))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// check forbiddenwords</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((rv) &amp;&amp; (rv-&gt;astr) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(TESTAFF(rv-&gt;astr, forbiddenword, rv-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>TESTAFF(rv-&gt;astr, ONLYUPCASEFLAG, rv-&gt;alen)) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(!TESTAFF(rv-&gt;astr, needaffix, rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>st[i] = ch;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>continue;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (langnum == LANG_hu) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// calculate syllable number of the word</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>numsyllable += get_syllable(word + i);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// - affix syllable num.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// XXX only second suffix (inflections, not derivations)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (sfxappnd) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::string tmp(sfxappnd);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>reverseword(tmp);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>numsyllable -= get_syllable(tmp) + sfxextra;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>numsyllable -= sfxextra;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// + 1 word, if syllable number of the prefix &gt; 1 (hungarian</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// convention)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (pfx &amp;&amp; (get_syllable(pfx-&gt;getKey()) &gt; 1))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>wordnum++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// increment syllable num, if last word has a SYLLABLENUM flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// and the suffix is beginning `s&apos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (!cpdsyllablenum.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>switch (sfxflag) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>case &apos;c&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>numsyllable += 2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>case &apos;J&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>numsyllable += 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>case &apos;I&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>if (rv &amp;&amp; TESTAFF(rv-&gt;astr, &apos;J&apos;, rv-&gt;alen))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>numsyllable += 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// increment word number, if the second word has a compoundroot flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((rv) &amp;&amp; (compoundroot) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(TESTAFF(rv-&gt;astr, compoundroot, rv-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>wordnum++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// second word is acceptable, as a word with prefix or/and suffix?</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// hungarian conventions: compounding is acceptable,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// when compound forms consist 2 word, otherwise</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// the syllable number of root words is 6, or lesser.</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((rv) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(((cpdwordmax == -1) || (wordnum + 1 &lt; cpdwordmax)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>((cpdmaxsyllable != 0) &amp;&amp; (numsyllable &lt;= cpdmaxsyllable))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((!checkcompounddup || (rv != rv_first)))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string m;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (compoundflag)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>m = affix_check_morph((word + i), strlen(word + i), compoundflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (m.empty() &amp;&amp; compoundend) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>m = affix_check_morph((word + i), strlen(word + i), compoundend);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(presult);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (!m.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.push_back(MSEP_FLD);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(MORPH_PART);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(word + i);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>line_uniq_app(m, MSEP_REC);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(m);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.push_back(MSEP_REC);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>ok = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>numsyllable = oldnumsyllable2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>wordnum = oldwordnum2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// perhaps second word is a compound word (recursive call)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((wordnum + 2 &lt; maxwordnum) &amp;&amp; (ok == 0)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>compound_check_morph((word + i), strlen(word + i), wordnum + 1,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>numsyllable, maxwordnum, wnum + 1, words, rwords, 0,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>result, &amp;presult);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>st[i] = ch;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>wordnum = oldwordnum;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>numsyllable = oldnumsyllable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} while (!defcpdtable.empty() &amp;&amp; oldwordnum == 0 &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>onlycpdrule++ &lt; 1); <text:s/>// end of onlycpd loop</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">inline int <text:span text:style-name="T8">AffixMgr::isRevSubset</text:span>(const char* s1,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="33"/>const char* end_of_s2,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="33"/>int len) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while ((len &gt; 0) &amp;&amp; (*s1 != &apos;\0&apos;) &amp;&amp; ((*s1 == *end_of_s2) || (*s1 == &apos;.&apos;))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>s1++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>end_of_s2--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>len--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return (*s1 == &apos;\0&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// check word for suffixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">struct hentry* <text:span text:style-name="T8">AffixMgr::suffix_check</text:span>(const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="38"/>int len,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="38"/>int sfxopts,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="38"/>PfxEntry* ppfx,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="38"/>const FLAG cclass,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="38"/>const FLAG needflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="38"/>char in_compound) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>struct hentry* rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>PfxEntry* ep = ppfx;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// first handle the special case of 0 length suffixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>SfxEntry* se = sStart[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (se) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><office:annotation office:name="__Annotation__10726_614441264">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-08T19:15:50.952743454</dc:date>
       <text:p text:style-name="P8"><text:span text:style-name="T17">no continuation classes are provided to this method</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17">OR</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17">the suffix entry under consideration has continuation classes</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10726_614441264"/> (!cclass || se-&gt;getCont()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><text:span text:style-name="T1">// suffixes are not allowed in beginning of compounds</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><office:annotation office:name="__Annotation__10725_614441264">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-08T19:15:28.008359785</dc:date>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">1.a this method was not called from compounding related to the beginning part</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">OR</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">1.b continuation classes of the suffix entry under consideration does contain generic compoundpermitflag flag</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17">AND</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">2.a there is no generic circumfix flag</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">OR</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">2.b continuation classes of the provided prefix entry and suffix entry under consideration do not contain generic circumfix flag</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">OR</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">2.c continuation classes of the provided prefix entry and suffix entry under consideration do both contain generic circumfix flag</text:span><text:span text:style-name="T17"><text:tab/></text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17">AND</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">3 the continuation classes of the suffix entry under consideration does not contain generic onlyincompound flag</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17">AND</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">4.a continuation class is provided to this method</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">OR</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">4.b continuation classes of the provided prefix entry does not contain generic needaffix flag</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">OR</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17"><text:s text:c="4"/></text:span><text:span text:style-name="T17">4.c continuation classes of the suffix entry under consideration does not contain generic needaffix flag</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10725_614441264"/> ((((in_compound != IN_CPD_BEGIN)) || <text:s/>// &amp;&amp; !cclass</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/><text:span text:style-name="T1">// except when signed with compoundpermitflag flag</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(se-&gt;getCont() &amp;&amp; compoundpermitflag &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>TESTAFF(se-&gt;getCont(), compoundpermitflag, se-&gt;getContLen()))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>(!circumfix ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/><text:span text:style-name="T1">// no circumfix flag in prefix and suffix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>((!ppfx || !(ep-&gt;getCont()) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>!TESTAFF(ep-&gt;getCont(), circumfix, ep-&gt;getContLen())) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(!se-&gt;getCont() ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>!(TESTAFF(se-&gt;getCont(), circumfix, se-&gt;getContLen())))) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/><text:span text:style-name="T1">// circumfix flag in prefix AND suffix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>((ppfx &amp;&amp; (ep-&gt;getCont()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>TESTAFF(ep-&gt;getCont(), circumfix, ep-&gt;getContLen())) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(se-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(TESTAFF(se-&gt;getCont(), circumfix, se-&gt;getContLen()))))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><text:span text:style-name="T1">// fogemorpheme</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>(in_compound ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>!(se-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(TESTAFF(se-&gt;getCont(), onlyincompound, se-&gt;getContLen())))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><text:span text:style-name="T1">// needaffix on prefix or first suffix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>(cclass ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>!(se-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>TESTAFF(se-&gt;getCont(), needaffix, se-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(ppfx &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>!((ep-&gt;getCont()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(ep-&gt;getCont(), needaffix, ep-&gt;getContLen()))))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>rv = se-&gt;<text:span text:style-name="T10">checkword</text:span>(word, len, sfxopts, ppfx,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>(FLAG)cclass, needflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>(in_compound ? 0 : onlyincompound));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>sfx = se; <text:s/><text:span text:style-name="T9">// BUG: sfx not stateless</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>se = se-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// now handle the general case</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (len == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return NULL; <text:s/><text:span text:style-name="T1">// FULLSTRIP</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>unsigned char sp = *((const unsigned char*)(word + len - 1));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>SfxEntry* sptr = sStart[sp];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (sptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (<text:span text:style-name="T10">isRevSubset</text:span>(sptr-&gt;getKey(), word + len - 1, len)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="6"/><text:span text:style-name="T1">// suffixes are not allowed in beginning of compounds</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><office:annotation office:name="__Annotation__10727_614441264">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-08T19:16:24.776993286</dc:date>
       <text:p text:style-name="P9"><text:span text:style-name="T18">SAME CONDITIONS AS ABOVE</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10727_614441264"/> ((((in_compound != IN_CPD_BEGIN)) || <text:s/>// &amp;&amp; !cclass</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/><text:span text:style-name="T1">// except when signed with compoundpermitflag flag</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(sptr-&gt;getCont() &amp;&amp; compoundpermitflag &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>TESTAFF(sptr-&gt;getCont(), compoundpermitflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>sptr-&gt;getContLen()))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>(!circumfix ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/><text:span text:style-name="T1">// no circumfix flag in prefix and suffix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>((!ppfx || !(ep-&gt;getCont()) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>!TESTAFF(ep-&gt;getCont(), circumfix, ep-&gt;getContLen())) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(!sptr-&gt;getCont() ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>!(TESTAFF(sptr-&gt;getCont(), circumfix, sptr-&gt;getContLen())))) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/><text:span text:style-name="T1">// circumfix flag in prefix AND suffix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>((ppfx &amp;&amp; (ep-&gt;getCont()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>TESTAFF(ep-&gt;getCont(), circumfix, ep-&gt;getContLen())) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(sptr-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(TESTAFF(sptr-&gt;getCont(), circumfix, sptr-&gt;getContLen()))))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><text:span text:style-name="T1">// fogemorpheme</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>(in_compound ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>!((sptr-&gt;getCont() &amp;&amp; (TESTAFF(sptr-&gt;getCont(), onlyincompound,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="42"/>sptr-&gt;getContLen()))))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><text:span text:style-name="T1">// needaffix on prefix or first suffix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>(cclass ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>!(sptr-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>TESTAFF(sptr-&gt;getCont(), needaffix, sptr-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(ppfx &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>!((ep-&gt;getCont()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(ep-&gt;getCont(), needaffix, ep-&gt;getContLen())))))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><office:annotation office:name="__Annotation__11116_614441264">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-08T19:20:57.886310595</dc:date>
       <text:p text:style-name="P8"><text:span text:style-name="T17">this method was not called from compounding related to the end part</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17">OR</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17">prefix entry was provided</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17">OR</text:span></text:p>
       <text:p text:style-name="P8"><text:span text:style-name="T17">continuation classes of the suffix entry under consideration does not contain generic onlyincompound flag</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__11116_614441264"/> (in_compound != IN_CPD_END || ppfx ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>!(sptr-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(sptr-&gt;getCont(), onlyincompound, sptr-&gt;getContLen()))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>rv = sptr-&gt;<text:span text:style-name="T10">checkword</text:span>(word, len, sfxopts, ppfx,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>cclass, needflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>(in_compound ? 0 : onlyincompound));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sfx = sptr; <text:s text:c="16"/><text:span text:style-name="T9">// BUG: sfx not stateless</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sfxflag = sptr-&gt;getFlag(); <text:s/><text:span text:style-name="T9">// BUG: sfxflag not stateless</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><office:annotation office:name="__Annotation__11115_614441264">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-08T19:20:40.366016396</dc:date>
       <text:p text:style-name="P8"><text:span text:style-name="T17">the suffix entry under consideration has no continuation classes</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__11115_614441264"/> (!sptr-&gt;getCont())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>sfxappnd = sptr-&gt;getKey(); <text:s/><text:span text:style-name="T9">// BUG: sfxappnd not stateless</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T15">// LANG_hu section: spec. Hungarian rule</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>else if (langnum == LANG_hu &amp;&amp; sptr-&gt;getKeyLen() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>sptr-&gt;getKey()[0] == &apos;i&apos; &amp;&amp; sptr-&gt;getKey()[1] != &apos;y&apos; &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>sptr-&gt;getKey()[1] != &apos;t&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>sfxextra = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T15">// END of LANG_hu section</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>sptr = sptr-&gt;getNextEQ();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>sptr = sptr-&gt;getNextNE();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// check word for two-level suffixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">struct hentry* <text:span text:style-name="T8">AffixMgr::suffix_check_twosfx</text:span>(const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="45"/>int len,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="45"/>int sfxopts,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="45"/>PfxEntry* ppfx,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="45"/>const FLAG needflag) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>struct hentry* rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// first handle the special case of 0 length suffixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>SfxEntry* se = sStart[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (se) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><office:annotation office:name="__Annotation__11117_614441264">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-08T19:26:39.620525232</dc:date>
       <text:p text:style-name="P8"><text:span text:style-name="T17">the flag of the suffix entry under consideration is in the generic continutation classes</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__11117_614441264"/> (contclasses[se-&gt;getFlag()]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>rv = se-&gt;<text:span text:style-name="T10">check_twosfx</text:span>(word, len, sfxopts, ppfx, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (rv)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>se = se-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// now handle the general case</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (len == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return NULL; <text:s/><text:span text:style-name="T1">// FULLSTRIP</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>unsigned char sp = *((const unsigned char*)(word + len - 1));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>SfxEntry* sptr = sStart[sp];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (sptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (isRevSubset(sptr-&gt;getKey(), word + len - 1, len)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><office:annotation office:name="__Annotation__11253_614441264">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-08T19:34:46.653490985</dc:date>
       <text:p text:style-name="P8"><text:span text:style-name="T17">the flag of the suffix entry under consideration is in the generic continutation classes</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__11253_614441264"/> (contclasses[sptr-&gt;getFlag()]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>rv = sptr-&gt;<text:span text:style-name="T10">check_twosfx</text:span>(word, len, sfxopts, ppfx, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>sfxflag = sptr-&gt;getFlag(); <text:s/><text:span text:style-name="T9">// BUG: sfxflag not stateless</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><office:annotation office:name="__Annotation__11252_614441264">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-03-08T19:34:33.677317367</dc:date>
       <text:p text:style-name="P8"><text:span text:style-name="T17">the suffix entry under consideration has no continuation classes</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__11252_614441264"/> (!sptr-&gt;getCont())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sfxappnd = sptr-&gt;getKey(); <text:s/><text:span text:style-name="T9">// BUG: sfxappnd not stateless</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>sptr = sptr-&gt;getNextEQ();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>sptr = sptr-&gt;getNextNE();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// check word for two-level suffixes and morph</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">std::string <text:span text:style-name="T8">AffixMgr::suffix_check_twosfx_morph</text:span>(const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="48"/>int len,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="48"/>int sfxopts,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="48"/>PfxEntry* ppfx,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="48"/>const FLAG needflag) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string result2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string result3;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// first handle the special case of 0 length suffixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>SfxEntry* se = sStart[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (se) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (contclasses[se-&gt;getFlag()]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>std::string st = se-&gt;check_twosfx_morph(word, len, sfxopts, ppfx, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!st.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (ppfx) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (ppfx-&gt;getMorph()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(ppfx-&gt;getMorph());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>debugflag(result, ppfx-&gt;getFlag());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>result.append(st);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (se-&gt;getMorph()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(se-&gt;getMorph());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="8"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>debugflag(result, se-&gt;getFlag());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>result.append(&quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>se = se-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// now handle the general case</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (len == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return std::string(); <text:s/><text:span text:style-name="T1">// FULLSTRIP</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>unsigned char sp = *((const unsigned char*)(word + len - 1));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>SfxEntry* sptr = sStart[sp];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (sptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (isRevSubset(sptr-&gt;getKey(), word + len - 1, len)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (contclasses[sptr-&gt;getFlag()]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>std::string st = sptr-&gt;check_twosfx_morph(word, len, sfxopts, ppfx, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!st.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>sfxflag = sptr-&gt;getFlag(); <text:s/><text:span text:style-name="T9">// BUG: sfxflag not stateless</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (!sptr-&gt;getCont())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>sfxappnd = sptr-&gt;getKey(); <text:s/><text:span text:style-name="T9">// BUG: sfxappnd not stateless</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result2.assign(st);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result3.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (sptr-&gt;getMorph()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result3.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result3.append(sptr-&gt;getMorph());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>debugflag(result3, sptr-&gt;getFlag());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>strlinecat(result2, result3);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result2.append(&quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(result2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>sptr = sptr-&gt;getNextEQ();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>sptr = sptr-&gt;getNextNE();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">std::string <text:span text:style-name="T8">AffixMgr::suffix_check_morph</text:span>(const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="41"/>int len,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="41"/>int sfxopts,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="41"/>PfxEntry* ppfx,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="41"/>const FLAG cclass,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="41"/>const FLAG needflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="41"/>char in_compound) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>struct hentry* rv = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>PfxEntry* ep = ppfx;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// first handle the special case of 0 length suffixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>SfxEntry* se = sStart[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (se) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!cclass || se-&gt;getCont()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// suffixes are not allowed in beginning of compounds</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (((((in_compound != IN_CPD_BEGIN)) || <text:s/>// &amp;&amp; !cclass</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="12"/>// except when signed with compoundpermitflag flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(se-&gt;getCont() &amp;&amp; compoundpermitflag &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>TESTAFF(se-&gt;getCont(), compoundpermitflag, se-&gt;getContLen()))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(!circumfix ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// no circumfix flag in prefix and suffix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((!ppfx || !(ep-&gt;getCont()) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>!TESTAFF(ep-&gt;getCont(), circumfix, ep-&gt;getContLen())) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(!se-&gt;getCont() ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>!(TESTAFF(se-&gt;getCont(), circumfix, se-&gt;getContLen())))) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// circumfix flag in prefix AND suffix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((ppfx &amp;&amp; (ep-&gt;getCont()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(ep-&gt;getCont(), circumfix, ep-&gt;getContLen())) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(se-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>(TESTAFF(se-&gt;getCont(), circumfix, se-&gt;getContLen()))))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>// fogemorpheme</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(in_compound ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>!((se-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>(TESTAFF(se-&gt;getCont(), onlyincompound, se-&gt;getContLen()))))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>// needaffix on prefix or first suffix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(cclass ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>!(se-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(se-&gt;getCont(), needaffix, se-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(ppfx &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>!((ep-&gt;getCont()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>TESTAFF(ep-&gt;getCont(), needaffix, ep-&gt;getContLen()))))))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>rv = se-&gt;checkword(word, len, sfxopts, ppfx, cclass,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>needflag, FLAG_NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>while (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (ppfx) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (ppfx-&gt;getMorph()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(ppfx-&gt;getMorph());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>debugflag(result, ppfx-&gt;getFlag());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (complexprefixes &amp;&amp; HENTRY_DATA(rv))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(HENTRY_DATA2(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!HENTRY_FIND(rv, MORPH_STEM)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(MORPH_STEM);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(HENTRY_WORD(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!complexprefixes &amp;&amp; HENTRY_DATA(rv)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(HENTRY_DATA2(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (se-&gt;getMorph()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(se-&gt;getMorph());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>debugflag(result, se-&gt;getFlag());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>result.append(&quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>rv = se-&gt;get_next_homonym(rv, sfxopts, ppfx, cclass, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>se = se-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// now handle the general case</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (len == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return std::string(); <text:s/>// FULLSTRIP</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>unsigned char sp = *((const unsigned char*)(word + len - 1));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>SfxEntry* sptr = sStart[sp];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>while (sptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (isRevSubset(sptr-&gt;getKey(), word + len - 1, len)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// suffixes are not allowed in beginning of compounds</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (((((in_compound != IN_CPD_BEGIN)) || <text:s/>// &amp;&amp; !cclass</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// except when signed with compoundpermitflag flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(sptr-&gt;getCont() &amp;&amp; compoundpermitflag &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>TESTAFF(sptr-&gt;getCont(), compoundpermitflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>sptr-&gt;getContLen()))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(!circumfix ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// no circumfix flag in prefix and suffix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((!ppfx || !(ep-&gt;getCont()) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>!TESTAFF(ep-&gt;getCont(), circumfix, ep-&gt;getContLen())) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(!sptr-&gt;getCont() ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>!(TESTAFF(sptr-&gt;getCont(), circumfix, sptr-&gt;getContLen())))) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// circumfix flag in prefix AND suffix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((ppfx &amp;&amp; (ep-&gt;getCont()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(ep-&gt;getCont(), circumfix, ep-&gt;getContLen())) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(sptr-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>(TESTAFF(sptr-&gt;getCont(), circumfix, sptr-&gt;getContLen()))))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>// fogemorpheme</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(in_compound ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>!((sptr-&gt;getCont() &amp;&amp; (TESTAFF(sptr-&gt;getCont(), onlyincompound,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="43"/>sptr-&gt;getContLen()))))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>// needaffix on first suffix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>(cclass ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>!(sptr-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(sptr-&gt;getCont(), needaffix, sptr-&gt;getContLen())))))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>rv = sptr-&gt;checkword(word, len, sfxopts, ppfx, cclass,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>needflag, FLAG_NULL);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>while (rv) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (ppfx) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (ppfx-&gt;getMorph()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(ppfx-&gt;getMorph());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>debugflag(result, ppfx-&gt;getFlag());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (complexprefixes &amp;&amp; HENTRY_DATA(rv))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(HENTRY_DATA2(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!HENTRY_FIND(rv, MORPH_STEM)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(MORPH_STEM);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(HENTRY_WORD(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!complexprefixes &amp;&amp; HENTRY_DATA(rv)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(HENTRY_DATA2(rv));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (sptr-&gt;getMorph()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>result.append(sptr-&gt;getMorph());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>} else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>debugflag(result, sptr-&gt;getFlag());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>result.append(&quot;\n&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>rv = sptr-&gt;get_next_homonym(rv, sfxopts, ppfx, cclass, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>sptr = sptr-&gt;getNextEQ();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>sptr = sptr-&gt;getNextNE();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// check if word with affixes is correctly spelled</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">struct hentry* <text:span text:style-name="T8">AffixMgr::affix_check</text:span>(const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="37"/>int len,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="37"/>const FLAG needflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="37"/>char in_compound) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// check all prefixes (also crossed with suffixes if allowed)</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>struct hentry* rv = <text:span text:style-name="T10">prefix_check</text:span>(word, len, in_compound, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (rv)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// if still not found check all suffixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>rv = <text:span text:style-name="T10">suffix_check</text:span>(word, len, 0, NULL, FLAG_NULL, needflag, in_compound);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (havecontclass) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>sfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>pfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (rv)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// if still not found check all two-level suffixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>rv = <text:span text:style-name="T10">suffix_check_twosfx</text:span>(word, len, 0, NULL, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (rv)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// if still not found check all two-level suffixes</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>rv = <text:span text:style-name="T10">prefix_check_twosfx</text:span>(word, len, IN_CPD_NOT, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return rv;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// check if word with affixes is correctly spelled</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">std::string <text:span text:style-name="T8">AffixMgr::affix_check_morph</text:span>(const char* word,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>int len,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>const FLAG needflag,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>char in_com<text:span text:style-name="T7">pound) {</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>// check all prefixes (also crossed with suffixes if allowed)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string st = prefix_check_morph(word, len, in_compound);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!st.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>result.append(st);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>// if still not found check all suffixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>st = suffix_check_morph(word, len, 0, NULL, &apos;\0&apos;, needflag, in_compound);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!st.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>result.append(st);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (havecontclass) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>sfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>pfx = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>// if still not found check all two-level suffixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>st = suffix_check_twosfx_morph(word, len, 0, NULL, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!st.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>result.append(st);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>// if still not found check all two-level suffixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>st = prefix_check_twosfx_morph(word, len, IN_CPD_NOT, needflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!st.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="6"/>result.append(st);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return result;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// morphcmp(): compare MORPH_DERI_SFX, MORPH_INFL_SFX and MORPH_TERM_SFX fields</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// in the first line of the inputs</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// return 0, if inputs equal</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// return 1, if inputs may equal with a secondary suffix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// otherwise return -1</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">static int morphcmp(const char* s, const char* t) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int se = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int te = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>const char* sl;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char* tl;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char* olds;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>const char* oldt;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!s || !t)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>olds = s;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>sl = strchr(s, &apos;\n&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>s = strstr(s, MORPH_DERI_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!s || (sl &amp;&amp; sl &lt; s))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>s = strstr(olds, MORPH_INFL_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!s || (sl &amp;&amp; sl &lt; s)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>s = strstr(olds, MORPH_TERM_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>olds = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>oldt = t;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>tl = strchr(t, &apos;\n&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>t = strstr(t, MORPH_DERI_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!t || (tl &amp;&amp; tl &lt; t))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>t = strstr(oldt, MORPH_INFL_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!t || (tl &amp;&amp; tl &lt; t)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>t = strstr(oldt, MORPH_TERM_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>oldt = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (s &amp;&amp; t &amp;&amp; (!sl || sl &gt; s) &amp;&amp; (!tl || tl &gt; t)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>s += MORPH_TAG_LEN;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>t += MORPH_TAG_LEN;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>se = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>te = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while ((*s == *t) &amp;&amp; !se &amp;&amp; !te) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>s++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>t++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>switch (*s) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos; &apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;\n&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;\t&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;\0&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>se = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>switch (*t) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos; &apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;\n&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;\t&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case &apos;\0&apos;:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>te = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!se || !te) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>// not terminal suffix difference</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (olds)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="8"/>return -1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>olds = s;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>s = strstr(s, MORPH_DERI_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!s || (sl &amp;&amp; sl &lt; s))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>s = strstr(olds, MORPH_INFL_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!s || (sl &amp;&amp; sl &lt; s)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>s = strstr(olds, MORPH_TERM_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>olds = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>oldt = t;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>t = strstr(t, MORPH_DERI_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!t || (tl &amp;&amp; tl &lt; t))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>t = strstr(oldt, MORPH_INFL_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!t || (tl &amp;&amp; tl &lt; t)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>t = strstr(oldt, MORPH_TERM_SFX);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>oldt = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!s &amp;&amp; !t &amp;&amp; se &amp;&amp; te)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">std::string <text:span text:style-name="T8">AffixMgr::morphgen</text:span>(const char* ts,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>int wl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>const unsigned short* ap,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>unsigned short al,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>const char* morph,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>const char* targetmorph,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="25"/>int level) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// handle suffixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!morph)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return std::string();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// check substandard flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (TESTAFF(ap, substandard, al))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return std::string();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (morphcmp(morph, targetmorph) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return ts;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>size_t stemmorphcatpos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string mymorph;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// use input suffix fields, if exist</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (strstr(morph, MORPH_INFL_SFX) || strstr(morph, MORPH_DERI_SFX)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>mymorph.assign(morph);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>mymorph.append(&quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>stemmorphcatpos = mymorph.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>stemmorphcatpos = std::string::npos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int i = 0; i &lt; al; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>const unsigned char c = (unsigned char)(ap[i] &amp; 0x00FF);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>SfxEntry* sptr = sFlag[c];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (sptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (sptr-&gt;getFlag() == ap[i] &amp;&amp; sptr-&gt;getMorph() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>((sptr-&gt;getContLen() == 0) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>// don&apos;t generate forms with substandard affixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>!TESTAFF(sptr-&gt;getCont(), substandard, sptr-&gt;getContLen()))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>const char* stemmorph;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (stemmorphcatpos != std::string::npos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="10"/>mymorph.replace(stemmorphcatpos, std::string::npos, sptr-&gt;getMorph());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>stemmorph = mymorph.c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>stemmorph = sptr-&gt;getMorph();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>int cmp = morphcmp(stemmorph, targetmorph);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (cmp == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string newword = sptr-&gt;add(ts, wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (!newword.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>hentry* check = pHMgr-&gt;lookup(newword.c_str()); <text:s/>// XXX extra dic</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!check || !check-&gt;astr ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>!(TESTAFF(check-&gt;astr, forbiddenword, check-&gt;alen) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>TESTAFF(check-&gt;astr, ONLYUPCASEFLAG, check-&gt;alen))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>return newword;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>// recursive call for secondary suffixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((level == 0) &amp;&amp; (cmp == 1) &amp;&amp; (sptr-&gt;getContLen() &gt; 0) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>!TESTAFF(sptr-&gt;getCont(), substandard, sptr-&gt;getContLen())) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string newword = sptr-&gt;add(ts, wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (!newword.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::string newword2 =</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>morphgen(newword.c_str(), newword.size(), sptr-&gt;getCont(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="25"/>sptr-&gt;getContLen(), stemmorph, targetmorph, 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!newword2.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>return newword2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>sptr = sptr-&gt;getFlgNxt();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return std::string();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int <text:span text:style-name="T8">AffixMgr::expand_rootword</text:span>(struct guessword* wlst,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>int maxn,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>const char* ts,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>int wl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>const unsigned short* ap,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>unsigned short al,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>const char* bad,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>int badl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>const char* phon) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int nh = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// first add root word to list</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if ((nh &lt; maxn) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>!(al &amp;&amp; ((needaffix &amp;&amp; TESTAFF(ap, needaffix, al)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>(onlyincompound &amp;&amp; TESTAFF(ap, onlyincompound, al))))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>wlst[nh].word = mystrdup(ts);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!wlst[nh].word)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>wlst[nh].allow = false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>wlst[nh].orig = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>nh++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>// add special phonetic version</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (phon &amp;&amp; (nh &lt; maxn)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>wlst[nh].word = mystrdup(phon);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!wlst[nh].word)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="8"/>return nh - 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>wlst[nh].allow = false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>wlst[nh].orig = mystrdup(ts);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (!wlst[nh].orig)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return nh - 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>nh++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// handle suffixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int i = 0; i &lt; al; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>const unsigned char c = (unsigned char)(ap[i] &amp; 0x00FF);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>SfxEntry* sptr = sFlag[c];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (sptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if ((sptr-&gt;getFlag() == ap[i]) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>(!sptr-&gt;getKeyLen() ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>((badl &gt; sptr-&gt;getKeyLen()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(strcmp(sptr-&gt;getAffix(), bad + badl - sptr-&gt;getKeyLen()) == 0))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// check needaffix flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>!(sptr-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((needaffix &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(sptr-&gt;getCont(), needaffix, sptr-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(circumfix &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(sptr-&gt;getCont(), circumfix, sptr-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(onlyincompound &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(sptr-&gt;getCont(), onlyincompound, sptr-&gt;getContLen()))))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>std::string newword = sptr-&gt;add(ts, wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!newword.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (nh &lt; maxn) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>wlst[nh].word = mystrdup(newword.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>wlst[nh].allow = sptr-&gt;allowCross();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>wlst[nh].orig = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>nh++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>// add special phonetic version</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (phon &amp;&amp; (nh &lt; maxn)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>std::string prefix(phon);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>std::string key(sptr-&gt;getKey());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>reverseword(key);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>prefix.append(key);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>wlst[nh].word = mystrdup(prefix.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (!wlst[nh].word)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>return nh - 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>wlst[nh].allow = false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>wlst[nh].orig = mystrdup(newword.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (!wlst[nh].orig)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>return nh - 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>nh++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>sptr = sptr-&gt;getFlgNxt();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int n = nh;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// handle cross products of prefixes and suffixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int j = 1; j &lt; n; j++)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (wlst[j].allow) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for (int k = 0; k &lt; al; k++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>const unsigned char c = (unsigned char)(ap[k] &amp; 0x00FF);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>PfxEntry* cptr = pFlag[c];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>while (cptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if ((cptr-&gt;getFlag() == ap[k]) &amp;&amp; cptr-&gt;allowCross() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="14"/>(!cptr-&gt;getKeyLen() ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="15"/>((badl &gt; cptr-&gt;getKeyLen()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>(strncmp(cptr-&gt;getKey(), bad, cptr-&gt;getKeyLen()) == 0)))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>int l1 = strlen(wlst[j].word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::string newword = cptr-&gt;add(wlst[j].word, l1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!newword.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (nh &lt; maxn) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>wlst[nh].word = mystrdup(newword.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>wlst[nh].allow = cptr-&gt;allowCross();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>wlst[nh].orig = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>nh++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>cptr = cptr-&gt;getFlgNxt();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>// now handle pure prefixes</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int m = 0; m &lt; al; m++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>const unsigned char c = (unsigned char)(ap[m] &amp; 0x00FF);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>PfxEntry* ptr = pFlag[c];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (ptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if ((ptr-&gt;getFlag() == ap[m]) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>(!ptr-&gt;getKeyLen() ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="11"/>((badl &gt; ptr-&gt;getKeyLen()) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>(strncmp(ptr-&gt;getKey(), bad, ptr-&gt;getKeyLen()) == 0))) &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>// check needaffix flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>!(ptr-&gt;getCont() &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((needaffix &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(ptr-&gt;getCont(), needaffix, ptr-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(circumfix &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(ptr-&gt;getCont(), circumfix, ptr-&gt;getContLen())) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="13"/>(onlyincompound &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>TESTAFF(ptr-&gt;getCont(), onlyincompound, ptr-&gt;getContLen()))))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>std::string newword = ptr-&gt;add(ts, wl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!newword.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (nh &lt; maxn) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>wlst[nh].word = mystrdup(newword.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>wlst[nh].allow = ptr-&gt;allowCross();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>wlst[nh].orig = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>nh++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ptr = ptr-&gt;getFlgNxt();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return nh;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// return replacing table</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">const std::vector&lt;replentry&gt;&amp; AffixMgr::get_reptable() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return reptable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// return iconv table</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">RepList* AffixMgr::get_iconvtable() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!iconvtable)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return iconvtable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/>// return oconv table</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">RepList* AffixMgr::get_oconvtable() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (!oconvtable)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>return oconvtable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">// return replacing table</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:span text:style-name="T7">struct phonetable* AffixMgr::get_phonetable</text:span>() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!phone)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return phone;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return character map table</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const std::vector&lt;mapentry&gt;&amp; AffixMgr::get_maptable() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return maptable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return character map table</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const std::vector&lt;std::string&gt;&amp; AffixMgr::get_breaktable() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return breaktable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return text encoding of dictionary</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const std::string&amp; AffixMgr::get_encoding() {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (encoding.empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>encoding = SPELL_ENCODING;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return encoding;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return text encoding of dictionary</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::get_langnum() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return langnum;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return double prefix option</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::get_complexprefixes() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return complexprefixes;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return FULLSTRIP option</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::get_fullstrip() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return fullstrip;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">FLAG AffixMgr::get_keepcase() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return keepcase;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">FLAG AffixMgr::get_forceucase() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return forceucase;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">FLAG AffixMgr::get_warn() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return warn;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::get_forbidwarn() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return forbidwarn;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::get_checksharps() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return checksharps;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">char* AffixMgr::encode_flag(unsigned short aflag) const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return pHMgr-&gt;encode_flag(aflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return the preferred ignore string for suggestions</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const char* AffixMgr::get_ignore() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (ignorechars.empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return ignorechars.c_str();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return the preferred ignore string for suggestions</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const std::vector&lt;w_char&gt;&amp; AffixMgr::get_ignore_utf16() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return ignorechars_utf16;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return the keyboard string for suggestions</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">char* AffixMgr::get_key_string() {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (keystring.empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>keystring = SPELL_KEYSTRING;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return mystrdup(keystring.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return the preferred try string for suggestions</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">char* AffixMgr::get_try_string() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (trystring.empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return mystrdup(trystring.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return the preferred try string for suggestions</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const std::string&amp; AffixMgr::get_wordchars() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return wordchars;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const std::vector&lt;w_char&gt;&amp; AffixMgr::get_wordchars_utf16() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return wordchars_utf16;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// is there compounding?</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::get_compound() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return compoundflag || compoundbegin || !defcpdtable.empty();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return the compound words control flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">FLAG AffixMgr::get_compoundflag() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return compoundflag;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return the forbidden words control flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">FLAG AffixMgr::get_forbiddenword() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return forbiddenword;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return the forbidden words control flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">FLAG AffixMgr::get_nosuggest() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return nosuggest;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return the forbidden words control flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">FLAG AffixMgr::get_nongramsuggest() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return nongramsuggest;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/>// return the forbidden words flag modify flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">FLAG AffixMgr::get_needaffix() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return needaffix;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return the onlyincompound flag</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">FLAG AffixMgr::get_onlyincompound() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return onlyincompound;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return the value of suffix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">const std::string&amp; AffixMgr::get_version() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return version;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// utility method to look up root words in hash table</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">struct hentry* AffixMgr::lookup(const char* word) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>struct hentry* he = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (size_t i = 0; i &lt; alldic.size() &amp;&amp; !he; ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>he = alldic[i]-&gt;lookup(word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return he;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return the value of suffix</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::have_contclass() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return havecontclass;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return utf8</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::get_utf8() const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return utf8;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::get_maxngramsugs(void) const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return maxngramsugs;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::get_maxcpdsugs(void) const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return maxcpdsugs;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::get_maxdiff(void) const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return maxdiff;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::get_onlymaxdiff(void) const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return onlymaxdiff;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return nosplitsugs</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::get_nosplitsugs(void) const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return nosplitsugs;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">// return sugswithdots</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int AffixMgr::get_sugswithdots(void) const {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return sugswithdots;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">/* parse flag */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">bool AffixMgr::parse_flag(const std::string&amp; line, unsigned short* out, FileMgr* af) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (*out != FLAG_NULL &amp;&amp; !(*out &gt;= DEFAULTFLAGS)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="8"/>stderr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>&quot;<text:span text:style-name="T13">error: line %d: multiple definitions of an affix file parameter</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string s;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!parse_string(line, s, af-&gt;getlinenum()))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>*out = pHMgr-&gt;decode_flag(s.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">/* parse num */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">bool AffixMgr::parse_num(const std::string&amp; line, int* out, FileMgr* af) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (*out != -1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>stderr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>&quot;<text:span text:style-name="T13">error: line %d: multiple definitions of an affix file parameter\</text:span>n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string s;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (!parse_string(line, s, af-&gt;getlinenum()))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>*out = atoi(s.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">/* parse in the max syllablecount of compound words and <text:s/>*/</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">bool AffixMgr::parse_cpdsyllable(const std::string&amp; line, FileMgr* af) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int np = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator iter = line.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (start_piece != line.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>cpdmaxsyllable = atoi(std::string(start_piece, iter).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 2: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>cpdvowels.assign(start_piece, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::sort(cpdvowels.begin(), cpdvowels.end());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string piece(start_piece, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>u8_u16(cpdvowels_utf16, piece);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::sort(cpdvowels_utf16.begin(), cpdvowels_utf16.end());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (np &lt; 2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="21"/>&quot;<text:span text:style-name="T13">error: line %d: missing compoundsyllable information</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (np == 2)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>cpdvowels = &quot;AEIOUaeiou&quot;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">/* parse in the typical fault correcting table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">bool AffixMgr::parse_reptable(const std::string&amp; line, FileMgr* af) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (parsedrep) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: multiple table definitions</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>parsedrep = true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int numrep = -1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int np = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator iter = line.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (start_piece != line.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>numrep = atoi(std::string(start_piece, iter).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (numrep &lt; 1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: incorrect entry number\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>reptable.reserve(numrep);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (np != 2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: missing data\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>/* now parse the numrep lines to read in the remainder of the table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int j = 0; j &lt; numrep; ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string nl;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!af-&gt;getline(nl))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>mychomp(nl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>reptable.push_back(replentry());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>iter = nl.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>int type = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (start_piece != nl.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="10"/>if (nl.compare(start_piece - nl.begin(), 3, &quot;REP&quot;, 3) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: table is corrupt\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>reptable.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (*start_piece == &apos;^&apos;)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>type = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>reptable.back().pattern.assign(start_piece + type, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>mystrrep(reptable.back().pattern, &quot;_&quot;, &quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (!reptable.back().pattern.empty() &amp;&amp; reptable.back().pattern[reptable.back().pattern.size() - 1] == &apos;$&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>type += 2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>reptable.back().pattern.resize(reptable.back().pattern.size() - 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 2: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>reptable.back().outstrings[type].assign(start_piece, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>mystrrep(reptable.back().outstrings[type], &quot;_&quot;, &quot; &quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (reptable.back().pattern.empty() || reptable.back().outstrings[type].empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: table is corrupt\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>reptable.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">/* parse in the typical fault correcting table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">bool AffixMgr::parse_convtable(const std::string&amp; line,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>FileMgr* af,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>RepList** rl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="30"/>const std::string&amp; keyword) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (*rl) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: multiple table definitions\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int np = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int numrl = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator iter = line.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (start_piece != line.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>numrl = atoi(std::string(start_piece, iter).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="8"/>if (numrl &lt; 1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: incorrect entry number\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>*rl = new RepList(numrl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (!*rl)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (np != 2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: missing data\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>/* now parse the num lines to read in the remainder of the table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int j = 0; j &lt; numrl; j++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string nl;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!af-&gt;getline(nl))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>mychomp(nl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string pattern;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string pattern2;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>iter = nl.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (start_piece != nl.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>{</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (nl.compare(start_piece - nl.begin(), keyword.size(), keyword, 0, keyword.size()) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: table is corrupt\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>delete *rl;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>*rl = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>pattern.assign(start_piece, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case 2: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>pattern2.assign(start_piece, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (pattern.empty() || pattern2.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: table is corrupt\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="23"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>(*rl)-&gt;add(pattern, pattern2);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">/* parse in the typical fault correcting table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">bool AffixMgr::parse_phonetable(const std::string&amp; line, FileMgr* af) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (phone) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: multiple table definitions</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int num = -1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int np = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator iter = line.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (start_piece != line.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>num = atoi(std::string(start_piece, iter).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (num &lt; 1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: bad entry number</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>phone = new phonetable;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>phone-&gt;utf8 = (char)utf8;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (np != 2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: missing data</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>/* now parse the phone-&gt;num lines to read in the remainder of the table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:span text:style-name="T7"><text:s text:c="2"/>for (int j = 0; j &lt; num; ++j) </text:span>{</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string nl;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!af-&gt;getline(nl))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>mychomp(nl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>const size_t old_size = phone-&gt;rules.size();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>iter = nl.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (start_piece != nl.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>{</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (nl.compare(start_piece - nl.begin(), 5, &quot;PHONE&quot;, 5) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="14"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: table is corrupt</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>phone-&gt;rules.push_back(std::string(start_piece, iter));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>case 2: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>phone-&gt;rules.push_back(std::string(start_piece, iter));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>mystrrep(phone-&gt;rules.back(), &quot;_&quot;, &quot;&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (phone-&gt;rules.size() != old_size + 2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: table is corrupt</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>phone-&gt;rules.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>phone-&gt;rules.push_back(&quot;&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>phone-&gt;rules.push_back(&quot;&quot;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>init_phonet_hash(*phone);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">/* parse in the checkcompoundpattern table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:span text:style-name="T7">bool AffixMgr::parse</text:span>_checkcpdtable(const std::string&amp; line, FileMgr* af) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (parsedcheckcpd) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: multiple table definitions</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>parsedcheckcpd = true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int numcheckcpd = -1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int np = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator iter = line.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (start_piece != line.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>numcheckcpd = atoi(std::string(start_piece, iter).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (numcheckcpd &lt; 1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: bad entry number</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>checkcpdtable.reserve(numcheckcpd);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="6"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (np != 2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: missing data</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>/* now parse the numcheckcpd lines to read in the remainder of the table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (int j = 0; j &lt; numcheckcpd; ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>std::string nl;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!af-&gt;getline(nl))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>mychomp(nl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>checkcpdtable.push_back(patentry());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>iter = nl.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (start_piece != nl.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (nl.compare(start_piece - nl.begin(), 20, &quot;CHECKCOMPOUNDPATTERN&quot;, 20) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: table is corrupt\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>checkcpdtable.back().pattern.assign(start_piece, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>size_t slash_pos = checkcpdtable.back().pattern.find(&apos;/&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (slash_pos != std::string::npos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::string chunk(checkcpdtable.back().pattern, slash_pos + 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>checkcpdtable.back().pattern.resize(slash_pos);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>checkcpdtable.back().cond = pHMgr-&gt;decode_flag(chunk.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 2: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>checkcpdtable.back().pattern2.assign(start_piece, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>size_t slash_pos = checkcpdtable.back().pattern2.find(&apos;/&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (slash_pos != std::string::npos) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::string chunk(checkcpdtable.back().pattern2, slash_pos + 1);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>checkcpdtable.back().pattern2.resize(slash_pos);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>checkcpdtable.back().cond2 = pHMgr-&gt;decode_flag(chunk.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 3: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>checkcpdtable.back().pattern3.assign(start_piece, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>simplifiedcpd = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>i++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">/* parse in the compound rule table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7">bool AffixMgr::parse_defcpdtable(const std::string&amp; line, FileMgr* af) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>if (parseddefcpd) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: multiple table definitions\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>parseddefcpd = true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int numdefcpd = -1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>int np = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string::const_iterator iter = line.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>std::string::const_iterator start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:span text:style-name="T7"><text:s text:c="2"/>while (start_piece != line.end()</text:span>) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>numdefcpd = atoi(std::string(start_piece, iter).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (numdefcpd &lt; 1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: bad entry number\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>defcpdtable.reserve(numdefcpd);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (np != 2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: missing data\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>/* now parse the numdefcpd lines to read in the remainder of the table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="2"/>for (int j = 0; j &lt; numdefcpd; ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>std::string nl;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>if (!af-&gt;getline(nl))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>mychomp(nl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>defcpdtable.push_back(flagentry());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>iter = nl.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="4"/>while (start_piece != nl.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="6"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (nl.compare(start_piece - nl.begin(), 12, &quot;COMPOUNDRULE&quot;, 12) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: table is corrupt\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="29"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>numdefcpd = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:soft-page-break/><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="8"/>case 1: { <text:s/>// handle parenthesized flags</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="10"/>if (std::find(start_piece, iter, &apos;(&apos;) != iter) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="12"/>for (std::string::const_iterator k = start_piece; k != iter; ++k) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>std::string::const_iterator chb = k;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>std::string::const_iterator che = k + 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="14"/>if (*k == &apos;(&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>std::string::const_iterator parpos = std::find(k, iter, &apos;)&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P7"><text:s text:c="16"/>if (parpos != iter) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>chb = k + 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>che = parpos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>k = parpos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (*chb == &apos;*&apos; || *chb == &apos;?&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>defcpdtable.back().push_back((FLAG)*chb);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>pHMgr-&gt;decode_flags(defcpdtable.back(), std::string(chb, che), af);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>pHMgr-&gt;decode_flags(defcpdtable.back(), std::string(start_piece, iter), af);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (defcpdtable.back().empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: table is corrupt\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">/* parse in the character map table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">bool <text:span text:style-name="T8">AffixMgr::parse_maptable</text:span>(const std::string&amp; line, FileMgr* af) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (parsedmaptable) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: multiple table definitions\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>parsedmaptable = true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int nummap = -1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int np = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator iter = line.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (start_piece != line.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>nummap = atoi(std::string(start_piece, iter).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (nummap &lt; 1) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="10"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: bad entry number\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>maptable.reserve(nummap);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (np != 2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: missing data\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>/* now parse the nummap lines to read in the remainder of the table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int j = 0; j &lt; nummap; ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string nl;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!af-&gt;getline(nl))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>mychomp(nl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>maptable.push_back(mapentry());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>iter = nl.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (start_piece != nl.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (nl.compare(start_piece - nl.begin(), 3, &quot;MAP&quot;, 3) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: table is corrupt\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>nummap = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>for (std::string::const_iterator k = start_piece; k != iter; ++k) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::string::const_iterator chb = k;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::string::const_iterator che = k + 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (*k == &apos;(&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>std::string::const_iterator parpos = std::find(k, iter, &apos;)&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (parpos != iter) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>chb = k + 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>che = parpos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>k = parpos;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (utf8 &amp;&amp; (*k &amp; 0xc0) == 0xc0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>++k;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>while (k != iter &amp;&amp; (*k &amp; 0xc0) == 0x80)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="20"/>++k;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>che = k;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>--k;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>maptable.back().push_back(std::string(chb, che));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="8"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (maptable.back().empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: table is corrupt\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">/* parse in the word breakpoint table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">bool <text:span text:style-name="T8">AffixMgr::parse_breaktable</text:span>(const std::string&amp; line, FileMgr* af) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (parsedbreaktable) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: multiple table definitions</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>parsedbreaktable = true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int numbreak = -1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int np = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator iter = line.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (start_piece != line.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>numbreak = atoi(std::string(start_piece, iter).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (numbreak &lt; 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: bad entry number</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="27"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (numbreak == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>breaktable.reserve(numbreak);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (np != 2) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: missing data</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>/* now parse the numbreak lines to read in the remainder of the table */</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int j = 0; j &lt; numbreak; ++j) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string nl;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!af-&gt;getline(nl))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>mychomp(nl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="4"/>i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>iter = nl.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (start_piece != nl.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (nl.compare(start_piece - nl.begin(), 5, &quot;BREAK&quot;, 5) != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: table is corrupt</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>numbreak = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>breaktable.push_back(std::string(start_piece, iter));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (breaktable.size() != static_cast&lt;size_t&gt;(numbreak)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>HUNSPELL_WARNING(stderr, &quot;<text:span text:style-name="T13">error: line %d: table is corrupt</text:span>\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="21"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">void <text:span text:style-name="T8">AffixMgr::</text:span><office:annotation office:name="__Annotation__10814_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:19:51.566381354</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T20">Dangerous to reverse a regex. Also implementation Hunspell is not safe for ^ at end of input. Reversing input, not regex.</text:span></text:p>
      </office:annotation><text:span text:style-name="T8">reverse_condition</text:span><office:annotation-end office:name="__Annotation__10814_3164858689"/>(std::string&amp; piece) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (piece.empty())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int neg = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (std::string::reverse_iterator k = piece.rbegin(); k != piece.rend(); ++k) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>switch (*k) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;[&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (neg)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>*(k - 1) = &apos;[&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>*k = &apos;]&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;]&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>*k = &apos;[&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (neg)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>*(k - 1) = &apos;^&apos;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>neg = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case &apos;^&apos;: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (*(k - 1) == &apos;]&apos;)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>neg = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>*(k - 1) = *k;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>default: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (neg)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="10"/>*(k - 1) = *k;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">class entries_container {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::vector&lt;AffEntry*&gt; entries;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>AffixMgr* m_mgr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>char m_at;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">public:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>entries_container(char at, AffixMgr* mgr)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>: m_mgr(mgr)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>, m_at(at) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>void release() {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>entries.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>void initialize(int numents,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>char opts, unsigned short aflag) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>entries.reserve(numents);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (m_at == &apos;P&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>entries.push_back(new PfxEntry(m_mgr));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>entries.push_back(new SfxEntry(m_mgr));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>entries.back()-&gt;opts = opts;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>entries.back()-&gt;aflag = aflag;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>AffEntry* add_entry(char opts) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (m_at == &apos;P&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>entries.push_back(new PfxEntry(m_mgr));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>entries.push_back(new SfxEntry(m_mgr));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>AffEntry* ret = entries.back();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>ret-&gt;opts = entries[0]-&gt;opts &amp; opts;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return ret;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>AffEntry* first_entry() {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return entries.empty() ? NULL : entries[0];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>~entries_container() {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>for (size_t i = 0; i &lt; entries.size(); ++i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>delete entries[i];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::vector&lt;AffEntry*&gt;::iterator begin() { return entries.begin(); }</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::vector&lt;AffEntry*&gt;::iterator end() { return entries.end(); }</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">};</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:span text:style-name="T7">bool </text:span><text:span text:style-name="T8">AffixMgr::parse_affix</text:span>(const std::string&amp; line,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="26"/><office:annotation office:name="__Annotation__9871_1547195353">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-12T22:32:23.674342254</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">affix type, can be inverted value in case of complex type.</text:span></text:p>
      </office:annotation>const char at<office:annotation-end office:name="__Annotation__9871_1547195353"/>,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="26"/>FileMgr* af,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="26"/><office:annotation office:name="__Annotation__9907_1547195353">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-12T23:13:18.401701348</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">storage for flags that have been encountered for pfx and/or sfx </text:span></text:p>
      </office:annotation>char* dupflags<office:annotation-end office:name="__Annotation__9907_1547195353"/>) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int numents = 0; <text:s/><text:span text:style-name="T1">// number of AffEntry structures to parse</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>unsigned short aflag = 0; <text:s/><text:span text:style-name="T1">// affix char identifier</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>char ff = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>entries_container affentries(at, this);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P6">// checking lines with bad syntax</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef DEBUG</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int basefieldnum = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// split affix header line into pieces</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int np = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator iter = line.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::string::const_iterator start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>while (start_piece != line.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><text:span text:style-name="T8">// piece 1 - is type of affix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><text:span text:style-name="T8">// piece 2 - is affix char</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>aflag = <office:annotation office:name="__Annotation__9875_1547195353">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-12T22:38:20.726292228</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">decode flag to internal representation in unsigned short</text:span></text:p>
      </office:annotation>pHMgr-&gt;decode_flag(std::string(start_piece, iter).c_str())<office:annotation-end office:name="__Annotation__9875_1547195353"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (<office:annotation office:name="__Annotation__9881_1547195353">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-12T22:54:40.279791610</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">warm only if this affix flag was used before for this particular affix type</text:span></text:p>
      </office:annotation>((at == &apos;S&apos;) &amp;&amp; (dupflags[aflag] &amp; dupSFX)) ||</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>((at == &apos;P&apos;) &amp;&amp; (dupflags[aflag] &amp; dupPFX))<office:annotation-end office:name="__Annotation__9881_1547195353"/>) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>HUNSPELL_WARNING(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>stderr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>&quot;error: line %d: multiple definitions of an affix flag\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><office:annotation office:name="__Annotation__9880_1547195353">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-12T22:51:52.844835509</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">store that this flag was used for sfx and/or pfx</text:span></text:p>
      </office:annotation>dupflags[aflag] += (char)((at == &apos;S&apos;) ? dupSFX : dupPFX)<office:annotation-end office:name="__Annotation__9880_1547195353"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><text:span text:style-name="T8">// piece 3 - is cross product indicator</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 2: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (*start_piece == <office:annotation office:name="__Annotation__9890_1547195353">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-12T22:59:07.997314256</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">usually it regards a cross product</text:span></text:p>
      </office:annotation>&apos;Y&apos;<office:annotation-end office:name="__Annotation__9890_1547195353"/>)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>ff = aeXPRODUCT;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/><text:span text:style-name="T8">// piece 4 - is number of affentries</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>case 3: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><office:annotation office:name="__Annotation__9891_1547195353">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-12T22:59:48.467803685</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">the number of entries that need to follow</text:span></text:p>
      </office:annotation>numents<office:annotation-end office:name="__Annotation__9891_1547195353"/> = atoi(std::string(start_piece, iter).c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if ((numents &lt;= 0) || ((std::numeric_limits&lt;size_t&gt;::max() /</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="32"/>sizeof(AffEntry)) &lt; static_cast&lt;size_t&gt;(numents))) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>char* err = pHMgr-&gt;encode_flag(aflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (err) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: bad entry number\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>free(err);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>char opts = ff;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>opts += aeUTF8;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (pHMgr-&gt;is_aliasf())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="10"/>opts += aeALIASF;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (pHMgr-&gt;is_aliasm())</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>opts += aeALIASM;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>affentries.initialize(numents, opts, aflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>++i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(line, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// check to make sure we parsed enough pieces</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (np != 4) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>char* err = pHMgr-&gt;encode_flag(aflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (err) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: missing data\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="23"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>free(err);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// now parse numents affentries for this affix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>AffEntry* entry = affentries.first_entry();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int ent = 0; ent &lt; numents; ++ent) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>std::string <office:annotation office:name="__Annotation__9892_1547195353">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-12T23:01:13.709314009</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">next line</text:span></text:p>
      </office:annotation>nl<office:annotation-end office:name="__Annotation__9892_1547195353"/>;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (!af-&gt;getline(nl))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>mychomp(nl);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>iter = nl.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>i = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>np = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// split line into pieces</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (start_piece != nl.end()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>switch (i) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T8">// piece 1 - is type</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 0: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (ent != 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>entry = <text:span text:style-name="T1">affentries</text:span>.a<text:span text:style-name="T1">dd_entry</text:span>((char)(aeXPRODUCT + aeUTF8 + aeALIASF + aeALIASM));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T8">// piece 2 - is affix char</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 1: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string chunk(start_piece, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (pHMgr-&gt;decode_flag(chunk.c_str()) != aflag) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>char* err = pHMgr-&gt;encode_flag(aflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (err) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>HUNSPELL_WARNING(stderr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>&quot;error: line %d: affix %s is corrupt\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>af-&gt;getlinenum(), err);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>free(err);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (ent != 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>AffEntry* start_entry = affentries.first_entry();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="12"/>entry-&gt;aflag = start_entry-&gt;aflag;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T8">// piece 3 - is string to strip or 0 for null</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 2: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>entry-&gt;strip = std::string(start_piece, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>reverseword_utf(entry-&gt;strip);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>reverseword(entry-&gt;strip);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (entry-&gt;strip.compare(&quot;0&quot;) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>entry-&gt;strip.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T8">// piece 4 - is affix string or 0 for null</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 3: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>entry-&gt;morphcode = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>entry-&gt;contclass = NULL;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>entry-&gt;contclasslen = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string::const_iterator dash = std::find(start_piece, iter, &apos;/&apos;);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (dash != iter) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>entry-&gt;appnd = std::string(start_piece, dash);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::string dash_str(dash + 1, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!ignorechars.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>remove_ignored_chars_utf(entry-&gt;appnd, ignorechars_utf16);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>remove_ignored_chars(entry-&gt;appnd, ignorechars);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>reverseword_utf(entry-&gt;appnd);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>reverseword(entry-&gt;appnd);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (pHMgr-&gt;is_aliasf()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>int index = atoi(dash_str.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>entry-&gt;contclasslen = (unsigned short)pHMgr-&gt;<text:span text:style-name="T10">get_aliasf</text:span>(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>index, &amp;(entry-&gt;contclass), af);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (!entry-&gt;contclasslen)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>HUNSPELL_WARNING(stderr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="33"/>&quot;error: bad affix flag alias: \&quot;%s\&quot;\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="33"/>dash_str.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>entry-&gt;contclasslen = (unsigned short)pHMgr-&gt;decode_flags(</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="18"/>&amp;(entry-&gt;contclass), dash_str.c_str(), af);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>std::sort(entry-&gt;contclass, entry-&gt;contclass + entry-&gt;contclasslen);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>havecontclass = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>for (unsigned short _i = 0; _i &lt; entry-&gt;contclasslen; _i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>contclasses[(entry-&gt;contclass)[_i]] = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>entry-&gt;appnd = std::string(start_piece, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!ignorechars.empty()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>remove_ignored_chars_utf(entry-&gt;appnd, ignorechars_utf16);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>remove_ignored_chars(entry-&gt;appnd, ignorechars);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>reverseword_utf(entry-&gt;appnd);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>reverseword(entry-&gt;appnd);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (entry-&gt;appnd.compare(&quot;0&quot;) == 0) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>entry-&gt;appnd.clear();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><text:span text:style-name="T8">// piece 5 - is the conditions descriptions</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 4: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string chunk(start_piece, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (complexprefixes) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>reverseword_utf(chunk);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>reverseword(chunk);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><office:annotation office:name="__Annotation__10562_3987638846">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-28T11:08:09.861299783</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">Dangerous to reverse a regex. Also implementation Hunspell is not safe for ^ at end of input. Reversing input, not regex.</text:span></text:p>
      </office:annotation>reverse_condition<office:annotation-end office:name="__Annotation__10562_3987638846"/>(chunk);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (!entry-&gt;strip.empty() &amp;&amp; chunk != &quot;.&quot; &amp;&amp;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>redundant_condition(at, entry-&gt;strip.c_str(), entry-&gt;strip.size(), chunk.c_str(),</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>af-&gt;getlinenum()))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>chunk = &quot;.&quot;;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (at == &apos;S&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>reverseword(chunk);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><office:annotation office:name="__Annotation__10563_3987638846">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-28T11:09:20.166686226</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T20">Dangerous to reverse a regex. Also implementation Hunspell is not safe for ^ at end of input. Reversing input, not regex.</text:span></text:p>
      </office:annotation>reverse_condition<office:annotation-end office:name="__Annotation__10563_3987638846"/>(chunk);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (encodeit(*entry, chunk.c_str()))</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>case 5: {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string chunk(start_piece, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>np++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (pHMgr-&gt;is_aliasm()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>int index = atoi(chunk.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>entry-&gt;morphcode = pHMgr-&gt;get_aliasm(index);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (complexprefixes) { <text:s/><text:span text:style-name="T9">// XXX - fix me for morph. gen.</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>if (utf8)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>reverseword_utf(chunk);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>else</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="16"/>reverseword(chunk);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/><text:span text:style-name="T1">// add the remaining of the line</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>std::string::const_iterator end = nl.end();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="12"/>if (iter != end) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>chunk.append(iter, end);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>entry-&gt;morphcode = mystrdup(chunk.c_str());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (!entry-&gt;morphcode)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>default:</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>break;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>i++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>start_piece = mystrsep(nl, iter);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// check to make sure we parsed enough pieces</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (np &lt; 4) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>char* err = pHMgr-&gt;encode_flag(aflag);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (err) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>HUNSPELL_WARNING(stderr, &quot;error: line %d: affix %s is corrupt\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="25"/>af-&gt;getlinenum(), err);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>free(err);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return false;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#ifdef DEBUG</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T1">// detect unnecessary fields, excepting comments</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (basefieldnum) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>int fieldnum =</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>!(entry-&gt;morphcode) ? 5 : ((*(entry-&gt;morphcode) == &apos;#&apos;) ? 5 : 6);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (fieldnum != basefieldnum)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>HUNSPELL_WARNING(stderr, &quot;warning: line %d: bad field number\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="25"/>af-&gt;getlinenum());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>basefieldnum =</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>!(entry-&gt;morphcode) ? 5 : ((*(entry-&gt;morphcode) == &apos;#&apos;) ? 5 : 6);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">#endif</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// now create SfxEntry or PfxEntry objects and use links to</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">// build an ordered (sorted by affix string) list</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::vector&lt;AffEntry*&gt;::iterator start = affentries.begin();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::vector&lt;AffEntry*&gt;::iterator end = affentries.end();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (std::vector&lt;AffEntry*&gt;::iterator affentry = start; affentry != end; ++affentry) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (at == &apos;P&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>build_pfxtree(static_cast&lt;PfxEntry*&gt;(*affentry));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>build_sfxtree(static_cast&lt;SfxEntry*&gt;(*affentry));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/><text:span text:style-name="T1">//contents belong to AffixMgr now</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>affentries.release();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return true;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">int <text:span text:style-name="T8">AffixMgr::redundant_condition</text:span>(char ft,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>const char* strip,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>int stripl,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>const char* cond,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="34"/>int linenum) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="2"/>int condl = strlen(cond);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int i;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int j;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int neg;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>int in;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>if (ft == &apos;P&apos;) { <text:s/><text:span text:style-name="T1">// prefix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (strncmp(strip, cond, condl) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for (i = 0, j = 0; (i &lt; stripl) &amp;&amp; (j &lt; condl); i++, j++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (cond[j] != &apos;[&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (cond[j] != strip[i]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>HUNSPELL_WARNING(stderr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>&quot;warning: line %d: incompatible stripping &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>&quot;characters and condition\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>linenum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>neg = (cond[j + 1] == &apos;^&apos;) ? 1 : 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>in = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>do {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>j++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (strip[i] == cond[j])</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>in = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>} while ((j &lt; (condl - 1)) &amp;&amp; (cond[j] != &apos;]&apos;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (j == (condl - 1) &amp;&amp; (cond[j] != &apos;]&apos;)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>HUNSPELL_WARNING(stderr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>&quot;error: line %d: missing ] in condition:\n%s\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>linenum, cond);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if ((!neg &amp;&amp; !in) || (neg &amp;&amp; in)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>HUNSPELL_WARNING(stderr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>&quot;warning: line %d: incompatible stripping &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>&quot;characters and condition\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>linenum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (j &gt;= condl)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>} else { <text:s/><text:span text:style-name="T1">// suffix</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if ((stripl &gt;= condl) &amp;&amp; strcmp(strip + stripl - condl, cond) == 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>if (utf8) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for (i = stripl - 1, j = condl - 1; (i &gt;= 0) &amp;&amp; (j &gt;= 0); i--, j--) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>if (cond[j] != &apos;]&apos;) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if (cond[j] != strip[i]) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>HUNSPELL_WARNING(stderr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>&quot;warning: line %d: incompatible stripping &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>&quot;characters and condition\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>linenum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>} else {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>in = 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>do {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>j--;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>if (strip[i] == cond[j])</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="14"/>in = 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:soft-page-break/><text:s text:c="10"/>} while ((j &gt; 0) &amp;&amp; (cond[j] != &apos;[&apos;));</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if ((j == 0) &amp;&amp; (cond[j] != &apos;[&apos;)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>HUNSPELL_WARNING(stderr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>&quot;error: line: %d: missing ] in condition:\n%s\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>linenum, cond);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>neg = (cond[j + 1] == &apos;^&apos;) ? 1 : 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>if ((!neg &amp;&amp; !in) || (neg &amp;&amp; in)) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>HUNSPELL_WARNING(stderr,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>&quot;warning: line %d: incompatible stripping &quot;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>&quot;characters and condition\n&quot;,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="29"/>linenum);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>if (j &lt; 0)</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>return 1;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return 0;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">std::vector&lt;std::string&gt; <text:span text:style-name="T8">AffixMgr::get_suffix_words</text:span>(short unsigned* suff,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>int len,</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="31"/>const char* root_word) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>std::vector&lt;std::string&gt; slst;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>short unsigned* start_ptr = suff;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>for (int j = 0; j &lt; SETSIZE; j++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>SfxEntry* ptr = sStart[j];</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>while (ptr) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>suff = start_ptr;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>for (int i = 0; i &lt; len; i++) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/><office:annotation office:name="__Annotation__10532_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:13:13.709767095</dc:date>
       <text:p text:style-name="P10"><text:span text:style-name="T19">If the </text:span><text:span text:style-name="T20">flag which is provided via parameter suff equals </text:span><text:span text:style-name="T19">the flag of the suffix entry.</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10532_3164858689"/> ((*suff) == ptr-&gt;getFlag()) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>std::string nw(root_word);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>nw.append(ptr-&gt;getAffix());</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>hentry* ht = ptr-&gt;<text:span text:style-name="T10">checkword</text:span>(nw.c_str(), nw.size(), 0, NULL, 0, 0, 0);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/><office:annotation office:name="__Annotation__10533_3164858689">
       <dc:creator>Unknown Author</dc:creator>
       <dc:date>2018-02-23T13:15:26.624741840</dc:date>
       <text:p><text:span text:style-name="T19">Retrieve hash entry which matches the provided root_word that has the suffix found appended to it. Then add that hash entry to the results that will be returned.</text:span></text:p>
      </office:annotation>if<office:annotation-end office:name="__Annotation__10533_3164858689"/> (ht) {</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="12"/>slst.push_back(nw);</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="10"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="8"/>suff++;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="6"/>ptr = ptr-&gt;getNext();</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"><text:s text:c="2"/>return slst;</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5">}</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P5"/>
    </text:list-item>
   </text:list>
  </office:text>
 </office:body>
</office:document>